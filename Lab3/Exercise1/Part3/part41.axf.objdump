
W:/Verilog/ECE243/Lab3/Exercise1/Part3/part41.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that converts a binary number to decimal */
           .text               // executable code follows
           .global _start
_start:
			MOV    SP, #0
   0:	e3a0d000 	mov	sp, #0
            SUB    SP, #3 //set up stack pointer to it's correct position
   4:	e24dd003 	sub	sp, sp, #3
            
            MOV    R4, #N		//number to be converted	
   8:	e3a040b4 	mov	r4, #180	; 0xb4
            MOV    R5, #Digits  // R5 points to the decimal digits storage location
   c:	e3a050b8 	mov	r5, #184	; 0xb8
            LDR    R4, [R4]     // R4 holds N
  10:	e5944000 	ldr	r4, [r4]
            MOV    R0, R4       // parameter for DIVIDE goes in R0
  14:	e1a00004 	mov	r0, r4
            BL     DISMANTLE
  18:	eb000004 	bl	30 <DISMANTLE>
            STRB   R12, [R5, #3] // 4th digit is now in R12
  1c:	e5c5c003 	strb	r12, [r5, #3]
            STRB   R11, [R5, #2] // 3rd digit is now in R11
  20:	e5c5b002 	strb	r11, [r5, #2]
            STRB   R10, [R5, #1] // 2nd digit is now in R10
  24:	e5c5a001 	strb	r10, [r5, #1]
            STRB   R9,  [R5]     // 1st digit is now in R9
  28:	e5c59000 	strb	r9, [r5]

0000002c <END>:
END:        B      END
  2c:	eafffffe 	b	2c <END>

00000030 <DISMANTLE>:

/* Subroutine to dismantle 4 digit decimal R0. (R4 original not to be touched I guess)
 * Returns: quotient in R1, and remainder in R0
*/
DISMANTLE:	MOV     R12, #0
  30:	e3a0c000 	mov	r12, #0
			MOV     R11, #0
  34:	e3a0b000 	mov	r11, #0
			MOV     R10, #0
  38:	e3a0a000 	mov	r10, #0
            MOV     R9 , #0
  3c:	e3a09000 	mov	r9, #0
            
			SUB    SP, #1 //we are using functions in function so we need to store lr
  40:	e24dd001 	sub	sp, sp, #1
			STR	   LR, [SP]
  44:	e58de000 	str	lr, [sp]
            
            MOV    R1, #1000		
  48:	e3a01ffa 	mov	r1, #1000	; 0x3e8
            
            CMP    R0, R1
  4c:	e1500001 	cmp	r0, r1
            BL     DIVIDE //R1 is quotient and R0 is the remainder
  50:	eb00000f 	bl	94 <DIVIDE>
            CMP    R1, #1000
  54:	e3510ffa 	cmp	r1, #1000	; 0x3e8
            MOVNE  R12, R1
  58:	11a0c001 	movne	r12, r1
            
            MOV    R1, #100
  5c:	e3a01064 	mov	r1, #100	; 0x64
			
            CMP    R0, R1
  60:	e1500001 	cmp	r0, r1
            BL     DIVIDE //R1 is quotient and R0 is the remainder
  64:	eb00000a 	bl	94 <DIVIDE>
            CMP    R1, #100
  68:	e3510064 	cmp	r1, #100	; 0x64
            MOVNE  R11, R1
  6c:	11a0b001 	movne	r11, r1
            
            MOV    R1, #10
  70:	e3a0100a 	mov	r1, #10
			
            CMP    R0, R1
  74:	e1500001 	cmp	r0, r1
            BL     DIVIDE //R1 is quotient and R0 is the remainder
  78:	eb000005 	bl	94 <DIVIDE>
            CMP    R1, #10
  7c:	e351000a 	cmp	r1, #10
            MOVNE  R10, R1
  80:	11a0a001 	movne	r10, r1
            
            MOV    R9, R0
  84:	e1a09000 	mov	r9, r0
            
            LDR    LR, [SP] //load from stack
  88:	e59de000 	ldr	lr, [sp]
            ADD    SP, #1
  8c:	e28dd001 	add	sp, sp, #1
            MOV	   PC, LR
  90:	e1a0f00e 	mov	pc, lr

00000094 <DIVIDE>:
          
/* Subroutine to perform the integer division R0 / R1.
 * Returns: quotient in R1, and remainder in R0
*/
DIVIDE:     MOV    R2, #0
  94:	e3a02000 	mov	r2, #0

00000098 <CONT>:
CONT:       CMP    R0, R1
  98:	e1500001 	cmp	r0, r1
            BLT    DIV_END
  9c:	ba000002 	blt	ac <DIV_END>
            SUB    R0, R1
  a0:	e0400001 	sub	r0, r0, r1
            ADD    R2, #1
  a4:	e2822001 	add	r2, r2, #1
            B      CONT
  a8:	eafffffa 	b	98 <CONT>

000000ac <DIV_END>:
DIV_END:    MOV    R1, R2     // quotient in R1 (remainder in R0)
  ac:	e1a01002 	mov	r1, r2
            MOV    PC, LR
  b0:	e1a0f00e 	mov	pc, lr

000000b4 <N>:
  b4:	000022fa 	.word	0x000022fa

000000b8 <Digits>:
  b8:	00000000 	.word	0x00000000
