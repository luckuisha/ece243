
W:/Verilog/ECE243/Lab4/directory/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that counts consecutive 1s */

          .text                   // executable code follows
          .global _start                  
_start:                             
          MOV     R12, #TEST_NUM   // load the data word ...
   0:	e3a0cf5d 	mov	r12, #372	; 0x174
          ldr     R1, [r12]        // into R1
   4:	e59c1000 	ldr	r1, [r12]
		
          MOV     R0, #0          
   8:	e3a00000 	mov	r0, #0
		  mov R5, #0			// R5 will hold the result
   c:	e3a05000 	mov	r5, #0
		  mov R6, #0			// R6 will hold the result
  10:	e3a06000 	mov	r6, #0
		  mov R7, #0			// R7 will hold the result
  14:	e3a07000 	mov	r7, #0

00000018 <LOOP>:

		  
LOOP:	
		movs r1, r1
  18:	e1b01001 	movs	r1, r1
		beq DISPLAY
  1c:	0a00002c 	beq	d4 <DISPLAY>
		
		mov r8, #0
  20:	e3a08000 	mov	r8, #0
		MOV     R10, R1
  24:	e1a0a001 	mov	r10, r1
		bl ONES
  28:	eb00001d 	bl	a4 <ONES>
		
		cmp r5, r8
  2c:	e1550008 	cmp	r5, r8
		movlt r5, r8
  30:	b1a05008 	movlt	r5, r8
		
		mov r8, #0
  34:	e3a08000 	mov	r8, #0
		MOV     R10, R1
  38:	e1a0a001 	mov	r10, r1
		bl ZEROS
  3c:	eb00001e 	bl	bc <ZEROS>
		
		cmp r6, r8
  40:	e1560008 	cmp	r6, r8
		movlt r6, r8
  44:	b1a06008 	movlt	r6, r8
		
		mov r8, #0
  48:	e3a08000 	mov	r8, #0
		MOV     R10, R1
  4c:	e1a0a001 	mov	r10, r1
		bl ONEZEROS
  50:	eb00000d 	bl	8c <ONEZEROS>
        
        mov r9, r8 
  54:	e1a09008 	mov	r9, r8
        mov r8, #0
  58:	e3a08000 	mov	r8, #0
        MOV     R10, R1
  5c:	e1a0a001 	mov	r10, r1
        
        bl ONEZEROSNOT
  60:	eb00000c 	bl	98 <ONEZEROSNOT>
		
        cmp r8, r9
  64:	e1580009 	cmp	r8, r9
		movlt r8, r9
  68:	b1a08009 	movlt	r8, r9
        
		cmp r7, r8
  6c:	e1570008 	cmp	r7, r8
		movlt r7, r8
  70:	b1a07008 	movlt	r7, r8
		
		add R12, #4
  74:	e28cc004 	add	r12, r12, #4
		ldr r1, [R12]
  78:	e59c1000 	ldr	r1, [r12]
		b LOOP
  7c:	eaffffe5 	b	18 <LOOP>

00000080 <SEG7_CODE>:
		
		
SEG7_CODE:  MOV     R1, #BIT_CODES  
  80:	e3a010c8 	mov	r1, #200	; 0xc8
            LDRB    R0, [R1, R0]    
  84:	e7d10000 	ldrb	r0, [r1, r0]
            BX      LR       
  88:	e12fff1e 	bx	lr

0000008c <ONEZEROS>:

/*R10 to receive the input data and register
* R8 output number of consecutive 1s.
*/		  
ONEZEROS:           
          LDR     R2, =0xaaaaaaaa      // perform SHIFT, followed by AND
  8c:	e59f2108 	ldr	r2, [pc, #264]	; 19c <TEST_NUM+0x28>
          eOR     R10, R10, R2
  90:	e02aa002 	eor	r10, r10, r2
		  B       ZEROS
  94:	ea000008 	b	bc <ZEROS>

00000098 <ONEZEROSNOT>:

ONEZEROSNOT: 
		  //mvn	  r10, r10	
          LDR     R2, =0xaaaaaaaa      // perform SHIFT, followed by AND
  98:	e59f20fc 	ldr	r2, [pc, #252]	; 19c <TEST_NUM+0x28>
          eOR     R10, R10, R2
  9c:	e02aa002 	eor	r10, r10, r2
		  B       ONES
  a0:	eaffffff 	b	a4 <ONES>

000000a4 <ONES>:

ONES:     
		  CMP     R10, #0          // loop until the data contains no more 1's
  a4:	e35a0000 	cmp	r10, #0
          moveq	  pc, lr             
  a8:	01a0f00e 	moveq	pc, lr
          LSR     R2, R10, #1      // perform SHIFT, followed by AND
  ac:	e1a020aa 	lsr	r2, r10, #1
          AND     R10, R10, R2      
  b0:	e00aa002 	and	r10, r10, r2
          ADD     R8, #1          // count the string length so far
  b4:	e2888001 	add	r8, r8, #1
          B       ONES 
  b8:	eafffff9 	b	a4 <ONES>

000000bc <ZEROS>:

ZEROS:    
		  mvn     r10, r10
  bc:	e1e0a00a 	mvn	r10, r10
		  B       ONES
  c0:	eafffff7 	b	a4 <ONES>

000000c4 <END>:
		  
		  
		  
END:      B       END    
  c4:	eafffffe 	b	c4 <END>

000000c8 <BIT_CODES>:
  c8:	4f5b063f 	.word	0x4f5b063f
  cc:	077d6d66 	.word	0x077d6d66
  d0:	0000677f 	.word	0x0000677f

000000d4 <DISPLAY>:
            .byte   0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111
            .skip   2      // pad with 2 bytes to maintain word alignment


/* Display R5 on HEX1-0, R6 on HEX3-2 and R7 on HEX5-4 */
DISPLAY:    MOV     R1, #10
  d4:	e3a0100a 	mov	r1, #10
			MOV     R4, #0
  d8:	e3a04000 	mov	r4, #0
			LDR     R8, =0xFF200020 // base address of HEX3-HEX0
  dc:	e59f80bc 	ldr	r8, [pc, #188]	; 1a0 <TEST_NUM+0x2c>
            MOV     R0, R5          // display R5 on HEX1-0
  e0:	e1a00005 	mov	r0, r5
            BL      DIVIDE          // ones digit will be in R0; tens
  e4:	eb00001a 	bl	154 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  e8:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  ec:	ebffffe3 	bl	80 <SEG7_CODE>
            MOV     R11, R0          // save bit code for first digit
  f0:	e1a0b000 	mov	r11, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  f4:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       //For the second digit
  f8:	ebffffe0 	bl	80 <SEG7_CODE>
            ORR     R4, r11, R0, LSL # 8
  fc:	e18b4400 	orr	r4, r11, r0, lsl #8
            
            //code for R6 (not shown)
            MOV     R0, R6          // display R5 on HEX1-0
 100:	e1a00006 	mov	r0, r6
            BL      DIVIDE          // ones digit will be in R0; tens
 104:	eb000012 	bl	154 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
 108:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
 10c:	ebffffdb 	bl	80 <SEG7_CODE>
            MOV     r11, R0          // save bit code for first digit
 110:	e1a0b000 	mov	r11, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
 114:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       //For the second digit
 118:	ebffffd8 	bl	80 <SEG7_CODE>
			LSL R11, R11, #16
 11c:	e1a0b80b 	lsl	r11, r11, #16
            ORR     R11, r11, R0, LSL # 24
 120:	e18bbc00 	orr	r11, r11, r0, lsl #24
			ORR     R4, r11, R4
 124:	e18b4004 	orr	r4, r11, r4
			
			STR     R4, [R8]
 128:	e5884000 	str	r4, [r8]

            //code for R7 (not shown)
			//LDR     R8, =0xFF200030
            MOV     R0, R7          // display R5 on HEX1-0
 12c:	e1a00007 	mov	r0, r7
            BL      DIVIDE          // ones digit will be in R0; tens
 130:	eb000007 	bl	154 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
 134:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
 138:	ebffffd0 	bl	80 <SEG7_CODE>
            MOV     r11, R0          // save bit code for first digit
 13c:	e1a0b000 	mov	r11, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
 140:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       //For the second digit
 144:	ebffffcd 	bl	80 <SEG7_CODE>
            ORR     R4, r11, R0, LSL #8
 148:	e18b4400 	orr	r4, r11, r0, lsl #8
			STR     R4, [R8,#16]
 14c:	e5884010 	str	r4, [r8, #16]
			
			b END
 150:	eaffffdb 	b	c4 <END>

00000154 <DIVIDE>:
			
	  
/* Subroutine to perform the integer division R0 / R1.
 * Returns: quotient in R1, and remainder in R0
*/
DIVIDE:     MOV    R2, #0
 154:	e3a02000 	mov	r2, #0

00000158 <CONT>:
CONT:       CMP    R0, R1
 158:	e1500001 	cmp	r0, r1
            BLT    DIV_END
 15c:	ba000002 	blt	16c <DIV_END>
            SUB    R0, R1
 160:	e0400001 	sub	r0, r0, r1
            ADD    R2, #1
 164:	e2822001 	add	r2, r2, #1
            B      CONT
 168:	eafffffa 	b	158 <CONT>

0000016c <DIV_END>:
DIV_END:    MOV    R1, R2     // quotient in R1 (remainder in R0)
 16c:	e1a01002 	mov	r1, r2
            MOV    PC, LR
 170:	e1a0f00e 	mov	pc, lr

00000174 <TEST_NUM>:
 174:	103fe00f 	.word	0x103fe00f
 178:	00000000 	.word	0x00000000
 17c:	aaaaaaaa 	.word	0xaaaaaaaa
 180:	bbbbbbbb 	.word	0xbbbbbbbb
 184:	11111111 	.word	0x11111111
 188:	abcdef10 	.word	0xabcdef10
 18c:	01234567 	.word	0x01234567
 190:	56789abc 	.word	0x56789abc
 194:	afafafaf 	.word	0xafafafaf
 198:	00000000 	.word	0x00000000
 19c:	aaaaaaaa 	.word	0xaaaaaaaa
 1a0:	ff200020 	.word	0xff200020
