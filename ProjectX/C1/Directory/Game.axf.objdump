
W:/Verilog/ECE243/ProjectX/C1/Directory/Game.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	68 2e 00 00 6c 2e 00 00 70 2e 00 00 74 2e 00 00     h...l...p...t...
  30:	78 2e 00 00 40 64 00 00 7c 2e 00 00 bc 2e 00 00     x...@d..|.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00173c 	bl	5dcc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000065f8 	.word	0x000065f8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00006e40 	.word	0x00006e40

00000124 <__cs3_heap_start_ptr>:
     124:	00007090 	.word	0x00007090

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00006e48 	.word	0x00006e48
     170:	00006e4b 	.word	0x00006e4b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00006e48 	.word	0x00006e48
     1bc:	00006e48 	.word	0x00006e48
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00006e48 	.word	0x00006e48
     200:	00000000 	.word	0x00000000
     204:	000064dc 	.word	0x000064dc

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <__cs3_region_zero_size_ram>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <__cs3_region_zero_size_ram+0x4>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <__cs3_region_zero_size_ram+0x8>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <__cs3_region_zero_size_ram+0xc>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <__cs3_region_zero_size_ram+0x10>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000064dc 	.word	0x000064dc
     250:	00006e4c 	.word	0x00006e4c
     254:	000065f8 	.word	0x000065f8
     258:	00000000 	.word	0x00000000

0000025c <Mob_create>:
#define TOPLEFT -1
#define TOPRIGHT -2
#define BOTRIGHT -3
#define BOTLEFT -4

void Mob_create(int id, int x,int y, int dx, int dy, int health, int cooldown, int mapLoc, int mobIndex){
     25c:	e92d00f0 	push	{r4, r5, r6, r7}
     260:	e59d501c 	ldr	r5, [sp, #28]
     264:	e59d4020 	ldr	r4, [sp, #32]
    GAME.objMap[mapLoc].arrMobs[mobIndex].id = id;
     268:	e0844104 	add	r4, r4, r4, lsl #2
     26c:	e1a04184 	lsl	r4, r4, #3
     270:	e306ce64 	movw	r12, #28260	; 0x6e64
     274:	e340c000 	movt	r12, #0
     278:	e59c6028 	ldr	r6, [r12, #40]	; 0x28
     27c:	e7966205 	ldr	r6, [r6, r5, lsl #4]
     280:	e7860004 	str	r0, [r6, r4]
    GAME.objMap[mapLoc].arrMobs[mobIndex].coolDown = cooldown; 
     284:	e59c6028 	ldr	r6, [r12, #40]	; 0x28
     288:	e7966205 	ldr	r6, [r6, r5, lsl #4]
     28c:	e0866004 	add	r6, r6, r4
     290:	e59d7018 	ldr	r7, [sp, #24]
     294:	e586701c 	str	r7, [r6, #28]
    GAME.objMap[mapLoc].arrMobs[mobIndex].x = x;
     298:	e59c6028 	ldr	r6, [r12, #40]	; 0x28
     29c:	e7966205 	ldr	r6, [r6, r5, lsl #4]
     2a0:	e0866004 	add	r6, r6, r4
     2a4:	e5861008 	str	r1, [r6, #8]
    GAME.objMap[mapLoc].arrMobs[mobIndex].y = y;
     2a8:	e59c1028 	ldr	r1, [r12, #40]	; 0x28
     2ac:	e7911205 	ldr	r1, [r1, r5, lsl #4]
     2b0:	e0811004 	add	r1, r1, r4
     2b4:	e581200c 	str	r2, [r1, #12]
    GAME.objMap[mapLoc].arrMobs[mobIndex].dx = dx;
     2b8:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     2bc:	e7922205 	ldr	r2, [r2, r5, lsl #4]
     2c0:	e0822004 	add	r2, r2, r4
     2c4:	e5823010 	str	r3, [r2, #16]
    GAME.objMap[mapLoc].arrMobs[mobIndex].dy = dy;
     2c8:	e59c3028 	ldr	r3, [r12, #40]	; 0x28
     2cc:	e7933205 	ldr	r3, [r3, r5, lsl #4]
     2d0:	e0833004 	add	r3, r3, r4
     2d4:	e59d2010 	ldr	r2, [sp, #16]
     2d8:	e5832014 	str	r2, [r3, #20]
    GAME.objMap[mapLoc].arrMobs[mobIndex].health = 1;
     2dc:	e59c3028 	ldr	r3, [r12, #40]	; 0x28
     2e0:	e7933205 	ldr	r3, [r3, r5, lsl #4]
     2e4:	e0833004 	add	r3, r3, r4
     2e8:	e3a02001 	mov	r2, #1
     2ec:	e5832020 	str	r2, [r3, #32]
    GAME.objMap[mapLoc].arrMobs[mobIndex].killed = false;
     2f0:	e59c3028 	ldr	r3, [r12, #40]	; 0x28
     2f4:	e7932205 	ldr	r2, [r3, r5, lsl #4]
     2f8:	e0822004 	add	r2, r2, r4
     2fc:	e3a03000 	mov	r3, #0
     300:	e5c23004 	strb	r3, [r2, #4]
    GAME.objMap[mapLoc].arrMobs[mobIndex].onScreen = false;
     304:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     308:	e7922205 	ldr	r2, [r2, r5, lsl #4]
     30c:	e0822004 	add	r2, r2, r4
     310:	e5c23005 	strb	r3, [r2, #5]
    GAME.objMap[mapLoc].arrMobs[mobIndex].inVisibleVector = false;
     314:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     318:	e7922205 	ldr	r2, [r2, r5, lsl #4]
     31c:	e0822004 	add	r2, r2, r4
     320:	e5c23006 	strb	r3, [r2, #6]
    GAME.objMap[mapLoc].arrMobs[mobIndex].spawned = false;
     324:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     328:	e7922205 	ldr	r2, [r2, r5, lsl #4]
     32c:	e0822004 	add	r2, r2, r4
     330:	e5c23007 	strb	r3, [r2, #7]
    GAME.objMap[mapLoc].arrMobs[mobIndex].projectile = false;
     334:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     338:	e7922205 	ldr	r2, [r2, r5, lsl #4]
     33c:	e0822004 	add	r2, r2, r4
     340:	e5c23019 	strb	r3, [r2, #25]
	GAME.objMap[mapLoc].arrMobs[mobIndex].grounded = false;
     344:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     348:	e7922205 	ldr	r2, [r2, r5, lsl #4]
     34c:	e0822004 	add	r2, r2, r4
     350:	e5c23018 	strb	r3, [r2, #24]
    //A function that takes id and sets all these accordingly
    GAME.objMap[mapLoc].arrMobs[mobIndex].spritePtr = &GAME.spritesArr[id];
     354:	e59c3028 	ldr	r3, [r12, #40]	; 0x28
     358:	e7933205 	ldr	r3, [r3, r5, lsl #4]
     35c:	e0834004 	add	r4, r3, r4
     360:	e59c30fc 	ldr	r3, [r12, #252]	; 0xfc
     364:	e0830200 	add	r0, r3, r0, lsl #4
     368:	e5840024 	str	r0, [r4, #36]	; 0x24
}
     36c:	e8bd00f0 	pop	{r4, r5, r6, r7}
     370:	e12fff1e 	bx	lr

00000374 <Terrain_create>:

void Terrain_create(int id, int x,int y,  int mapLoc, int terrainIndex){
     374:	e92d0030 	push	{r4, r5}
     378:	e59d4008 	ldr	r4, [sp, #8]
    GAME.objMap[mapLoc].arrTers[terrainIndex].id = id;
     37c:	e1a03203 	lsl	r3, r3, #4
     380:	e0844104 	add	r4, r4, r4, lsl #2
     384:	e1a04104 	lsl	r4, r4, #2
     388:	e306ce64 	movw	r12, #28260	; 0x6e64
     38c:	e340c000 	movt	r12, #0
     390:	e59c5028 	ldr	r5, [r12, #40]	; 0x28
     394:	e0855003 	add	r5, r5, r3
     398:	e5955008 	ldr	r5, [r5, #8]
     39c:	e7850004 	str	r0, [r5, r4]
    GAME.objMap[mapLoc].arrTers[terrainIndex].x = x;
     3a0:	e59c5028 	ldr	r5, [r12, #40]	; 0x28
     3a4:	e0855003 	add	r5, r5, r3
     3a8:	e5955008 	ldr	r5, [r5, #8]
     3ac:	e0855004 	add	r5, r5, r4
     3b0:	e5851008 	str	r1, [r5, #8]
    GAME.objMap[mapLoc].arrTers[terrainIndex].y = y;
     3b4:	e59c1028 	ldr	r1, [r12, #40]	; 0x28
     3b8:	e0811003 	add	r1, r1, r3
     3bc:	e5911008 	ldr	r1, [r1, #8]
     3c0:	e0811004 	add	r1, r1, r4
     3c4:	e581200c 	str	r2, [r1, #12]
    GAME.objMap[mapLoc].arrTers[terrainIndex].onScreen = false;
     3c8:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     3cc:	e0822003 	add	r2, r2, r3
     3d0:	e5921008 	ldr	r1, [r2, #8]
     3d4:	e0811004 	add	r1, r1, r4
     3d8:	e3a02000 	mov	r2, #0
     3dc:	e5c12004 	strb	r2, [r1, #4]
    GAME.objMap[mapLoc].arrTers[terrainIndex].inVisibleVector = false;
     3e0:	e59c1028 	ldr	r1, [r12, #40]	; 0x28
     3e4:	e0811003 	add	r1, r1, r3
     3e8:	e5911008 	ldr	r1, [r1, #8]
     3ec:	e0811004 	add	r1, r1, r4
     3f0:	e5c12005 	strb	r2, [r1, #5]
    //A function that takes id and sets all these accordingly
    GAME.objMap[mapLoc].arrTers[terrainIndex].spritePtr = &GAME.spritesArr[id];
     3f4:	e59c2028 	ldr	r2, [r12, #40]	; 0x28
     3f8:	e0823003 	add	r3, r2, r3
     3fc:	e5933008 	ldr	r3, [r3, #8]
     400:	e0834004 	add	r4, r3, r4
     404:	e59c30fc 	ldr	r3, [r12, #252]	; 0xfc
     408:	e0830200 	add	r0, r3, r0, lsl #4
     40c:	e5840010 	str	r0, [r4, #16]
}
     410:	e8bd0030 	pop	{r4, r5}
     414:	e12fff1e 	bx	lr

00000418 <Map_create>:

void Map_create(){
     418:	e92d4030 	push	{r4, r5, lr}
     41c:	e24dd01c 	sub	sp, sp, #28
    GAME.objMap[1].arrTers =  (Terrain *)malloc(1/*# of terrain objs*/* sizeof(Terrain));
     420:	e3064e64 	movw	r4, #28260	; 0x6e64
     424:	e3404000 	movt	r4, #0
     428:	e5945028 	ldr	r5, [r4, #40]	; 0x28
     42c:	e3a00014 	mov	r0, #20
     430:	eb000b1e 	bl	30b0 <malloc>
     434:	e5850018 	str	r0, [r5, #24]
    GAME.objMap[1].numOfTers = 1;
     438:	e5943028 	ldr	r3, [r4, #40]	; 0x28
     43c:	e3a05001 	mov	r5, #1
     440:	e583501c 	str	r5, [r3, #28]
    GAME.objMap[31].arrMobs = (Mob *)malloc(1/*# of mobs*/ * sizeof(Mob));
     444:	e5944028 	ldr	r4, [r4, #40]	; 0x28
     448:	e3a00028 	mov	r0, #40	; 0x28
     44c:	eb000b17 	bl	30b0 <malloc>
     450:	e58401f0 	str	r0, [r4, #496]	; 0x1f0
    GAME.objMap[31].numOfMobs = 1;
     454:	e58451f4 	str	r5, [r4, #500]	; 0x1f4
    GAME.objMap[30].arrTers =  (Terrain *)malloc(1/*# of terrain objs*/* sizeof(Terrain));
     458:	e3a00014 	mov	r0, #20
     45c:	eb000b13 	bl	30b0 <malloc>
     460:	e58401e8 	str	r0, [r4, #488]	; 0x1e8
    GAME.objMap[30].numOfTers = 1;
     464:	e58451ec 	str	r5, [r4, #492]	; 0x1ec
    Mob_create(0, 310, GAME_FLOOR - ZERO_HEIGHT, -1, 0, 1, 0, 31, 0 );
     468:	e3a04000 	mov	r4, #0
     46c:	e58d4000 	str	r4, [sp]
     470:	e58d5004 	str	r5, [sp, #4]
     474:	e58d4008 	str	r4, [sp, #8]
     478:	e3a0301f 	mov	r3, #31
     47c:	e58d300c 	str	r3, [sp, #12]
     480:	e58d4010 	str	r4, [sp, #16]
     484:	e1a00004 	mov	r0, r4
     488:	e3001136 	movw	r1, #310	; 0x136
     48c:	e3a020be 	mov	r2, #190	; 0xbe
     490:	e3e03000 	mvn	r3, #0
     494:	ebffff70 	bl	25c <Mob_create>
    Terrain_create(0, 305, GAME_FLOOR - 50, 30, 0);
     498:	e58d4000 	str	r4, [sp]
     49c:	e1a00004 	mov	r0, r4
     4a0:	e3001131 	movw	r1, #305	; 0x131
     4a4:	e3a02096 	mov	r2, #150	; 0x96
     4a8:	e3a0301e 	mov	r3, #30
     4ac:	ebffffb0 	bl	374 <Terrain_create>
    Terrain_create(1, 10, GAME_FLOOR +5, 1, 0);
     4b0:	e58d4000 	str	r4, [sp]
     4b4:	e1a00005 	mov	r0, r5
     4b8:	e3a0100a 	mov	r1, #10
     4bc:	e3a020cd 	mov	r2, #205	; 0xcd
     4c0:	e1a03005 	mov	r3, r5
     4c4:	ebffffaa 	bl	374 <Terrain_create>
}
     4c8:	e28dd01c 	add	sp, sp, #28
     4cc:	e8bd8030 	pop	{r4, r5, pc}

000004d0 <Space_create>:

void Space_create(){
     4d0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    GAME.objSpace.bins = (Bin **)malloc(GAME.objSpace.height * sizeof(Bin *));
     4d4:	e3064e64 	movw	r4, #28260	; 0x6e64
     4d8:	e3404000 	movt	r4, #0
     4dc:	e59400e8 	ldr	r0, [r4, #232]	; 0xe8
     4e0:	e1a00100 	lsl	r0, r0, #2
     4e4:	eb000af1 	bl	30b0 <malloc>
     4e8:	e58400e0 	str	r0, [r4, #224]	; 0xe0
    int i,j;
    for (i=0; i<GAME.objSpace.height; i++) 
     4ec:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
     4f0:	e3530000 	cmp	r3, #0
     4f4:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
     4f8:	e3a06000 	mov	r6, #0
     4fc:	e1a04006 	mov	r4, r6
        GAME.objSpace.bins[i] = (Bin *)malloc(GAME.objSpace.base * sizeof(Bin));
     500:	e3065e64 	movw	r5, #28260	; 0x6e64
     504:	e3405000 	movt	r5, #0
     508:	e59570e0 	ldr	r7, [r5, #224]	; 0xe0
     50c:	e59530e4 	ldr	r3, [r5, #228]	; 0xe4
     510:	e0630183 	rsb	r0, r3, r3, lsl #3
     514:	e1a00180 	lsl	r0, r0, #3
     518:	eb000ae4 	bl	30b0 <malloc>
     51c:	e7870106 	str	r0, [r7, r6, lsl #2]
}

void Space_create(){
    GAME.objSpace.bins = (Bin **)malloc(GAME.objSpace.height * sizeof(Bin *));
    int i,j;
    for (i=0; i<GAME.objSpace.height; i++) 
     520:	e2844001 	add	r4, r4, #1
     524:	e1a06004 	mov	r6, r4
     528:	e59530e8 	ldr	r3, [r5, #232]	; 0xe8
     52c:	e1540003 	cmp	r4, r3
     530:	3afffff4 	bcc	508 <Space_create+0x38>
        GAME.objSpace.bins[i] = (Bin *)malloc(GAME.objSpace.base * sizeof(Bin));
    
    for(i=0; i<GAME.objSpace.height; i++)
     534:	e3530000 	cmp	r3, #0
     538:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
     53c:	ea00001b 	b	5b0 <Space_create+0xe0>
        for(j=0; j<GAME.objSpace.base; j++){
            GAME.objSpace.bins[i][j].updatedFrameMobsID = GAME.frameID;
     540:	e0611181 	rsb	r1, r1, r1, lsl #3
     544:	e1a01181 	lsl	r1, r1, #3
     548:	e59340f8 	ldr	r4, [r3, #248]	; 0xf8
     54c:	e593c0e0 	ldr	r12, [r3, #224]	; 0xe0
     550:	e79cc000 	ldr	r12, [r12, r0]
     554:	e08cc001 	add	r12, r12, r1
     558:	e58c402c 	str	r4, [r12, #44]	; 0x2c
            GAME.objSpace.bins[i][j].updatedFrameTersID = GAME.frameID;
     55c:	e59340f8 	ldr	r4, [r3, #248]	; 0xf8
     560:	e593c0e0 	ldr	r12, [r3, #224]	; 0xe0
     564:	e79cc000 	ldr	r12, [r12, r0]
     568:	e08cc001 	add	r12, r12, r1
     56c:	e58c4030 	str	r4, [r12, #48]	; 0x30
            GAME.objSpace.bins[i][j].updatedFrameMainCharsID = GAME.frameID;
     570:	e593c0f8 	ldr	r12, [r3, #248]	; 0xf8
     574:	e59340e0 	ldr	r4, [r3, #224]	; 0xe0
     578:	e7944000 	ldr	r4, [r4, r0]
     57c:	e0841001 	add	r1, r4, r1
     580:	e581c034 	str	r12, [r1, #52]	; 0x34
    int i,j;
    for (i=0; i<GAME.objSpace.height; i++) 
        GAME.objSpace.bins[i] = (Bin *)malloc(GAME.objSpace.base * sizeof(Bin));
    
    for(i=0; i<GAME.objSpace.height; i++)
        for(j=0; j<GAME.objSpace.base; j++){
     584:	e2822001 	add	r2, r2, #1
     588:	e1a01002 	mov	r1, r2
     58c:	e593c0e4 	ldr	r12, [r3, #228]	; 0xe4
     590:	e152000c 	cmp	r2, r12
     594:	3affffe9 	bcc	540 <Space_create+0x70>
    GAME.objSpace.bins = (Bin **)malloc(GAME.objSpace.height * sizeof(Bin *));
    int i,j;
    for (i=0; i<GAME.objSpace.height; i++) 
        GAME.objSpace.bins[i] = (Bin *)malloc(GAME.objSpace.base * sizeof(Bin));
    
    for(i=0; i<GAME.objSpace.height; i++)
     598:	e2855001 	add	r5, r5, #1
     59c:	e1a00005 	mov	r0, r5
     5a0:	e59320e8 	ldr	r2, [r3, #232]	; 0xe8
     5a4:	e1550002 	cmp	r5, r2
     5a8:	3a000005 	bcc	5c4 <Space_create+0xf4>
     5ac:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
     5b0:	e3a00000 	mov	r0, #0
     5b4:	e1a05000 	mov	r5, r0
        for(j=0; j<GAME.objSpace.base; j++){
     5b8:	e3063e64 	movw	r3, #28260	; 0x6e64
     5bc:	e3403000 	movt	r3, #0
     5c0:	e1a06000 	mov	r6, r0
     5c4:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
     5c8:	e3520000 	cmp	r2, #0
     5cc:	0afffff1 	beq	598 <Space_create+0xc8>
            GAME.objSpace.bins[i][j].updatedFrameMobsID = GAME.frameID;
     5d0:	e1a00100 	lsl	r0, r0, #2
    int i,j;
    for (i=0; i<GAME.objSpace.height; i++) 
        GAME.objSpace.bins[i] = (Bin *)malloc(GAME.objSpace.base * sizeof(Bin));
    
    for(i=0; i<GAME.objSpace.height; i++)
        for(j=0; j<GAME.objSpace.base; j++){
     5d4:	e1a01006 	mov	r1, r6
            GAME.objSpace.bins[i][j].updatedFrameMobsID = GAME.frameID;
     5d8:	e1a02006 	mov	r2, r6
     5dc:	eaffffd7 	b	540 <Space_create+0x70>

000005e0 <MainChar_updateBins>:
            GAME.objSpace.bins[i][j].updatedFrameTersID = GAME.frameID;
            GAME.objSpace.bins[i][j].updatedFrameMainCharsID = GAME.frameID;
        }
}

void MainChar_updateBins(MainChar* ZeroPtr){
     5e0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     5e4:	e1a07000 	mov	r7, r0
    unsigned i,j,k;
    if(ZeroPtr->x+ZeroPtr->spritePtr->b>GAME.objSpace.base || ZeroPtr->x<0 || ZeroPtr->y+ZeroPtr->spritePtr->h>GAME.objSpace.height || ZeroPtr->y<0 )
     5e8:	e5902004 	ldr	r2, [r0, #4]
     5ec:	e590101c 	ldr	r1, [r0, #28]
     5f0:	e5910004 	ldr	r0, [r1, #4]
     5f4:	e0820000 	add	r0, r2, r0
     5f8:	e3063e64 	movw	r3, #28260	; 0x6e64
     5fc:	e3403000 	movt	r3, #0
     600:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
     604:	e1500003 	cmp	r0, r3
     608:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     60c:	e3520000 	cmp	r2, #0
     610:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     614:	e5978008 	ldr	r8, [r7, #8]
     618:	e5912008 	ldr	r2, [r1, #8]
     61c:	e0882002 	add	r2, r8, r2
     620:	e3063e64 	movw	r3, #28260	; 0x6e64
     624:	e3403000 	movt	r3, #0
     628:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     62c:	e1520003 	cmp	r2, r3
     630:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     634:	e3580000 	cmp	r8, #0
     638:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        return;
        
    for(i=ZeroPtr->y; i<ZeroPtr->y+ZeroPtr->spritePtr->h; i++){
     63c:	e1a09008 	mov	r9, r8
     640:	e1520008 	cmp	r2, r8
     644:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     648:	e1a08108 	lsl	r8, r8, #2
        for(j=ZeroPtr->x; j<ZeroPtr->x+ZeroPtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMainCharsID){
     64c:	e3064e64 	movw	r4, #28260	; 0x6e64
     650:	e3404000 	movt	r4, #0
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrMainCharsPtr[k] = ZeroPtr;
                k++;
                if(k<GAME.objSpace.numOfMainCharsInBin)
                    GAME.objSpace.bins[i][j].arrMainCharsPtr[k] = NULL;
     654:	e3a0a000 	mov	r10, #0
            }
            else{
                printf("Space too crowded to add new character. \n");
     658:	e306b4e0 	movw	r11, #25824	; 0x64e0
     65c:	e340b000 	movt	r11, #0
    unsigned i,j,k;
    if(ZeroPtr->x+ZeroPtr->spritePtr->b>GAME.objSpace.base || ZeroPtr->x<0 || ZeroPtr->y+ZeroPtr->spritePtr->h>GAME.objSpace.height || ZeroPtr->y<0 )
        return;
        
    for(i=ZeroPtr->y; i<ZeroPtr->y+ZeroPtr->spritePtr->h; i++){
        for(j=ZeroPtr->x; j<ZeroPtr->x+ZeroPtr->spritePtr->b; j++){
     660:	e5976004 	ldr	r6, [r7, #4]
     664:	e597301c 	ldr	r3, [r7, #28]
     668:	e5933004 	ldr	r3, [r3, #4]
     66c:	e0863003 	add	r3, r6, r3
     670:	e1560003 	cmp	r6, r3
     674:	2a00002b 	bcs	728 <MainChar_updateBins+0x148>
     678:	e0665186 	rsb	r5, r6, r6, lsl #3
     67c:	e1a05185 	lsl	r5, r5, #3
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMainCharsID){
     680:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
     684:	e793c008 	ldr	r12, [r3, r8]
     688:	e08cc005 	add	r12, r12, r5
     68c:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
     690:	e59c3034 	ldr	r3, [r12, #52]	; 0x34
     694:	e1520003 	cmp	r2, r3
        return;
        
    for(i=ZeroPtr->y; i<ZeroPtr->y+ZeroPtr->spritePtr->h; i++){
        for(j=ZeroPtr->x; j<ZeroPtr->x+ZeroPtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
     698:	11a0300a 	movne	r3, r10
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMainCharsID){
     69c:	1a00002b 	bne	750 <MainChar_updateBins+0x170>
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMainCharsInBin; k++){
     6a0:	e59400f4 	ldr	r0, [r4, #244]	; 0xf4
     6a4:	e3500000 	cmp	r0, #0
     6a8:	0a00002f 	beq	76c <MainChar_updateBins+0x18c>
                    if(GAME.objSpace.bins[i][j].arrMainCharsPtr[k] == NULL){
     6ac:	e59c3028 	ldr	r3, [r12, #40]	; 0x28
     6b0:	e3530000 	cmp	r3, #0
     6b4:	0a000024 	beq	74c <MainChar_updateBins+0x16c>
            GAME.objSpace.bins[i][j].updatedFrameTersID = GAME.frameID;
            GAME.objSpace.bins[i][j].updatedFrameMainCharsID = GAME.frameID;
        }
}

void MainChar_updateBins(MainChar* ZeroPtr){
     6b8:	e28c2028 	add	r2, r12, #40	; 0x28
     6bc:	e1a0300a 	mov	r3, r10
     6c0:	ea000002 	b	6d0 <MainChar_updateBins+0xf0>
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMainCharsID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMainCharsInBin; k++){
                    if(GAME.objSpace.bins[i][j].arrMainCharsPtr[k] == NULL){
     6c4:	e5b21004 	ldr	r1, [r2, #4]!
     6c8:	e3510000 	cmp	r1, #0
     6cc:	0a00001f 	beq	750 <MainChar_updateBins+0x170>
        for(j=ZeroPtr->x; j<ZeroPtr->x+ZeroPtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMainCharsID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMainCharsInBin; k++){
     6d0:	e2833001 	add	r3, r3, #1
     6d4:	e1530000 	cmp	r3, r0
     6d8:	1afffff9 	bne	6c4 <MainChar_updateBins+0xe4>
     6dc:	ea000022 	b	76c <MainChar_updateBins+0x18c>
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrMainCharsPtr[k] = ZeroPtr;
                k++;
                if(k<GAME.objSpace.numOfMainCharsInBin)
                    GAME.objSpace.bins[i][j].arrMainCharsPtr[k] = NULL;
     6e0:	e59420e0 	ldr	r2, [r4, #224]	; 0xe0
     6e4:	e7922008 	ldr	r2, [r2, r8]
     6e8:	e283300a 	add	r3, r3, #10
     6ec:	e0823103 	add	r3, r2, r3, lsl #2
     6f0:	e783a005 	str	r10, [r3, r5]
            }
            else{
                printf("Space too crowded to add new character. \n");
            }
            GAME.objSpace.bins[i][j].updatedFrameMainCharsID = GAME.frameID;
     6f4:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
     6f8:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
     6fc:	e7933008 	ldr	r3, [r3, r8]
     700:	e0833005 	add	r3, r3, r5
     704:	e5832034 	str	r2, [r3, #52]	; 0x34
    unsigned i,j,k;
    if(ZeroPtr->x+ZeroPtr->spritePtr->b>GAME.objSpace.base || ZeroPtr->x<0 || ZeroPtr->y+ZeroPtr->spritePtr->h>GAME.objSpace.height || ZeroPtr->y<0 )
        return;
        
    for(i=ZeroPtr->y; i<ZeroPtr->y+ZeroPtr->spritePtr->h; i++){
        for(j=ZeroPtr->x; j<ZeroPtr->x+ZeroPtr->spritePtr->b; j++){
     708:	e2866001 	add	r6, r6, #1
     70c:	e2855038 	add	r5, r5, #56	; 0x38
     710:	e597301c 	ldr	r3, [r7, #28]
     714:	e5972004 	ldr	r2, [r7, #4]
     718:	e5933004 	ldr	r3, [r3, #4]
     71c:	e0823003 	add	r3, r2, r3
     720:	e1530006 	cmp	r3, r6
     724:	8affffd5 	bhi	680 <MainChar_updateBins+0xa0>
void MainChar_updateBins(MainChar* ZeroPtr){
    unsigned i,j,k;
    if(ZeroPtr->x+ZeroPtr->spritePtr->b>GAME.objSpace.base || ZeroPtr->x<0 || ZeroPtr->y+ZeroPtr->spritePtr->h>GAME.objSpace.height || ZeroPtr->y<0 )
        return;
        
    for(i=ZeroPtr->y; i<ZeroPtr->y+ZeroPtr->spritePtr->h; i++){
     728:	e2899001 	add	r9, r9, #1
     72c:	e2888004 	add	r8, r8, #4
     730:	e597301c 	ldr	r3, [r7, #28]
     734:	e5972008 	ldr	r2, [r7, #8]
     738:	e5933008 	ldr	r3, [r3, #8]
     73c:	e0823003 	add	r3, r2, r3
     740:	e1530009 	cmp	r3, r9
     744:	8affffc5 	bhi	660 <MainChar_updateBins+0x80>
     748:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMainCharsID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMainCharsInBin; k++){
                    if(GAME.objSpace.bins[i][j].arrMainCharsPtr[k] == NULL){
     74c:	e1a0300a 	mov	r3, r10
                        break;
                    } 
                }
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrMainCharsPtr[k] = ZeroPtr;
     750:	e283200a 	add	r2, r3, #10
     754:	e78c7102 	str	r7, [r12, r2, lsl #2]
                k++;
     758:	e2833001 	add	r3, r3, #1
                if(k<GAME.objSpace.numOfMainCharsInBin)
     75c:	e59420f4 	ldr	r2, [r4, #244]	; 0xf4
     760:	e1530002 	cmp	r3, r2
     764:	3affffdd 	bcc	6e0 <MainChar_updateBins+0x100>
     768:	eaffffe1 	b	6f4 <MainChar_updateBins+0x114>
                    GAME.objSpace.bins[i][j].arrMainCharsPtr[k] = NULL;
            }
            else{
                printf("Space too crowded to add new character. \n");
     76c:	e1a0000b 	mov	r0, r11
     770:	eb000c50 	bl	38b8 <puts>
     774:	eaffffde 	b	6f4 <MainChar_updateBins+0x114>

00000778 <Mobs_updateBins>:
            GAME.objSpace.bins[i][j].updatedFrameMainCharsID = GAME.frameID;
        }
    }
}

void Mobs_updateBins(Mob* troopPtr){
     778:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     77c:	e1a07000 	mov	r7, r0
    unsigned i,j,k;
    if(troopPtr->x+troopPtr->spritePtr->b>GAME.objSpace.base || troopPtr->x<0 || troopPtr->y+troopPtr->spritePtr->h>GAME.objSpace.height || troopPtr->y<0 )
     780:	e5902008 	ldr	r2, [r0, #8]
     784:	e5901024 	ldr	r1, [r0, #36]	; 0x24
     788:	e5910004 	ldr	r0, [r1, #4]
     78c:	e0820000 	add	r0, r2, r0
     790:	e3063e64 	movw	r3, #28260	; 0x6e64
     794:	e3403000 	movt	r3, #0
     798:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
     79c:	e1500003 	cmp	r0, r3
     7a0:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     7a4:	e3520000 	cmp	r2, #0
     7a8:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     7ac:	e597800c 	ldr	r8, [r7, #12]
     7b0:	e5912008 	ldr	r2, [r1, #8]
     7b4:	e0882002 	add	r2, r8, r2
     7b8:	e3063e64 	movw	r3, #28260	; 0x6e64
     7bc:	e3403000 	movt	r3, #0
     7c0:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     7c4:	e1520003 	cmp	r2, r3
     7c8:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     7cc:	e3580000 	cmp	r8, #0
     7d0:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        return;
        
    for(i=troopPtr->y; i<troopPtr->y+troopPtr->spritePtr->h; i++){
     7d4:	e1a09008 	mov	r9, r8
     7d8:	e1520008 	cmp	r2, r8
     7dc:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     7e0:	e1a08108 	lsl	r8, r8, #2
        for(j=troopPtr->x; j<troopPtr->x+troopPtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMobsID){
     7e4:	e3064e64 	movw	r4, #28260	; 0x6e64
     7e8:	e3404000 	movt	r4, #0
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrMobsPtr[k] = troopPtr;
                k++;
                if(k<GAME.objSpace.numOfMobsInBin)
                    GAME.objSpace.bins[i][j].arrMobsPtr[k] = NULL;
     7ec:	e3a0a000 	mov	r10, #0
            }
            else{
                printf("Space too crowded to add new mob. \n");
     7f0:	e306b50c 	movw	r11, #25868	; 0x650c
     7f4:	e340b000 	movt	r11, #0
    unsigned i,j,k;
    if(troopPtr->x+troopPtr->spritePtr->b>GAME.objSpace.base || troopPtr->x<0 || troopPtr->y+troopPtr->spritePtr->h>GAME.objSpace.height || troopPtr->y<0 )
        return;
        
    for(i=troopPtr->y; i<troopPtr->y+troopPtr->spritePtr->h; i++){
        for(j=troopPtr->x; j<troopPtr->x+troopPtr->spritePtr->b; j++){
     7f8:	e5976008 	ldr	r6, [r7, #8]
     7fc:	e5973024 	ldr	r3, [r7, #36]	; 0x24
     800:	e5933004 	ldr	r3, [r3, #4]
     804:	e0863003 	add	r3, r6, r3
     808:	e1560003 	cmp	r6, r3
     80c:	2a00002a 	bcs	8bc <Mobs_updateBins+0x144>
     810:	e0665186 	rsb	r5, r6, r6, lsl #3
     814:	e1a05185 	lsl	r5, r5, #3
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMobsID){
     818:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
     81c:	e793c008 	ldr	r12, [r3, r8]
     820:	e08cc005 	add	r12, r12, r5
     824:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
     828:	e59c302c 	ldr	r3, [r12, #44]	; 0x2c
     82c:	e1520003 	cmp	r2, r3
        return;
        
    for(i=troopPtr->y; i<troopPtr->y+troopPtr->spritePtr->h; i++){
        for(j=troopPtr->x; j<troopPtr->x+troopPtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
     830:	11a0300a 	movne	r3, r10
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMobsID){
     834:	1a00002a 	bne	8e4 <Mobs_updateBins+0x16c>
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMobsInBin; k++){
     838:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
     83c:	e3500000 	cmp	r0, #0
     840:	0a00002d 	beq	8fc <Mobs_updateBins+0x184>
                    if(GAME.objSpace.bins[i][j].arrMobsPtr[k] == NULL){
     844:	e59c3000 	ldr	r3, [r12]
     848:	e3530000 	cmp	r3, #0
     84c:	0a000023 	beq	8e0 <Mobs_updateBins+0x168>
     850:	e1a0200c 	mov	r2, r12
     854:	e1a0300a 	mov	r3, r10
     858:	ea000002 	b	868 <Mobs_updateBins+0xf0>
     85c:	e5b21004 	ldr	r1, [r2, #4]!
     860:	e3510000 	cmp	r1, #0
     864:	0a00001e 	beq	8e4 <Mobs_updateBins+0x16c>
        for(j=troopPtr->x; j<troopPtr->x+troopPtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMobsID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMobsInBin; k++){
     868:	e2833001 	add	r3, r3, #1
     86c:	e1530000 	cmp	r3, r0
     870:	1afffff9 	bne	85c <Mobs_updateBins+0xe4>
     874:	ea000020 	b	8fc <Mobs_updateBins+0x184>
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrMobsPtr[k] = troopPtr;
                k++;
                if(k<GAME.objSpace.numOfMobsInBin)
                    GAME.objSpace.bins[i][j].arrMobsPtr[k] = NULL;
     878:	e59420e0 	ldr	r2, [r4, #224]	; 0xe0
     87c:	e7922008 	ldr	r2, [r2, r8]
     880:	e0823103 	add	r3, r2, r3, lsl #2
     884:	e783a005 	str	r10, [r3, r5]
            }
            else{
                printf("Space too crowded to add new mob. \n");
            }
            GAME.objSpace.bins[i][j].updatedFrameMobsID = GAME.frameID;
     888:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
     88c:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
     890:	e7933008 	ldr	r3, [r3, r8]
     894:	e0833005 	add	r3, r3, r5
     898:	e583202c 	str	r2, [r3, #44]	; 0x2c
    unsigned i,j,k;
    if(troopPtr->x+troopPtr->spritePtr->b>GAME.objSpace.base || troopPtr->x<0 || troopPtr->y+troopPtr->spritePtr->h>GAME.objSpace.height || troopPtr->y<0 )
        return;
        
    for(i=troopPtr->y; i<troopPtr->y+troopPtr->spritePtr->h; i++){
        for(j=troopPtr->x; j<troopPtr->x+troopPtr->spritePtr->b; j++){
     89c:	e2866001 	add	r6, r6, #1
     8a0:	e2855038 	add	r5, r5, #56	; 0x38
     8a4:	e5973024 	ldr	r3, [r7, #36]	; 0x24
     8a8:	e5972008 	ldr	r2, [r7, #8]
     8ac:	e5933004 	ldr	r3, [r3, #4]
     8b0:	e0823003 	add	r3, r2, r3
     8b4:	e1530006 	cmp	r3, r6
     8b8:	8affffd6 	bhi	818 <Mobs_updateBins+0xa0>
void Mobs_updateBins(Mob* troopPtr){
    unsigned i,j,k;
    if(troopPtr->x+troopPtr->spritePtr->b>GAME.objSpace.base || troopPtr->x<0 || troopPtr->y+troopPtr->spritePtr->h>GAME.objSpace.height || troopPtr->y<0 )
        return;
        
    for(i=troopPtr->y; i<troopPtr->y+troopPtr->spritePtr->h; i++){
     8bc:	e2899001 	add	r9, r9, #1
     8c0:	e2888004 	add	r8, r8, #4
     8c4:	e5973024 	ldr	r3, [r7, #36]	; 0x24
     8c8:	e597200c 	ldr	r2, [r7, #12]
     8cc:	e5933008 	ldr	r3, [r3, #8]
     8d0:	e0823003 	add	r3, r2, r3
     8d4:	e1530009 	cmp	r3, r9
     8d8:	8affffc6 	bhi	7f8 <Mobs_updateBins+0x80>
     8dc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameMobsID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfMobsInBin; k++){
                    if(GAME.objSpace.bins[i][j].arrMobsPtr[k] == NULL){
     8e0:	e1a0300a 	mov	r3, r10
                        break;
                    } 
                }
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrMobsPtr[k] = troopPtr;
     8e4:	e78c7103 	str	r7, [r12, r3, lsl #2]
                k++;
     8e8:	e2833001 	add	r3, r3, #1
                if(k<GAME.objSpace.numOfMobsInBin)
     8ec:	e59420ec 	ldr	r2, [r4, #236]	; 0xec
     8f0:	e1530002 	cmp	r3, r2
     8f4:	3affffdf 	bcc	878 <Mobs_updateBins+0x100>
     8f8:	eaffffe2 	b	888 <Mobs_updateBins+0x110>
                    GAME.objSpace.bins[i][j].arrMobsPtr[k] = NULL;
            }
            else{
                printf("Space too crowded to add new mob. \n");
     8fc:	e1a0000b 	mov	r0, r11
     900:	eb000bec 	bl	38b8 <puts>
     904:	eaffffdf 	b	888 <Mobs_updateBins+0x110>

00000908 <Terrain_updateBins>:
        }
    }
    
}

void Terrain_updateBins(Terrain* skulePtr){
     908:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     90c:	e1a07000 	mov	r7, r0
    unsigned i,j,k;
    if(skulePtr->x+skulePtr->spritePtr->b>GAME.objSpace.base || skulePtr->x<0 || skulePtr->y+skulePtr->spritePtr->h>GAME.objSpace.height || skulePtr->y<0 )
     910:	e5902008 	ldr	r2, [r0, #8]
     914:	e5901010 	ldr	r1, [r0, #16]
     918:	e5910004 	ldr	r0, [r1, #4]
     91c:	e0820000 	add	r0, r2, r0
     920:	e3063e64 	movw	r3, #28260	; 0x6e64
     924:	e3403000 	movt	r3, #0
     928:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
     92c:	e1500003 	cmp	r0, r3
     930:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     934:	e3520000 	cmp	r2, #0
     938:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     93c:	e597800c 	ldr	r8, [r7, #12]
     940:	e5912008 	ldr	r2, [r1, #8]
     944:	e0882002 	add	r2, r8, r2
     948:	e3063e64 	movw	r3, #28260	; 0x6e64
     94c:	e3403000 	movt	r3, #0
     950:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     954:	e1520003 	cmp	r2, r3
     958:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     95c:	e3580000 	cmp	r8, #0
     960:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        return;
        
    for(i=skulePtr->y; i<skulePtr->y+skulePtr->spritePtr->h; i++){
     964:	e1a09008 	mov	r9, r8
     968:	e1520008 	cmp	r2, r8
     96c:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     970:	e1a08108 	lsl	r8, r8, #2
        for(j=skulePtr->x; j<skulePtr->x+skulePtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameTersID){
     974:	e3064e64 	movw	r4, #28260	; 0x6e64
     978:	e3404000 	movt	r4, #0
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrTersPtr[k] = skulePtr;
                k++;
                if(k<GAME.objSpace.numOfTersInBin)
                    GAME.objSpace.bins[i][j].arrTersPtr[k] = NULL;
     97c:	e3a0a000 	mov	r10, #0
            }
            else{
                printf("Space too crowded to add new terrain. \n");
     980:	e306b530 	movw	r11, #25904	; 0x6530
     984:	e340b000 	movt	r11, #0
    unsigned i,j,k;
    if(skulePtr->x+skulePtr->spritePtr->b>GAME.objSpace.base || skulePtr->x<0 || skulePtr->y+skulePtr->spritePtr->h>GAME.objSpace.height || skulePtr->y<0 )
        return;
        
    for(i=skulePtr->y; i<skulePtr->y+skulePtr->spritePtr->h; i++){
        for(j=skulePtr->x; j<skulePtr->x+skulePtr->spritePtr->b; j++){
     988:	e5976008 	ldr	r6, [r7, #8]
     98c:	e5973010 	ldr	r3, [r7, #16]
     990:	e5933004 	ldr	r3, [r3, #4]
     994:	e0863003 	add	r3, r6, r3
     998:	e1560003 	cmp	r6, r3
     99c:	2a00002d 	bcs	a58 <Terrain_updateBins+0x150>
     9a0:	e0665186 	rsb	r5, r6, r6, lsl #3
     9a4:	e1a05185 	lsl	r5, r5, #3
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameTersID){
     9a8:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
     9ac:	e793c008 	ldr	r12, [r3, r8]
     9b0:	e08cc005 	add	r12, r12, r5
     9b4:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
     9b8:	e59c3030 	ldr	r3, [r12, #48]	; 0x30
     9bc:	e1520003 	cmp	r2, r3
        return;
        
    for(i=skulePtr->y; i<skulePtr->y+skulePtr->spritePtr->h; i++){
        for(j=skulePtr->x; j<skulePtr->x+skulePtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
     9c0:	11a0300a 	movne	r3, r10
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameTersID){
     9c4:	1a00002d 	bne	a80 <Terrain_updateBins+0x178>
                foundSpot = false;
                for(; k<GAME.objSpace.numOfTersInBin; k++){
     9c8:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
     9cc:	e3500000 	cmp	r0, #0
     9d0:	0a000031 	beq	a9c <Terrain_updateBins+0x194>
                    if(GAME.objSpace.bins[i][j].arrTersPtr[k] == NULL){
     9d4:	e59c3014 	ldr	r3, [r12, #20]
     9d8:	e3530000 	cmp	r3, #0
     9dc:	0a000026 	beq	a7c <Terrain_updateBins+0x174>
     9e0:	e1a0200c 	mov	r2, r12
     9e4:	e1a0300a 	mov	r3, r10
     9e8:	ea000003 	b	9fc <Terrain_updateBins+0xf4>
     9ec:	e2822004 	add	r2, r2, #4
     9f0:	e5921014 	ldr	r1, [r2, #20]
     9f4:	e3510000 	cmp	r1, #0
     9f8:	0a000020 	beq	a80 <Terrain_updateBins+0x178>
        for(j=skulePtr->x; j<skulePtr->x+skulePtr->spritePtr->b; j++){
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameTersID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfTersInBin; k++){
     9fc:	e2833001 	add	r3, r3, #1
     a00:	e1530000 	cmp	r3, r0
     a04:	1afffff8 	bne	9ec <Terrain_updateBins+0xe4>
     a08:	ea000023 	b	a9c <Terrain_updateBins+0x194>
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrTersPtr[k] = skulePtr;
                k++;
                if(k<GAME.objSpace.numOfTersInBin)
                    GAME.objSpace.bins[i][j].arrTersPtr[k] = NULL;
     a0c:	e59420e0 	ldr	r2, [r4, #224]	; 0xe0
     a10:	e7922008 	ldr	r2, [r2, r8]
     a14:	e2833004 	add	r3, r3, #4
     a18:	e0822005 	add	r2, r2, r5
     a1c:	e2822004 	add	r2, r2, #4
     a20:	e782a103 	str	r10, [r2, r3, lsl #2]
            }
            else{
                printf("Space too crowded to add new terrain. \n");
            }
            GAME.objSpace.bins[i][j].updatedFrameTersID = GAME.frameID;
     a24:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
     a28:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
     a2c:	e7933008 	ldr	r3, [r3, r8]
     a30:	e0833005 	add	r3, r3, r5
     a34:	e5832030 	str	r2, [r3, #48]	; 0x30
    unsigned i,j,k;
    if(skulePtr->x+skulePtr->spritePtr->b>GAME.objSpace.base || skulePtr->x<0 || skulePtr->y+skulePtr->spritePtr->h>GAME.objSpace.height || skulePtr->y<0 )
        return;
        
    for(i=skulePtr->y; i<skulePtr->y+skulePtr->spritePtr->h; i++){
        for(j=skulePtr->x; j<skulePtr->x+skulePtr->spritePtr->b; j++){
     a38:	e2866001 	add	r6, r6, #1
     a3c:	e2855038 	add	r5, r5, #56	; 0x38
     a40:	e5973010 	ldr	r3, [r7, #16]
     a44:	e5972008 	ldr	r2, [r7, #8]
     a48:	e5933004 	ldr	r3, [r3, #4]
     a4c:	e0823003 	add	r3, r2, r3
     a50:	e1530006 	cmp	r3, r6
     a54:	8affffd3 	bhi	9a8 <Terrain_updateBins+0xa0>
void Terrain_updateBins(Terrain* skulePtr){
    unsigned i,j,k;
    if(skulePtr->x+skulePtr->spritePtr->b>GAME.objSpace.base || skulePtr->x<0 || skulePtr->y+skulePtr->spritePtr->h>GAME.objSpace.height || skulePtr->y<0 )
        return;
        
    for(i=skulePtr->y; i<skulePtr->y+skulePtr->spritePtr->h; i++){
     a58:	e2899001 	add	r9, r9, #1
     a5c:	e2888004 	add	r8, r8, #4
     a60:	e5973010 	ldr	r3, [r7, #16]
     a64:	e597200c 	ldr	r2, [r7, #12]
     a68:	e5933008 	ldr	r3, [r3, #8]
     a6c:	e0823003 	add	r3, r2, r3
     a70:	e1530009 	cmp	r3, r9
     a74:	8affffc3 	bhi	988 <Terrain_updateBins+0x80>
     a78:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
            bool foundSpot = true;
            k=0;
            if(GAME.frameID == GAME.objSpace.bins[i][j].updatedFrameTersID){
                foundSpot = false;
                for(; k<GAME.objSpace.numOfTersInBin; k++){
                    if(GAME.objSpace.bins[i][j].arrTersPtr[k] == NULL){
     a7c:	e1a0300a 	mov	r3, r10
                        break;
                    } 
                }
            }
            if(foundSpot){
                GAME.objSpace.bins[i][j].arrTersPtr[k] = skulePtr;
     a80:	e08cc103 	add	r12, r12, r3, lsl #2
     a84:	e58c7014 	str	r7, [r12, #20]
                k++;
     a88:	e2833001 	add	r3, r3, #1
                if(k<GAME.objSpace.numOfTersInBin)
     a8c:	e59420f0 	ldr	r2, [r4, #240]	; 0xf0
     a90:	e1530002 	cmp	r3, r2
     a94:	3affffdc 	bcc	a0c <Terrain_updateBins+0x104>
     a98:	eaffffe1 	b	a24 <Terrain_updateBins+0x11c>
                    GAME.objSpace.bins[i][j].arrTersPtr[k] = NULL;
            }
            else{
                printf("Space too crowded to add new terrain. \n");
     a9c:	e1a0000b 	mov	r0, r11
     aa0:	eb000b84 	bl	38b8 <puts>
     aa4:	eaffffde 	b	a24 <Terrain_updateBins+0x11c>

00000aa8 <Main_grounded>:
        }
    }
    
}

void Main_grounded(MainChar* ZeroPtr){
     aa8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    int i, j;
    for(i=ZeroPtr->x; i<ZeroPtr->x+ZeroPtr->spritePtr->b; i++){
     aac:	e5906004 	ldr	r6, [r0, #4]
     ab0:	e590301c 	ldr	r3, [r0, #28]
     ab4:	e5932004 	ldr	r2, [r3, #4]
     ab8:	e0862002 	add	r2, r6, r2
     abc:	e1560002 	cmp	r6, r2
     ac0:	aa000023 	bge	b54 <Main_grounded+0xac>
        if(GAME.frameID == GAME.objSpace.bins[ZeroPtr->y+ZeroPtr->spritePtr->h][i].updatedFrameTersID){
     ac4:	e5907008 	ldr	r7, [r0, #8]
     ac8:	e0662186 	rsb	r2, r6, r6, lsl #3
     acc:	e1a02182 	lsl	r2, r2, #3
    
}

void Main_grounded(MainChar* ZeroPtr){
    int i, j;
    for(i=ZeroPtr->x; i<ZeroPtr->x+ZeroPtr->spritePtr->b; i++){
     ad0:	e1a01006 	mov	r1, r6
        if(GAME.frameID == GAME.objSpace.bins[ZeroPtr->y+ZeroPtr->spritePtr->h][i].updatedFrameTersID){
     ad4:	e306ce64 	movw	r12, #28260	; 0x6e64
     ad8:	e340c000 	movt	r12, #0
                if(GAME.objSpace.bins[ZeroPtr->y+ZeroPtr->spritePtr->h][i].arrMainCharsPtr[j] != NULL){
                    ZeroPtr->grounded = true;
                    break;
                }
                else{
                    ZeroPtr->grounded = false;
     adc:	e3a08000 	mov	r8, #0
}

void Main_grounded(MainChar* ZeroPtr){
    int i, j;
    for(i=ZeroPtr->x; i<ZeroPtr->x+ZeroPtr->spritePtr->b; i++){
        if(GAME.frameID == GAME.objSpace.bins[ZeroPtr->y+ZeroPtr->spritePtr->h][i].updatedFrameTersID){
     ae0:	e5934008 	ldr	r4, [r3, #8]
     ae4:	e0874004 	add	r4, r7, r4
     ae8:	e59c30e0 	ldr	r3, [r12, #224]	; 0xe0
     aec:	e7933104 	ldr	r3, [r3, r4, lsl #2]
     af0:	e0833002 	add	r3, r3, r2
     af4:	e59c50f8 	ldr	r5, [r12, #248]	; 0xf8
     af8:	e5934030 	ldr	r4, [r3, #48]	; 0x30
     afc:	e1550004 	cmp	r5, r4
     b00:	1a000009 	bne	b2c <Main_grounded+0x84>
            for(j = 0; j<GAME.objSpace.numOfMainCharsInBin; j++){
     b04:	e59c40f4 	ldr	r4, [r12, #244]	; 0xf4
     b08:	e3540000 	cmp	r4, #0
     b0c:	0a000006 	beq	b2c <Main_grounded+0x84>
                if(GAME.objSpace.bins[ZeroPtr->y+ZeroPtr->spritePtr->h][i].arrMainCharsPtr[j] != NULL){
     b10:	e5933028 	ldr	r3, [r3, #40]	; 0x28
     b14:	e3530000 	cmp	r3, #0
                    ZeroPtr->grounded = true;
     b18:	13a03001 	movne	r3, #1
     b1c:	15c03018 	strbne	r3, [r0, #24]
     b20:	1a00000b 	bne	b54 <Main_grounded+0xac>
                    break;
                }
                else{
                    ZeroPtr->grounded = false;
     b24:	e5c08018 	strb	r8, [r0, #24]
     b28:	ea000002 	b	b38 <Main_grounded+0x90>
                    break;
                }
            }
        }
        if (ZeroPtr->grounded == true) break;
     b2c:	e5d03018 	ldrb	r3, [r0, #24]
     b30:	e3530000 	cmp	r3, #0
     b34:	1a000006 	bne	b54 <Main_grounded+0xac>
    
}

void Main_grounded(MainChar* ZeroPtr){
    int i, j;
    for(i=ZeroPtr->x; i<ZeroPtr->x+ZeroPtr->spritePtr->b; i++){
     b38:	e2811001 	add	r1, r1, #1
     b3c:	e590301c 	ldr	r3, [r0, #28]
     b40:	e2822038 	add	r2, r2, #56	; 0x38
     b44:	e5934004 	ldr	r4, [r3, #4]
     b48:	e0864004 	add	r4, r6, r4
     b4c:	e1540001 	cmp	r4, r1
     b50:	caffffe2 	bgt	ae0 <Main_grounded+0x38>
                }
            }
        }
        if (ZeroPtr->grounded == true) break;
    }
}
     b54:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     b58:	e12fff1e 	bx	lr

00000b5c <Mob_grounded>:

void Mob_grounded(Mob* troopPtr){
     b5c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    int i, j;
    for(i=troopPtr->x; i<troopPtr->x+troopPtr->spritePtr->b; i++){
     b60:	e5906008 	ldr	r6, [r0, #8]
     b64:	e5903024 	ldr	r3, [r0, #36]	; 0x24
     b68:	e5932004 	ldr	r2, [r3, #4]
     b6c:	e0862002 	add	r2, r6, r2
     b70:	e1560002 	cmp	r6, r2
     b74:	aa000023 	bge	c08 <Mob_grounded+0xac>
        if(GAME.frameID == GAME.objSpace.bins[troopPtr->y+troopPtr->spritePtr->h][i].updatedFrameTersID){
     b78:	e590700c 	ldr	r7, [r0, #12]
     b7c:	e0662186 	rsb	r2, r6, r6, lsl #3
     b80:	e1a02182 	lsl	r2, r2, #3
    }
}

void Mob_grounded(Mob* troopPtr){
    int i, j;
    for(i=troopPtr->x; i<troopPtr->x+troopPtr->spritePtr->b; i++){
     b84:	e1a01006 	mov	r1, r6
        if(GAME.frameID == GAME.objSpace.bins[troopPtr->y+troopPtr->spritePtr->h][i].updatedFrameTersID){
     b88:	e306ce64 	movw	r12, #28260	; 0x6e64
     b8c:	e340c000 	movt	r12, #0
                if(GAME.objSpace.bins[troopPtr->y+troopPtr->spritePtr->h][i].arrMobsPtr[j] != NULL){
                    troopPtr->grounded = true;
                    break;
                }
                else{
                    troopPtr->grounded = false;
     b90:	e3a08000 	mov	r8, #0
}

void Mob_grounded(Mob* troopPtr){
    int i, j;
    for(i=troopPtr->x; i<troopPtr->x+troopPtr->spritePtr->b; i++){
        if(GAME.frameID == GAME.objSpace.bins[troopPtr->y+troopPtr->spritePtr->h][i].updatedFrameTersID){
     b94:	e5934008 	ldr	r4, [r3, #8]
     b98:	e0874004 	add	r4, r7, r4
     b9c:	e59c30e0 	ldr	r3, [r12, #224]	; 0xe0
     ba0:	e7933104 	ldr	r3, [r3, r4, lsl #2]
     ba4:	e0833002 	add	r3, r3, r2
     ba8:	e59c50f8 	ldr	r5, [r12, #248]	; 0xf8
     bac:	e5934030 	ldr	r4, [r3, #48]	; 0x30
     bb0:	e1550004 	cmp	r5, r4
     bb4:	1a000009 	bne	be0 <Mob_grounded+0x84>
            for(j = 0; j<GAME.objSpace.numOfMobsInBin; j++){
     bb8:	e59c40ec 	ldr	r4, [r12, #236]	; 0xec
     bbc:	e3540000 	cmp	r4, #0
     bc0:	0a000006 	beq	be0 <Mob_grounded+0x84>
                if(GAME.objSpace.bins[troopPtr->y+troopPtr->spritePtr->h][i].arrMobsPtr[j] != NULL){
     bc4:	e5933000 	ldr	r3, [r3]
     bc8:	e3530000 	cmp	r3, #0
                    troopPtr->grounded = true;
     bcc:	13a03001 	movne	r3, #1
     bd0:	15c03018 	strbne	r3, [r0, #24]
     bd4:	1a00000b 	bne	c08 <Mob_grounded+0xac>
                    break;
                }
                else{
                    troopPtr->grounded = false;
     bd8:	e5c08018 	strb	r8, [r0, #24]
     bdc:	ea000002 	b	bec <Mob_grounded+0x90>
                    break;
                }
            }
        }
        if (troopPtr->grounded == true) break;
     be0:	e5d03018 	ldrb	r3, [r0, #24]
     be4:	e3530000 	cmp	r3, #0
     be8:	1a000006 	bne	c08 <Mob_grounded+0xac>
    }
}

void Mob_grounded(Mob* troopPtr){
    int i, j;
    for(i=troopPtr->x; i<troopPtr->x+troopPtr->spritePtr->b; i++){
     bec:	e2811001 	add	r1, r1, #1
     bf0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
     bf4:	e2822038 	add	r2, r2, #56	; 0x38
     bf8:	e5934004 	ldr	r4, [r3, #4]
     bfc:	e0864004 	add	r4, r6, r4
     c00:	e1540001 	cmp	r4, r1
     c04:	caffffe2 	bgt	b94 <Mob_grounded+0x38>
                }
            }
        }
        if (troopPtr->grounded == true) break;
    }
}
     c08:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     c0c:	e12fff1e 	bx	lr

00000c10 <MainChar_move>:

void MainChar_move(MainChar* ZeroPtr){
     c10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     c14:	e24dd044 	sub	sp, sp, #68	; 0x44
     c18:	e58d0020 	str	r0, [sp, #32]
    Main_grounded(ZeroPtr);
     c1c:	ebffffa1 	bl	aa8 <Main_grounded>
    if (!ZeroPtr->grounded) ZeroPtr->dy += 2;
     c20:	e59d9020 	ldr	r9, [sp, #32]
     c24:	e5d93018 	ldrb	r3, [r9, #24]
     c28:	e3530000 	cmp	r3, #0
     c2c:	05993010 	ldreq	r3, [r9, #16]
     c30:	02833002 	addeq	r3, r3, #2
     c34:	05893010 	streq	r3, [r9, #16]
    int i,j;
    int mainDx = ZeroPtr->dx;
     c38:	e59d9020 	ldr	r9, [sp, #32]
     c3c:	e599a00c 	ldr	r10, [r9, #12]
    int mainDy = ZeroPtr->dy;
     c40:	e5999010 	ldr	r9, [r9, #16]
     c44:	e58d9018 	str	r9, [sp, #24]
    int endY = ZeroPtr->y + mainDy; 
     c48:	e59d9020 	ldr	r9, [sp, #32]
     c4c:	e5992008 	ldr	r2, [r9, #8]
     c50:	e59d9018 	ldr	r9, [sp, #24]
     c54:	e0823009 	add	r3, r2, r9
     c58:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    int endX = ZeroPtr->x + mainDx;
     c5c:	e59d9020 	ldr	r9, [sp, #32]
     c60:	e5993004 	ldr	r3, [r9, #4]
     c64:	e083100a 	add	r1, r3, r10
     c68:	e58d1038 	str	r1, [sp, #56]	; 0x38
    int startY = ZeroPtr->y; 
     c6c:	e58d2034 	str	r2, [sp, #52]	; 0x34
    int startX = ZeroPtr->x;
     c70:	e58d3030 	str	r3, [sp, #48]	; 0x30
    int size = abs(mainDy)+1;
     c74:	e59d2018 	ldr	r2, [sp, #24]
     c78:	e3520000 	cmp	r2, #0
     c7c:	b2622000 	rsblt	r2, r2, #0

    if (abs(mainDx) > abs(mainDy)){
     c80:	e02a3fca 	eor	r3, r10, r10, asr #31
     c84:	e0433fca 	sub	r3, r3, r10, asr #31
     c88:	e1520003 	cmp	r2, r3
    int mainDy = ZeroPtr->dy;
    int endY = ZeroPtr->y + mainDy; 
    int endX = ZeroPtr->x + mainDx;
    int startY = ZeroPtr->y; 
    int startX = ZeroPtr->x;
    int size = abs(mainDy)+1;
     c8c:	a2822001 	addge	r2, r2, #1
     c90:	a58d2024 	strge	r2, [sp, #36]	; 0x24

    if (abs(mainDx) > abs(mainDy)){
        size = abs(mainDx)+1;
     c94:	b2833001 	addlt	r3, r3, #1
     c98:	b58d3024 	strlt	r3, [sp, #36]	; 0x24
    }
    Point * nextPointValues = (Point *)malloc(size * sizeof(Point));
     c9c:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
     ca0:	e1a00189 	lsl	r0, r9, #3
     ca4:	eb000901 	bl	30b0 <malloc>
     ca8:	e58d002c 	str	r0, [sp, #44]	; 0x2c

    bool is_steep = abs(endY-startY) > abs(endX-startX);
     cac:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
     cb0:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
     cb4:	e0634004 	rsb	r4, r3, r4
     cb8:	e3540000 	cmp	r4, #0
     cbc:	b2644000 	rsblt	r4, r4, #0
     cc0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
     cc4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
     cc8:	e0633002 	rsb	r3, r3, r2
     ccc:	e3530000 	cmp	r3, #0
     cd0:	b2633000 	rsblt	r3, r3, #0
     cd4:	e1540003 	cmp	r4, r3
     cd8:	d3a04000 	movle	r4, #0
     cdc:	c3a04001 	movgt	r4, #1
    if (is_steep){
     ce0:	e3540000 	cmp	r4, #0
     ce4:	0a000005 	beq	d00 <MainChar_move+0xf0>
        swap (&startX, &startY);
     ce8:	e28d0030 	add	r0, sp, #48	; 0x30
     cec:	e28d1034 	add	r1, sp, #52	; 0x34
     cf0:	eb0007f1 	bl	2cbc <swap>
        swap (&endX, &endY);
     cf4:	e28d0038 	add	r0, sp, #56	; 0x38
     cf8:	e28d103c 	add	r1, sp, #60	; 0x3c
     cfc:	eb0007ee 	bl	2cbc <swap>
    }
    if (endX<startX){
     d00:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
     d04:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
     d08:	e1520003 	cmp	r2, r3
     d0c:	aa000005 	bge	d28 <MainChar_move+0x118>
        swap (&startX, &endX);
     d10:	e28d0030 	add	r0, sp, #48	; 0x30
     d14:	e28d1038 	add	r1, sp, #56	; 0x38
     d18:	eb0007e7 	bl	2cbc <swap>
        swap (&startY, &endY);
     d1c:	e28d0034 	add	r0, sp, #52	; 0x34
     d20:	e28d103c 	add	r1, sp, #60	; 0x3c
     d24:	eb0007e4 	bl	2cbc <swap>
    }
    
    int dx = endX-startX;
     d28:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
     d2c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
     d30:	e0627006 	rsb	r7, r2, r6
    int dy = abs(endY-startY);
     d34:	e59dc03c 	ldr	r12, [sp, #60]	; 0x3c
     d38:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
     d3c:	e061000c 	rsb	r0, r1, r12
     d40:	e3500000 	cmp	r0, #0
     d44:	b2600000 	rsblt	r0, r0, #0
    int error = -dx/2;
     d48:	e2673000 	rsb	r3, r7, #0
     d4c:	e0833fa3 	add	r3, r3, r3, lsr #31
     d50:	e1a030c3 	asr	r3, r3, #1
    int x;
    int y = startY;
    int y_step;
    if (startY < endY){
        y_step = 1;
     d54:	e15c0001 	cmp	r12, r1
     d58:	d3e08000 	mvnle	r8, #0
     d5c:	c3a08001 	movgt	r8, #1
    }
    else y_step = -1;

    int arrayInc = 0;
    for (x = startX; x <= endX; x++){
     d60:	e1560002 	cmp	r6, r2
     d64:	ba00000e 	blt	da4 <MainChar_move+0x194>
     d68:	e3a0c000 	mov	r12, #0
     d6c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
        if (is_steep){
     d70:	e3540000 	cmp	r4, #0
            nextPointValues[arrayInc].x = y;
     d74:	e1a05009 	mov	r5, r9
     d78:	17a5100c 	strne	r1, [r5, r12]!
            nextPointValues[arrayInc].y = x;
     d7c:	15852004 	strne	r2, [r5, #4]
        }
        else{
             nextPointValues[arrayInc].x = x;
     d80:	07a5200c 	streq	r2, [r5, r12]!
            nextPointValues[arrayInc].y = y;
     d84:	05851004 	streq	r1, [r5, #4]
        }
        error += dy;
        if (error >= 0){
     d88:	e0933000 	adds	r3, r3, r0
            y += y_step;
     d8c:	50811008 	addpl	r1, r1, r8
            error -= dx;
     d90:	50673003 	rsbpl	r3, r7, r3
        y_step = 1;
    }
    else y_step = -1;

    int arrayInc = 0;
    for (x = startX; x <= endX; x++){
     d94:	e2822001 	add	r2, r2, #1
     d98:	e28cc008 	add	r12, r12, #8
     d9c:	e1560002 	cmp	r6, r2
     da0:	aafffff2 	bge	d70 <MainChar_move+0x160>
    int locationTer = 0;
    int locationMob = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
     da4:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
     da8:	e3590000 	cmp	r9, #0
     dac:	da000191 	ble	13f8 <MainChar_move+0x7e8>
        int constantX = nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b;
     db0:	e59dc020 	ldr	r12, [sp, #32]
     db4:	e59cc01c 	ldr	r12, [r12, #28]
     db8:	e58dc01c 	str	r12, [sp, #28]
     dbc:	e59c0004 	ldr	r0, [r12, #4]
     dc0:	e58d0028 	str	r0, [sp, #40]	; 0x28
        }
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h;
        }
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b ; i++){
            if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameTersID){
     dc4:	e3063e64 	movw	r3, #28260	; 0x6e64
     dc8:	e3403000 	movt	r3, #0
     dcc:	e59320f8 	ldr	r2, [r3, #248]	; 0xf8
     dd0:	e59310e0 	ldr	r1, [r3, #224]	; 0xe0
     dd4:	e58d100c 	str	r1, [sp, #12]
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
     dd8:	e59350f0 	ldr	r5, [r3, #240]	; 0xf0
                        break;
                    }
                }
            }
           if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameMobsID){
                for(j=0; j<GAME.objSpace.numOfMobsInBin; j++){
     ddc:	e59340ec 	ldr	r4, [r3, #236]	; 0xec
     de0:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
     de4:	e3a03000 	mov	r3, #0
     de8:	e58d3008 	str	r3, [sp, #8]
     dec:	e58d3014 	str	r3, [sp, #20]
     df0:	e1a07003 	mov	r7, r3
     df4:	e1a08003 	mov	r8, r3
     df8:	e58d3010 	str	r3, [sp, #16]
     dfc:	e58d3004 	str	r3, [sp, #4]
    int locationMob = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
        int constantX = nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b;
     e00:	e5963000 	ldr	r3, [r6]
     e04:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
     e08:	e0830009 	add	r0, r3, r9
        int constantY = nextPointValues[arrayInc].y;
     e0c:	e5961004 	ldr	r1, [r6, #4]
    int locationMob = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
        int constantX = nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b;
     e10:	e35a0000 	cmp	r10, #0
     e14:	b1a0b003 	movlt	r11, r3
     e18:	a1a0b000 	movge	r11, r0
        int constantY = nextPointValues[arrayInc].y;
        if (mainDx < 0){
            constantX = nextPointValues[arrayInc].x;
        }
        if (mainDy > 0){
     e1c:	e59d9018 	ldr	r9, [sp, #24]
     e20:	e3590000 	cmp	r9, #0
            constantY = nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h;
     e24:	c59d901c 	ldrgt	r9, [sp, #28]
     e28:	c599c008 	ldrgt	r12, [r9, #8]
     e2c:	c081c00c 	addgt	r12, r1, r12

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
        int constantX = nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b;
        int constantY = nextPointValues[arrayInc].y;
     e30:	d1a0c001 	movle	r12, r1
            constantX = nextPointValues[arrayInc].x;
        }
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h;
        }
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b ; i++){
     e34:	e1530000 	cmp	r3, r0
     e38:	aa00002d 	bge	ef4 <MainChar_move+0x2e4>
            if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameTersID){
     e3c:	e59d900c 	ldr	r9, [sp, #12]
     e40:	e799c10c 	ldr	r12, [r9, r12, lsl #2]
     e44:	e0633183 	rsb	r3, r3, r3, lsl #3
     e48:	e08c3183 	add	r3, r12, r3, lsl #3
        }
        if (troopPtr->grounded == true) break;
    }
}

void MainChar_move(MainChar* ZeroPtr){
     e4c:	e2833030 	add	r3, r3, #48	; 0x30
     e50:	e0600180 	rsb	r0, r0, r0, lsl #3
     e54:	e08c0180 	add	r0, r12, r0, lsl #3
     e58:	e2809030 	add	r9, r0, #48	; 0x30
     e5c:	e59dc018 	ldr	r12, [sp, #24]
     e60:	e58d1000 	str	r1, [sp]
     e64:	e1a00003 	mov	r0, r3
        }
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h;
        }
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b ; i++){
            if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameTersID){
     e68:	e5931000 	ldr	r1, [r3]
     e6c:	e1520001 	cmp	r2, r1
     e70:	1a00000b 	bne	ea4 <MainChar_move+0x294>
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
     e74:	e3550000 	cmp	r5, #0
     e78:	0a000009 	beq	ea4 <MainChar_move+0x294>
                    if(GAME.objSpace.bins[constantY][i].arrTersPtr[j] == NULL){
     e7c:	e513101c 	ldr	r1, [r3, #-28]	; 0xffffffe4
     e80:	e3510000 	cmp	r1, #0
     e84:	0a000006 	beq	ea4 <MainChar_move+0x294>
                        break;
                    }
                    else{
                        hitTer = true;
                        hitTerPtr = GAME.objSpace.bins[constantY][i].arrTersPtr[j];
                        if (mainDy > 0)
     e88:	e35c0000 	cmp	r12, #0
                            locationTer = BOT;
     e8c:	c3a01003 	movgt	r1, #3
     e90:	c58d1014 	strgt	r1, [sp, #20]
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
                    if(GAME.objSpace.bins[constantY][i].arrTersPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitTer = true;
     e94:	c3a07001 	movgt	r7, #1
                        hitTerPtr = GAME.objSpace.bins[constantY][i].arrTersPtr[j];
                        if (mainDy > 0)
                            locationTer = BOT;
                        else locationTer = TOP;
     e98:	d3a01001 	movle	r1, #1
     e9c:	d58d1014 	strle	r1, [sp, #20]
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
                    if(GAME.objSpace.bins[constantY][i].arrTersPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitTer = true;
     ea0:	d1a07001 	movle	r7, r1
                        else locationTer = TOP;
                        break;
                    }
                }
            }
           if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameMobsID){
     ea4:	e5101004 	ldr	r1, [r0, #-4]
     ea8:	e1520001 	cmp	r2, r1
     eac:	1a00000c 	bne	ee4 <MainChar_move+0x2d4>
                for(j=0; j<GAME.objSpace.numOfMobsInBin; j++){
     eb0:	e3540000 	cmp	r4, #0
     eb4:	0a00000a 	beq	ee4 <MainChar_move+0x2d4>
                    if(GAME.objSpace.bins[constantY][i].arrMobsPtr[j] == NULL){
     eb8:	e5100030 	ldr	r0, [r0, #-48]	; 0xffffffd0
     ebc:	e3500000 	cmp	r0, #0
     ec0:	0a000007 	beq	ee4 <MainChar_move+0x2d4>
                        break;
                    }
                    else{
                        hitMob = true;
                        hitMobPtr = GAME.objSpace.bins[constantY][i].arrMobsPtr[j];
                        if (mainDy > 0)
     ec4:	e35c0000 	cmp	r12, #0
                    if(GAME.objSpace.bins[constantY][i].arrMobsPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitMob = true;
                        hitMobPtr = GAME.objSpace.bins[constantY][i].arrMobsPtr[j];
     ec8:	e58d0010 	str	r0, [sp, #16]
                        if (mainDy > 0)
                            locationMob = BOT;
     ecc:	c3a00003 	movgt	r0, #3
     ed0:	c58d0008 	strgt	r0, [sp, #8]
                for(j=0; j<GAME.objSpace.numOfMobsInBin; j++){
                    if(GAME.objSpace.bins[constantY][i].arrMobsPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitMob = true;
     ed4:	c3a08001 	movgt	r8, #1
                        hitMobPtr = GAME.objSpace.bins[constantY][i].arrMobsPtr[j];
                        if (mainDy > 0)
                            locationMob = BOT;
                        else locationMob = TOP;
     ed8:	d3a01001 	movle	r1, #1
     edc:	d58d1008 	strle	r1, [sp, #8]
                for(j=0; j<GAME.objSpace.numOfMobsInBin; j++){
                    if(GAME.objSpace.bins[constantY][i].arrMobsPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitMob = true;
     ee0:	d1a08001 	movle	r8, r1
     ee4:	e2833038 	add	r3, r3, #56	; 0x38
            constantX = nextPointValues[arrayInc].x;
        }
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h;
        }
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + ZeroPtr->spritePtr->b ; i++){
     ee8:	e1530009 	cmp	r3, r9
     eec:	1affffdc 	bne	e64 <MainChar_move+0x254>
     ef0:	e59d1000 	ldr	r1, [sp]
            }

        }

        
        for (i = nextPointValues[arrayInc].y; i < nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h; i++){
     ef4:	e59d301c 	ldr	r3, [sp, #28]
     ef8:	e5939008 	ldr	r9, [r3, #8]
     efc:	e0819009 	add	r9, r1, r9
     f00:	e1510009 	cmp	r1, r9
     f04:	aa000023 	bge	f98 <MainChar_move+0x388>
            if(GAME.frameID == GAME.objSpace.bins[i][constantX].updatedFrameTersID){
     f08:	e06bb18b 	rsb	r11, r11, r11, lsl #3
     f0c:	e1a0b18b 	lsl	r11, r11, #3
        }
        if (troopPtr->grounded == true) break;
    }
}

void MainChar_move(MainChar* ZeroPtr){
     f10:	e59dc00c 	ldr	r12, [sp, #12]
     f14:	e08c1101 	add	r1, r12, r1, lsl #2
     f18:	e08c9109 	add	r9, r12, r9, lsl #2

        }

        
        for (i = nextPointValues[arrayInc].y; i < nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h; i++){
            if(GAME.frameID == GAME.objSpace.bins[i][constantX].updatedFrameTersID){
     f1c:	e4910004 	ldr	r0, [r1], #4
     f20:	e080300b 	add	r3, r0, r11
     f24:	e593c030 	ldr	r12, [r3, #48]	; 0x30
     f28:	e152000c 	cmp	r2, r12
     f2c:	1a000009 	bne	f58 <MainChar_move+0x348>
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
     f30:	e3550000 	cmp	r5, #0
     f34:	0a000007 	beq	f58 <MainChar_move+0x348>
                    if(GAME.objSpace.bins[i][constantX].arrTersPtr[j] == NULL){
     f38:	e593c014 	ldr	r12, [r3, #20]
     f3c:	e35c0000 	cmp	r12, #0
     f40:	0a000004 	beq	f58 <MainChar_move+0x348>
                                 locationTer = TOPRIGHT;
                             }
                             else if (locationTer == BOT){
                                 locationTer = BOTRIGHT;
                             }
                             locationTer = RIGHT;
     f44:	e35a0000 	cmp	r10, #0
     f48:	d3a0c004 	movle	r12, #4
     f4c:	c3a0c002 	movgt	r12, #2
     f50:	e58dc014 	str	r12, [sp, #20]
     f54:	e3a07001 	mov	r7, #1
                        }
                        break;
                    }
                }
            }
            if(GAME.frameID == GAME.objSpace.bins[i][constantX].updatedFrameMobsID){
     f58:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
     f5c:	e1520003 	cmp	r2, r3
     f60:	1a00000a 	bne	f90 <MainChar_move+0x380>
                for(j=0; j<GAME.objSpace.numOfMobsInBin; j++){
     f64:	e3540000 	cmp	r4, #0
     f68:	0a000008 	beq	f90 <MainChar_move+0x380>
                    if(GAME.objSpace.bins[i][constantX].arrMobsPtr[j] == NULL){
     f6c:	e790300b 	ldr	r3, [r0, r11]
     f70:	e3530000 	cmp	r3, #0
     f74:	0a000005 	beq	f90 <MainChar_move+0x380>
                        break;
                    }
                    else{
                        hitMob = true;
                        hitMobPtr = GAME.objSpace.bins[i][constantX].arrMobsPtr[j];
     f78:	e58d3010 	str	r3, [sp, #16]
     f7c:	e35a0000 	cmp	r10, #0
     f80:	d3a00004 	movle	r0, #4
     f84:	c3a00002 	movgt	r0, #2
     f88:	e58d0008 	str	r0, [sp, #8]
     f8c:	e3a08001 	mov	r8, #1
            }

        }

        
        for (i = nextPointValues[arrayInc].y; i < nextPointValues[arrayInc].y + ZeroPtr->spritePtr->h; i++){
     f90:	e1510009 	cmp	r1, r9
     f94:	1affffe0 	bne	f1c <MainChar_move+0x30c>
                    }
                }
            }
        }

        if (hitMob || hitTer) break;
     f98:	e6ef3077 	uxtb	r3, r7
     f9c:	e1933008 	orrs	r3, r3, r8
     fa0:	1a000008 	bne	fc8 <MainChar_move+0x3b8>
    int locationTer = 0;
    int locationMob = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
     fa4:	e59d1004 	ldr	r1, [sp, #4]
     fa8:	e2811001 	add	r1, r1, #1
     fac:	e58d1004 	str	r1, [sp, #4]
     fb0:	e2866008 	add	r6, r6, #8
     fb4:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
     fb8:	e1510009 	cmp	r1, r9
     fbc:	1affff8f 	bne	e00 <MainChar_move+0x1f0>
     fc0:	e1a03007 	mov	r3, r7
     fc4:	ea000000 	b	fcc <MainChar_move+0x3bc>
                    }
                }
            }
        }

        if (hitMob || hitTer) break;
     fc8:	e1a03007 	mov	r3, r7
    }

    if (hitTer){
     fcc:	e3530000 	cmp	r3, #0
     fd0:	0a000079 	beq	11bc <MainChar_move+0x5ac>
        switch (locationTer){
     fd4:	e59dc014 	ldr	r12, [sp, #20]
     fd8:	e28c2004 	add	r2, r12, #4
     fdc:	e3520008 	cmp	r2, #8
     fe0:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
     fe4:	ea00006a 	b	1194 <MainChar_move+0x584>
     fe8:	00001158 	.word	0x00001158
     fec:	00001114 	.word	0x00001114
     ff0:	000010e0 	.word	0x000010e0
     ff4:	000010ac 	.word	0x000010ac
     ff8:	00001194 	.word	0x00001194
     ffc:	0000100c 	.word	0x0000100c
    1000:	00001034 	.word	0x00001034
    1004:	00001058 	.word	0x00001058
    1008:	00001088 	.word	0x00001088
            case TOP:{
                ZeroPtr->y = nextPointValues[arrayInc].y;
    100c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1010:	e59dc004 	ldr	r12, [sp, #4]
    1014:	e089218c 	add	r2, r9, r12, lsl #3
    1018:	e5922004 	ldr	r2, [r2, #4]
    101c:	e59d9020 	ldr	r9, [sp, #32]
    1020:	e5892008 	str	r2, [r9, #8]
                ZeroPtr->dy = 0;
    1024:	e3a02000 	mov	r2, #0
    1028:	e5892010 	str	r2, [r9, #16]
                break;
    102c:	e1a07003 	mov	r7, r3
    1030:	ea000061 	b	11bc <MainChar_move+0x5ac>
            }
            case RIGHT:{
                ZeroPtr->x = nextPointValues[arrayInc].x ;
    1034:	e59dc004 	ldr	r12, [sp, #4]
    1038:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    103c:	e799218c 	ldr	r2, [r9, r12, lsl #3]
    1040:	e59d9020 	ldr	r9, [sp, #32]
    1044:	e5892004 	str	r2, [r9, #4]
                ZeroPtr->dx = 0;
    1048:	e3a02000 	mov	r2, #0
    104c:	e589200c 	str	r2, [r9, #12]
                break;
    1050:	e1a07003 	mov	r7, r3
    1054:	ea000058 	b	11bc <MainChar_move+0x5ac>
            }
            case BOT:{
                ZeroPtr->y = nextPointValues[arrayInc].y ;
    1058:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    105c:	e59dc004 	ldr	r12, [sp, #4]
    1060:	e089218c 	add	r2, r9, r12, lsl #3
    1064:	e5922004 	ldr	r2, [r2, #4]
    1068:	e59d9020 	ldr	r9, [sp, #32]
    106c:	e5892008 	str	r2, [r9, #8]
                ZeroPtr->dy = 0;
    1070:	e3a02000 	mov	r2, #0
    1074:	e5892010 	str	r2, [r9, #16]
                ZeroPtr->grounded = true;
    1078:	e3a02001 	mov	r2, #1
    107c:	e5c92018 	strb	r2, [r9, #24]
                break;
    1080:	e1a07003 	mov	r7, r3
    1084:	ea00004c 	b	11bc <MainChar_move+0x5ac>
            }
            case LEFT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    1088:	e59dc004 	ldr	r12, [sp, #4]
    108c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1090:	e799218c 	ldr	r2, [r9, r12, lsl #3]
    1094:	e59d9020 	ldr	r9, [sp, #32]
    1098:	e5892004 	str	r2, [r9, #4]
                ZeroPtr->dx = 0;
    109c:	e3a02000 	mov	r2, #0
    10a0:	e589200c 	str	r2, [r9, #12]
                break;
    10a4:	e1a07003 	mov	r7, r3
    10a8:	ea000043 	b	11bc <MainChar_move+0x5ac>
            }
            case TOPLEFT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    10ac:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    10b0:	e59dc004 	ldr	r12, [sp, #4]
    10b4:	e089218c 	add	r2, r9, r12, lsl #3
    10b8:	e799118c 	ldr	r1, [r9, r12, lsl #3]
    10bc:	e59d9020 	ldr	r9, [sp, #32]
    10c0:	e5891004 	str	r1, [r9, #4]
                ZeroPtr->y = nextPointValues[arrayInc].y;
    10c4:	e5922004 	ldr	r2, [r2, #4]
    10c8:	e5892008 	str	r2, [r9, #8]
                ZeroPtr->dx = 0;
    10cc:	e3a02000 	mov	r2, #0
    10d0:	e589200c 	str	r2, [r9, #12]
                ZeroPtr->dy= 0;
    10d4:	e5892010 	str	r2, [r9, #16]
                break;
    10d8:	e1a07003 	mov	r7, r3
    10dc:	ea000036 	b	11bc <MainChar_move+0x5ac>
            }
            case TOPRIGHT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    10e0:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    10e4:	e59dc004 	ldr	r12, [sp, #4]
    10e8:	e089118c 	add	r1, r9, r12, lsl #3
    10ec:	e799218c 	ldr	r2, [r9, r12, lsl #3]
    10f0:	e59d9020 	ldr	r9, [sp, #32]
    10f4:	e5892004 	str	r2, [r9, #4]
                ZeroPtr->dx = 0;
    10f8:	e3a02000 	mov	r2, #0
    10fc:	e589200c 	str	r2, [r9, #12]
                ZeroPtr->y = nextPointValues[arrayInc].y;
    1100:	e5911004 	ldr	r1, [r1, #4]
    1104:	e5891008 	str	r1, [r9, #8]
                ZeroPtr->dy = 0;
    1108:	e5892010 	str	r2, [r9, #16]
                break;
    110c:	e1a07003 	mov	r7, r3
    1110:	ea000029 	b	11bc <MainChar_move+0x5ac>
            }
            case BOTRIGHT:{
               ZeroPtr->y = nextPointValues[arrayInc].y ;
    1114:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1118:	e59dc004 	ldr	r12, [sp, #4]
    111c:	e089218c 	add	r2, r9, r12, lsl #3
    1120:	e5922004 	ldr	r2, [r2, #4]
    1124:	e59d9020 	ldr	r9, [sp, #32]
    1128:	e5892008 	str	r2, [r9, #8]
                ZeroPtr->dy = 0;
    112c:	e3a02000 	mov	r2, #0
    1130:	e5892010 	str	r2, [r9, #16]
                ZeroPtr->x = nextPointValues[arrayInc].x;
    1134:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1138:	e799118c 	ldr	r1, [r9, r12, lsl #3]
    113c:	e59d9020 	ldr	r9, [sp, #32]
    1140:	e5891004 	str	r1, [r9, #4]
                ZeroPtr->dx = 0;
    1144:	e589200c 	str	r2, [r9, #12]
                ZeroPtr->grounded = true;
    1148:	e3a02001 	mov	r2, #1
    114c:	e5c92018 	strb	r2, [r9, #24]
                break;
    1150:	e1a07003 	mov	r7, r3
    1154:	ea000018 	b	11bc <MainChar_move+0x5ac>
            }
            case BOTLEFT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    1158:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    115c:	e59dc004 	ldr	r12, [sp, #4]
    1160:	e089118c 	add	r1, r9, r12, lsl #3
    1164:	e799218c 	ldr	r2, [r9, r12, lsl #3]
    1168:	e59d9020 	ldr	r9, [sp, #32]
    116c:	e5892004 	str	r2, [r9, #4]
                ZeroPtr->dx = 0;
    1170:	e3a02000 	mov	r2, #0
    1174:	e589200c 	str	r2, [r9, #12]
                ZeroPtr->y = nextPointValues[arrayInc].y ;
    1178:	e5911004 	ldr	r1, [r1, #4]
    117c:	e5891008 	str	r1, [r9, #8]
                ZeroPtr->dy = 0;
    1180:	e5892010 	str	r2, [r9, #16]
                ZeroPtr->grounded = true;
    1184:	e3a02001 	mov	r2, #1
    1188:	e5c92018 	strb	r2, [r9, #24]
                break;
    118c:	e1a07003 	mov	r7, r3
    1190:	ea000009 	b	11bc <MainChar_move+0x5ac>
            }
            default:{
                ZeroPtr->x += ZeroPtr->dx;
    1194:	e59d9020 	ldr	r9, [sp, #32]
    1198:	e5991004 	ldr	r1, [r9, #4]
    119c:	e599200c 	ldr	r2, [r9, #12]
    11a0:	e0812002 	add	r2, r1, r2
    11a4:	e5892004 	str	r2, [r9, #4]
                ZeroPtr->y += ZeroPtr->dy;
    11a8:	e5991008 	ldr	r1, [r9, #8]
    11ac:	e5992010 	ldr	r2, [r9, #16]
    11b0:	e0812002 	add	r2, r1, r2
    11b4:	e5892008 	str	r2, [r9, #8]
                break;
    11b8:	e1a07003 	mov	r7, r3
            }
        }
    }

    if (hitMob){
    11bc:	e3580000 	cmp	r8, #0
    11c0:	0a00008d 	beq	13fc <MainChar_move+0x7ec>
        switch (locationMob){
    11c4:	e59dc008 	ldr	r12, [sp, #8]
    11c8:	e28c3004 	add	r3, r12, #4
    11cc:	e3530008 	cmp	r3, #8
    11d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    11d4:	ea00007b 	b	13c8 <MainChar_move+0x7b8>
    11d8:	0000138c 	.word	0x0000138c
    11dc:	00001348 	.word	0x00001348
    11e0:	00001304 	.word	0x00001304
    11e4:	000012c8 	.word	0x000012c8
    11e8:	000013c8 	.word	0x000013c8
    11ec:	000011fc 	.word	0x000011fc
    11f0:	0000122c 	.word	0x0000122c
    11f4:	00001264 	.word	0x00001264
    11f8:	00001298 	.word	0x00001298
            case TOP:{
                ZeroPtr->y = nextPointValues[arrayInc].y;
    11fc:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1200:	e59dc004 	ldr	r12, [sp, #4]
    1204:	e089318c 	add	r3, r9, r12, lsl #3
    1208:	e5933004 	ldr	r3, [r3, #4]
    120c:	e59d9020 	ldr	r9, [sp, #32]
    1210:	e5893008 	str	r3, [r9, #8]
                ZeroPtr->dy = 0;
    1214:	e3a03000 	mov	r3, #0
    1218:	e5893010 	str	r3, [r9, #16]
                ZeroPtr->health -= 1;
    121c:	e5993000 	ldr	r3, [r9]
    1220:	e2433001 	sub	r3, r3, #1
    1224:	e5893000 	str	r3, [r9]
                break;
    1228:	ea00007e 	b	1428 <MainChar_move+0x818>
            }
            case RIGHT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    122c:	e59dc004 	ldr	r12, [sp, #4]
    1230:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1234:	e799318c 	ldr	r3, [r9, r12, lsl #3]
    1238:	e59d9020 	ldr	r9, [sp, #32]
    123c:	e5893004 	str	r3, [r9, #4]
                ZeroPtr->dx = -ZeroPtr->dx-5;
    1240:	e599200c 	ldr	r2, [r9, #12]
    1244:	e30f3ffb 	movw	r3, #65531	; 0xfffb
    1248:	e34f3fff 	movt	r3, #65535	; 0xffff
    124c:	e0623003 	rsb	r3, r2, r3
    1250:	e589300c 	str	r3, [r9, #12]
                ZeroPtr->health -= 1;
    1254:	e5993000 	ldr	r3, [r9]
    1258:	e2433001 	sub	r3, r3, #1
    125c:	e5893000 	str	r3, [r9]
                break;
    1260:	ea000070 	b	1428 <MainChar_move+0x818>
            }
            case BOT:{
                ZeroPtr->y = nextPointValues[arrayInc].y ;
    1264:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1268:	e59dc004 	ldr	r12, [sp, #4]
    126c:	e089318c 	add	r3, r9, r12, lsl #3
    1270:	e5933004 	ldr	r3, [r3, #4]
    1274:	e59d9020 	ldr	r9, [sp, #32]
    1278:	e5893008 	str	r3, [r9, #8]
                ZeroPtr->dy = 0;
    127c:	e3a03000 	mov	r3, #0
    1280:	e5893010 	str	r3, [r9, #16]
                hitMobPtr->health -= 1;
    1284:	e59dc010 	ldr	r12, [sp, #16]
    1288:	e59c3020 	ldr	r3, [r12, #32]
    128c:	e2433001 	sub	r3, r3, #1
    1290:	e58c3020 	str	r3, [r12, #32]
                break;
    1294:	ea000063 	b	1428 <MainChar_move+0x818>
            }
            case LEFT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    1298:	e59d0004 	ldr	r0, [sp, #4]
    129c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    12a0:	e7993180 	ldr	r3, [r9, r0, lsl #3]
    12a4:	e59d9020 	ldr	r9, [sp, #32]
    12a8:	e5893004 	str	r3, [r9, #4]
                ZeroPtr->dx = -ZeroPtr->dx+5;
    12ac:	e599300c 	ldr	r3, [r9, #12]
    12b0:	e2633005 	rsb	r3, r3, #5
    12b4:	e589300c 	str	r3, [r9, #12]
                ZeroPtr->health -= 1;
    12b8:	e5993000 	ldr	r3, [r9]
    12bc:	e2433001 	sub	r3, r3, #1
    12c0:	e5893000 	str	r3, [r9]
                break;
    12c4:	ea000057 	b	1428 <MainChar_move+0x818>
            }
            case TOPLEFT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    12c8:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    12cc:	e59dc004 	ldr	r12, [sp, #4]
    12d0:	e089318c 	add	r3, r9, r12, lsl #3
    12d4:	e799218c 	ldr	r2, [r9, r12, lsl #3]
    12d8:	e59d9020 	ldr	r9, [sp, #32]
    12dc:	e5892004 	str	r2, [r9, #4]
                ZeroPtr->y = nextPointValues[arrayInc].y;
    12e0:	e5933004 	ldr	r3, [r3, #4]
    12e4:	e5893008 	str	r3, [r9, #8]
                ZeroPtr->dx = -ZeroPtr->dx+5;
    12e8:	e599300c 	ldr	r3, [r9, #12]
    12ec:	e2633005 	rsb	r3, r3, #5
    12f0:	e589300c 	str	r3, [r9, #12]
                //ZeroPtr->dy= 0;
                ZeroPtr->health -= 1;
    12f4:	e5993000 	ldr	r3, [r9]
    12f8:	e2433001 	sub	r3, r3, #1
    12fc:	e5893000 	str	r3, [r9]
                break;
    1300:	ea000048 	b	1428 <MainChar_move+0x818>
            }
            case TOPRIGHT:{
                ZeroPtr->x = nextPointValues[arrayInc].x ;
    1304:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1308:	e59dc004 	ldr	r12, [sp, #4]
    130c:	e089218c 	add	r2, r9, r12, lsl #3
    1310:	e799318c 	ldr	r3, [r9, r12, lsl #3]
    1314:	e59d9020 	ldr	r9, [sp, #32]
    1318:	e5893004 	str	r3, [r9, #4]
                ZeroPtr->dx = -ZeroPtr->dx-5;
    131c:	e599100c 	ldr	r1, [r9, #12]
    1320:	e30f3ffb 	movw	r3, #65531	; 0xfffb
    1324:	e34f3fff 	movt	r3, #65535	; 0xffff
    1328:	e0613003 	rsb	r3, r1, r3
    132c:	e589300c 	str	r3, [r9, #12]
                ZeroPtr->y = nextPointValues[arrayInc].y;
    1330:	e5923004 	ldr	r3, [r2, #4]
    1334:	e5893008 	str	r3, [r9, #8]
                //ZeroPtr->dy = 0;
                ZeroPtr->health -= 1;
    1338:	e5993000 	ldr	r3, [r9]
    133c:	e2433001 	sub	r3, r3, #1
    1340:	e5893000 	str	r3, [r9]
                break;
    1344:	ea000037 	b	1428 <MainChar_move+0x818>
            }
            case BOTRIGHT:{
               ZeroPtr->y = nextPointValues[arrayInc].y;
    1348:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    134c:	e59dc004 	ldr	r12, [sp, #4]
    1350:	e089318c 	add	r3, r9, r12, lsl #3
    1354:	e5933004 	ldr	r3, [r3, #4]
    1358:	e59d9020 	ldr	r9, [sp, #32]
    135c:	e5893008 	str	r3, [r9, #8]
                ZeroPtr->dy = 0;
    1360:	e3a03000 	mov	r3, #0
    1364:	e5893010 	str	r3, [r9, #16]
                ZeroPtr->x = nextPointValues[arrayInc].x ;
    1368:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    136c:	e799318c 	ldr	r3, [r9, r12, lsl #3]
    1370:	e59d9020 	ldr	r9, [sp, #32]
    1374:	e5893004 	str	r3, [r9, #4]
                //ZeroPtr->dx = 0;
                hitMobPtr->health -= 1;
    1378:	e59dc010 	ldr	r12, [sp, #16]
    137c:	e59c3020 	ldr	r3, [r12, #32]
    1380:	e2433001 	sub	r3, r3, #1
    1384:	e58c3020 	str	r3, [r12, #32]
                break;
    1388:	ea000026 	b	1428 <MainChar_move+0x818>
            }
            case BOTLEFT:{
                ZeroPtr->x = nextPointValues[arrayInc].x;
    138c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    1390:	e59dc004 	ldr	r12, [sp, #4]
    1394:	e089318c 	add	r3, r9, r12, lsl #3
    1398:	e799218c 	ldr	r2, [r9, r12, lsl #3]
    139c:	e59d9020 	ldr	r9, [sp, #32]
    13a0:	e5892004 	str	r2, [r9, #4]
                //ZeroPtr->dx = 0;
                ZeroPtr->y = nextPointValues[arrayInc].y ;
    13a4:	e5933004 	ldr	r3, [r3, #4]
    13a8:	e5893008 	str	r3, [r9, #8]
                ZeroPtr->dy = 0;
    13ac:	e3a03000 	mov	r3, #0
    13b0:	e5893010 	str	r3, [r9, #16]
                hitMobPtr->health -= 1;
    13b4:	e59dc010 	ldr	r12, [sp, #16]
    13b8:	e59c3020 	ldr	r3, [r12, #32]
    13bc:	e2433001 	sub	r3, r3, #1
    13c0:	e58c3020 	str	r3, [r12, #32]
                break;
    13c4:	ea000017 	b	1428 <MainChar_move+0x818>
            }
            default:{
                if (!hitTer){
    13c8:	e3570000 	cmp	r7, #0
    13cc:	1a000015 	bne	1428 <MainChar_move+0x818>
                    ZeroPtr->x += ZeroPtr->dx;
    13d0:	e59d9020 	ldr	r9, [sp, #32]
    13d4:	e5992004 	ldr	r2, [r9, #4]
    13d8:	e599300c 	ldr	r3, [r9, #12]
    13dc:	e0823003 	add	r3, r2, r3
    13e0:	e5893004 	str	r3, [r9, #4]
                    ZeroPtr->y += ZeroPtr->dy;
    13e4:	e5992008 	ldr	r2, [r9, #8]
    13e8:	e5993010 	ldr	r3, [r9, #16]
    13ec:	e0823003 	add	r3, r2, r3
    13f0:	e5893008 	str	r3, [r9, #8]
    13f4:	ea00000b 	b	1428 <MainChar_move+0x818>
    int locationTer = 0;
    int locationMob = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
    13f8:	e3a07000 	mov	r7, #0
                break;
            }
        }
    }

    if(!hitMob && !hitTer){
    13fc:	e3570000 	cmp	r7, #0
    1400:	1a000008 	bne	1428 <MainChar_move+0x818>
        ZeroPtr->x += ZeroPtr->dx;
    1404:	e59d9020 	ldr	r9, [sp, #32]
    1408:	e5992004 	ldr	r2, [r9, #4]
    140c:	e599300c 	ldr	r3, [r9, #12]
    1410:	e0823003 	add	r3, r2, r3
    1414:	e5893004 	str	r3, [r9, #4]
        ZeroPtr->y += ZeroPtr->dy;
    1418:	e5992008 	ldr	r2, [r9, #8]
    141c:	e5993010 	ldr	r3, [r9, #16]
    1420:	e0823003 	add	r3, r2, r3
    1424:	e5893008 	str	r3, [r9, #8]
    }

}
    1428:	e28dd044 	add	sp, sp, #68	; 0x44
    142c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001430 <Mob_move>:

void Mob_move(Mob * troopPtr){
    1430:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1434:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    1438:	e58d0008 	str	r0, [sp, #8]
	if (troopPtr->health == 0){
    143c:	e5903020 	ldr	r3, [r0, #32]
    1440:	e3530000 	cmp	r3, #0
    1444:	1a000005 	bne	1460 <Mob_move+0x30>
		troopPtr->killed = true;
    1448:	e3a03001 	mov	r3, #1
    144c:	e5c03004 	strb	r3, [r0, #4]
		printf("mobDied. \n");
    1450:	e3060558 	movw	r0, #25944	; 0x6558
    1454:	e3400000 	movt	r0, #0
    1458:	eb000916 	bl	38b8 <puts>
    145c:	ea000130 	b	1924 <Mob_move+0x4f4>
		return;
	}
    Mob_grounded(troopPtr);
    1460:	e59d0008 	ldr	r0, [sp, #8]
    1464:	ebfffdbc 	bl	b5c <Mob_grounded>
    if (!troopPtr->grounded) troopPtr->dy += 2;
    1468:	e59d0008 	ldr	r0, [sp, #8]
    146c:	e5d03018 	ldrb	r3, [r0, #24]
    1470:	e3530000 	cmp	r3, #0
    1474:	05903014 	ldreq	r3, [r0, #20]
    1478:	02833002 	addeq	r3, r3, #2
    147c:	05803014 	streq	r3, [r0, #20]
    int i,j;
    int mainDx = troopPtr->dx;
    1480:	e59d1008 	ldr	r1, [sp, #8]
    1484:	e5911010 	ldr	r1, [r1, #16]
    1488:	e58d1000 	str	r1, [sp]
    int mainDy = troopPtr->dy;
    148c:	e59d2008 	ldr	r2, [sp, #8]
    1490:	e5922014 	ldr	r2, [r2, #20]
    1494:	e58d2004 	str	r2, [sp, #4]
    int endY = troopPtr->y + mainDy; 
    1498:	e59d3008 	ldr	r3, [sp, #8]
    149c:	e593200c 	ldr	r2, [r3, #12]
    14a0:	e59d0004 	ldr	r0, [sp, #4]
    14a4:	e0823000 	add	r3, r2, r0
    14a8:	e58d3024 	str	r3, [sp, #36]	; 0x24
    int endX = troopPtr->x + mainDx;
    14ac:	e59d1008 	ldr	r1, [sp, #8]
    14b0:	e5913008 	ldr	r3, [r1, #8]
    14b4:	e59d0000 	ldr	r0, [sp]
    14b8:	e0831000 	add	r1, r3, r0
    14bc:	e58d1020 	str	r1, [sp, #32]
    int startY = troopPtr->y; 
    14c0:	e58d201c 	str	r2, [sp, #28]
    int startX = troopPtr->x;
    14c4:	e58d3018 	str	r3, [sp, #24]
    int size = abs(mainDy) + 1;
    14c8:	e59d2004 	ldr	r2, [sp, #4]
    14cc:	e3520000 	cmp	r2, #0
    14d0:	b2622000 	rsblt	r2, r2, #0

    if (abs(mainDx) > abs(mainDy)){
    14d4:	e1a03000 	mov	r3, r0
    14d8:	e3530000 	cmp	r3, #0
    14dc:	b2633000 	rsblt	r3, r3, #0
    14e0:	e1520003 	cmp	r2, r3
    int mainDy = troopPtr->dy;
    int endY = troopPtr->y + mainDy; 
    int endX = troopPtr->x + mainDx;
    int startY = troopPtr->y; 
    int startX = troopPtr->x;
    int size = abs(mainDy) + 1;
    14e4:	a2822001 	addge	r2, r2, #1
    14e8:	a58d200c 	strge	r2, [sp, #12]

    if (abs(mainDx) > abs(mainDy)){
        size = abs(mainDx)+1;
    14ec:	b2833001 	addlt	r3, r3, #1
    14f0:	b58d300c 	strlt	r3, [sp, #12]
    }
    Point * nextPointValues = (Point *)malloc(size * sizeof(Point));
    14f4:	e59d100c 	ldr	r1, [sp, #12]
    14f8:	e1a00181 	lsl	r0, r1, #3
    14fc:	eb0006eb 	bl	30b0 <malloc>
    1500:	e58d0014 	str	r0, [sp, #20]

    bool is_steep = abs(endY-startY) > abs(endX-startX);
    1504:	e59d301c 	ldr	r3, [sp, #28]
    1508:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    150c:	e0634004 	rsb	r4, r3, r4
    1510:	e3540000 	cmp	r4, #0
    1514:	b2644000 	rsblt	r4, r4, #0
    1518:	e59d3018 	ldr	r3, [sp, #24]
    151c:	e59d2020 	ldr	r2, [sp, #32]
    1520:	e0633002 	rsb	r3, r3, r2
    1524:	e3530000 	cmp	r3, #0
    1528:	b2633000 	rsblt	r3, r3, #0
    152c:	e1540003 	cmp	r4, r3
    1530:	d3a04000 	movle	r4, #0
    1534:	c3a04001 	movgt	r4, #1
    if (is_steep){
    1538:	e3540000 	cmp	r4, #0
    153c:	0a000005 	beq	1558 <Mob_move+0x128>
        swap (&startX, &startY);
    1540:	e28d0018 	add	r0, sp, #24
    1544:	e28d101c 	add	r1, sp, #28
    1548:	eb0005db 	bl	2cbc <swap>
        swap (&endX, &endY);
    154c:	e28d0020 	add	r0, sp, #32
    1550:	e28d1024 	add	r1, sp, #36	; 0x24
    1554:	eb0005d8 	bl	2cbc <swap>
    }
    if (endX<startX){
    1558:	e59d3018 	ldr	r3, [sp, #24]
    155c:	e59d2020 	ldr	r2, [sp, #32]
    1560:	e1520003 	cmp	r2, r3
    1564:	aa000005 	bge	1580 <Mob_move+0x150>
        swap (&startX, &endX);
    1568:	e28d0018 	add	r0, sp, #24
    156c:	e28d1020 	add	r1, sp, #32
    1570:	eb0005d1 	bl	2cbc <swap>
        swap (&startY, &endY);
    1574:	e28d001c 	add	r0, sp, #28
    1578:	e28d1024 	add	r1, sp, #36	; 0x24
    157c:	eb0005ce 	bl	2cbc <swap>
    }
    
    int dx = endX-startX;
    1580:	e59d5020 	ldr	r5, [sp, #32]
    1584:	e59d2018 	ldr	r2, [sp, #24]
    1588:	e0626005 	rsb	r6, r2, r5
    int dy = abs(endY-startY);
    158c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    1590:	e59d101c 	ldr	r1, [sp, #28]
    1594:	e061000c 	rsb	r0, r1, r12
    1598:	e3500000 	cmp	r0, #0
    159c:	b2600000 	rsblt	r0, r0, #0
    int error = -dx/2;
    15a0:	e2663000 	rsb	r3, r6, #0
    15a4:	e0833fa3 	add	r3, r3, r3, lsr #31
    15a8:	e1a030c3 	asr	r3, r3, #1
    int x;
    int y = startY;
    int y_step;
    if (startY < endY){
        y_step = 1;
    15ac:	e15c0001 	cmp	r12, r1
    15b0:	d3e07000 	mvnle	r7, #0
    15b4:	c3a07001 	movgt	r7, #1
    }
    else y_step = -1;

    int arrayInc = 0;
    for (x = startX; x <= endX; x++){
    15b8:	e1550002 	cmp	r5, r2
    15bc:	ba00000e 	blt	15fc <Mob_move+0x1cc>
    15c0:	e3a0c000 	mov	r12, #0
    15c4:	e59d8014 	ldr	r8, [sp, #20]
        if (is_steep){
    15c8:	e3540000 	cmp	r4, #0
            nextPointValues[arrayInc].x = y;
    15cc:	e1a0e008 	mov	lr, r8
    15d0:	17ae100c 	strne	r1, [lr, r12]!
            nextPointValues[arrayInc].y = x;
    15d4:	158e2004 	strne	r2, [lr, #4]
        }
        else{
             nextPointValues[arrayInc].x = x;
    15d8:	07ae200c 	streq	r2, [lr, r12]!
            nextPointValues[arrayInc].y = y;
    15dc:	058e1004 	streq	r1, [lr, #4]
        }
        error += dy;
        if (error >= 0){
    15e0:	e0933000 	adds	r3, r3, r0
            y += y_step;
    15e4:	50811007 	addpl	r1, r1, r7
            error -= dx;
    15e8:	50663003 	rsbpl	r3, r6, r3
        y_step = 1;
    }
    else y_step = -1;

    int arrayInc = 0;
    for (x = startX; x <= endX; x++){
    15ec:	e2822001 	add	r2, r2, #1
    15f0:	e28cc008 	add	r12, r12, #8
    15f4:	e1550002 	cmp	r5, r2
    15f8:	aafffff2 	bge	15c8 <Mob_move+0x198>
    bool hitTer = false;
    int locationTer = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
    15fc:	e59d200c 	ldr	r2, [sp, #12]
    1600:	e3520000 	cmp	r2, #0
    1604:	da0000ba 	ble	18f4 <Mob_move+0x4c4>
        
        int constantX = nextPointValues[arrayInc].x + troopPtr->spritePtr->b;
    1608:	e59d3008 	ldr	r3, [sp, #8]
    160c:	e593b024 	ldr	r11, [r3, #36]	; 0x24
    1610:	e59b0004 	ldr	r0, [r11, #4]
    1614:	e58d0010 	str	r0, [sp, #16]
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + troopPtr->spritePtr->h;
        }
        
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + troopPtr->spritePtr->b ; i++){
            if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameTersID){
    1618:	e3063e64 	movw	r3, #28260	; 0x6e64
    161c:	e3403000 	movt	r3, #0
    1620:	e59320f8 	ldr	r2, [r3, #248]	; 0xf8
    1624:	e593a0e0 	ldr	r10, [r3, #224]	; 0xe0
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
    1628:	e593e0f0 	ldr	lr, [r3, #240]	; 0xf0
    162c:	e59d6014 	ldr	r6, [sp, #20]
    1630:	e3a09000 	mov	r9, #0
    1634:	e1a07009 	mov	r7, r9

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
        
        int constantX = nextPointValues[arrayInc].x + troopPtr->spritePtr->b;
    1638:	e5963000 	ldr	r3, [r6]
    163c:	e59d0010 	ldr	r0, [sp, #16]
    1640:	e0831000 	add	r1, r3, r0
        int constantY = nextPointValues[arrayInc].y;
    1644:	e5964004 	ldr	r4, [r6, #4]

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
        
        int constantX = nextPointValues[arrayInc].x + troopPtr->spritePtr->b;
    1648:	e59d0000 	ldr	r0, [sp]
    164c:	e3500000 	cmp	r0, #0
    1650:	b1a08003 	movlt	r8, r3
    1654:	a1a08001 	movge	r8, r1
        int constantY = nextPointValues[arrayInc].y;
        if (mainDx < 0){
            constantX = nextPointValues[arrayInc].x;
        }
        if (mainDy > 0){
    1658:	e59d0004 	ldr	r0, [sp, #4]
    165c:	e3500000 	cmp	r0, #0
            constantY = nextPointValues[arrayInc].y + troopPtr->spritePtr->h;
    1660:	c59b0008 	ldrgt	r0, [r11, #8]
    1664:	c0840000 	addgt	r0, r4, r0
    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
        
        int constantX = nextPointValues[arrayInc].x + troopPtr->spritePtr->b;
        int constantY = nextPointValues[arrayInc].y;
    1668:	d1a00004 	movle	r0, r4
        }
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + troopPtr->spritePtr->h;
        }
        
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + troopPtr->spritePtr->b ; i++){
    166c:	e1530001 	cmp	r3, r1
    1670:	aa000017 	bge	16d4 <Mob_move+0x2a4>
            if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameTersID){
    1674:	e79a0100 	ldr	r0, [r10, r0, lsl #2]
        ZeroPtr->y += ZeroPtr->dy;
    }

}

void Mob_move(Mob * troopPtr){
    1678:	e0633183 	rsb	r3, r3, r3, lsl #3
    167c:	e0803183 	add	r3, r0, r3, lsl #3
    1680:	e0611181 	rsb	r1, r1, r1, lsl #3
    1684:	e080c181 	add	r12, r0, r1, lsl #3
    1688:	e3a05000 	mov	r5, #0
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + troopPtr->spritePtr->h;
        }
        
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + troopPtr->spritePtr->b ; i++){
            if(GAME.frameID == GAME.objSpace.bins[constantY][i].updatedFrameTersID){
    168c:	e5931030 	ldr	r1, [r3, #48]	; 0x30
    1690:	e1520001 	cmp	r2, r1
    1694:	1a00000a 	bne	16c4 <Mob_move+0x294>
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
    1698:	e35e0000 	cmp	lr, #0
    169c:	0a000008 	beq	16c4 <Mob_move+0x294>
                    if(GAME.objSpace.bins[constantY][i].arrTersPtr[j] == NULL){
    16a0:	e5931014 	ldr	r1, [r3, #20]
    16a4:	e3510000 	cmp	r1, #0
    16a8:	0a000005 	beq	16c4 <Mob_move+0x294>
                        break;
                    }
                    else{
                        hitTer = true;
                        hitTerPtr = GAME.objSpace.bins[constantY][i].arrTersPtr[j];
                        if (mainDy > 0)
    16ac:	e59d1004 	ldr	r1, [sp, #4]
    16b0:	e3510000 	cmp	r1, #0
                            locationTer = BOT;
    16b4:	c3a09003 	movgt	r9, #3
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
                    if(GAME.objSpace.bins[constantY][i].arrTersPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitTer = true;
    16b8:	c3a05001 	movgt	r5, #1
                        hitTerPtr = GAME.objSpace.bins[constantY][i].arrTersPtr[j];
                        if (mainDy > 0)
                            locationTer = BOT;
                        else locationTer = TOP;
    16bc:	d3a09001 	movle	r9, #1
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
                    if(GAME.objSpace.bins[constantY][i].arrTersPtr[j] == NULL){
                        break;
                    }
                    else{
                        hitTer = true;
    16c0:	d1a05009 	movle	r5, r9
    16c4:	e2833038 	add	r3, r3, #56	; 0x38
        }
        if (mainDy > 0){
            constantY = nextPointValues[arrayInc].y + troopPtr->spritePtr->h;
        }
        
        for (i = nextPointValues[arrayInc].x; i < nextPointValues[arrayInc].x + troopPtr->spritePtr->b ; i++){
    16c8:	e153000c 	cmp	r3, r12
    16cc:	1affffee 	bne	168c <Mob_move+0x25c>
    16d0:	ea000000 	b	16d8 <Mob_move+0x2a8>
    16d4:	e3a05000 	mov	r5, #0
                }
            }
        }

        
        for (i = nextPointValues[arrayInc].y; i < nextPointValues[arrayInc].y + troopPtr->spritePtr->h; i++){
    16d8:	e59b0008 	ldr	r0, [r11, #8]
    16dc:	e0840000 	add	r0, r4, r0
    16e0:	e1540000 	cmp	r4, r0
    16e4:	aa000014 	bge	173c <Mob_move+0x30c>
            if(GAME.frameID == GAME.objSpace.bins[i][constantX].updatedFrameTersID){
    16e8:	e0688188 	rsb	r8, r8, r8, lsl #3
    16ec:	e1a08188 	lsl	r8, r8, #3
        ZeroPtr->y += ZeroPtr->dy;
    }

}

void Mob_move(Mob * troopPtr){
    16f0:	e08a4104 	add	r4, r10, r4, lsl #2
    16f4:	e08a0100 	add	r0, r10, r0, lsl #2
            }
        }

        
        for (i = nextPointValues[arrayInc].y; i < nextPointValues[arrayInc].y + troopPtr->spritePtr->h; i++){
            if(GAME.frameID == GAME.objSpace.bins[i][constantX].updatedFrameTersID){
    16f8:	e4943004 	ldr	r3, [r4], #4
    16fc:	e0833008 	add	r3, r3, r8
    1700:	e5931030 	ldr	r1, [r3, #48]	; 0x30
    1704:	e1520001 	cmp	r2, r1
    1708:	1a000009 	bne	1734 <Mob_move+0x304>
                for(j=0; j<GAME.objSpace.numOfTersInBin; j++){
    170c:	e35e0000 	cmp	lr, #0
    1710:	0a000007 	beq	1734 <Mob_move+0x304>
                    if(GAME.objSpace.bins[i][constantX].arrTersPtr[j] == NULL){
    1714:	e5933014 	ldr	r3, [r3, #20]
    1718:	e3530000 	cmp	r3, #0
    171c:	0a000004 	beq	1734 <Mob_move+0x304>
                                 locationTer = TOPRIGHT;
                             }
                             else if (locationTer == BOT){
                                 locationTer = BOTRIGHT;
                             }
                             locationTer = RIGHT;
    1720:	e59d3000 	ldr	r3, [sp]
    1724:	e3530000 	cmp	r3, #0
    1728:	d3a09004 	movle	r9, #4
    172c:	c3a09002 	movgt	r9, #2
    1730:	e3a05001 	mov	r5, #1
                }
            }
        }

        
        for (i = nextPointValues[arrayInc].y; i < nextPointValues[arrayInc].y + troopPtr->spritePtr->h; i++){
    1734:	e1540000 	cmp	r4, r0
    1738:	1affffee 	bne	16f8 <Mob_move+0x2c8>
                    }
                }
            }
        }

        if (hitTer) break;
    173c:	e3550000 	cmp	r5, #0
    1740:	1a000004 	bne	1758 <Mob_move+0x328>
    bool hitTer = false;
    int locationTer = 0;

    

    for (arrayInc = 0; arrayInc < size; arrayInc ++){
    1744:	e2877001 	add	r7, r7, #1
    1748:	e2866008 	add	r6, r6, #8
    174c:	e59d000c 	ldr	r0, [sp, #12]
    1750:	e1570000 	cmp	r7, r0
    1754:	1affffb7 	bne	1638 <Mob_move+0x208>

        if (hitTer) break;
    }


    switch (locationTer){
    1758:	e2899004 	add	r9, r9, #4
    175c:	e3590008 	cmp	r9, #8
    1760:	979ff109 	ldrls	pc, [pc, r9, lsl #2]
    1764:	ea000062 	b	18f4 <Mob_move+0x4c4>
    1768:	000018b8 	.word	0x000018b8
    176c:	0000187c 	.word	0x0000187c
    1770:	00001848 	.word	0x00001848
    1774:	00001814 	.word	0x00001814
    1778:	000018f4 	.word	0x000018f4
    177c:	0000178c 	.word	0x0000178c
    1780:	000017ac 	.word	0x000017ac
    1784:	000017cc 	.word	0x000017cc
    1788:	000017f4 	.word	0x000017f4
        case TOP:{
            troopPtr->y = nextPointValues[arrayInc].y;
    178c:	e59d1014 	ldr	r1, [sp, #20]
    1790:	e0817187 	add	r7, r1, r7, lsl #3
    1794:	e5973004 	ldr	r3, [r7, #4]
    1798:	e59d2008 	ldr	r2, [sp, #8]
    179c:	e582300c 	str	r3, [r2, #12]
            troopPtr->dy = 0;
    17a0:	e3a03000 	mov	r3, #0
    17a4:	e5823014 	str	r3, [r2, #20]
            break;
    17a8:	ea00005b 	b	191c <Mob_move+0x4ec>
        }
        case RIGHT:{
            troopPtr->x = nextPointValues[arrayInc].x ;
    17ac:	e59d0014 	ldr	r0, [sp, #20]
    17b0:	e7903187 	ldr	r3, [r0, r7, lsl #3]
    17b4:	e59d1008 	ldr	r1, [sp, #8]
    17b8:	e5813008 	str	r3, [r1, #8]
            troopPtr->dx = -troopPtr->dx;
    17bc:	e5913010 	ldr	r3, [r1, #16]
    17c0:	e2633000 	rsb	r3, r3, #0
    17c4:	e5813010 	str	r3, [r1, #16]
            break;
    17c8:	ea000053 	b	191c <Mob_move+0x4ec>
        }
        case BOT:{
            troopPtr->y = nextPointValues[arrayInc].y ;
    17cc:	e59d2014 	ldr	r2, [sp, #20]
    17d0:	e0827187 	add	r7, r2, r7, lsl #3
    17d4:	e5973004 	ldr	r3, [r7, #4]
    17d8:	e59d0008 	ldr	r0, [sp, #8]
    17dc:	e580300c 	str	r3, [r0, #12]
            troopPtr->dy = 0;
    17e0:	e3a03000 	mov	r3, #0
    17e4:	e5803014 	str	r3, [r0, #20]
            troopPtr->grounded = true;
    17e8:	e3a03001 	mov	r3, #1
    17ec:	e5c03018 	strb	r3, [r0, #24]
            break;
    17f0:	ea000049 	b	191c <Mob_move+0x4ec>
        }
        case LEFT:{
            troopPtr->x = nextPointValues[arrayInc].x;
    17f4:	e59d1014 	ldr	r1, [sp, #20]
    17f8:	e7913187 	ldr	r3, [r1, r7, lsl #3]
    17fc:	e59d2008 	ldr	r2, [sp, #8]
    1800:	e5823008 	str	r3, [r2, #8]
            troopPtr->dx = -troopPtr->dx;
    1804:	e5923010 	ldr	r3, [r2, #16]
    1808:	e2633000 	rsb	r3, r3, #0
    180c:	e5823010 	str	r3, [r2, #16]
            break;
    1810:	ea000041 	b	191c <Mob_move+0x4ec>
        }
        case TOPLEFT:{
            troopPtr->x = nextPointValues[arrayInc].x;
    1814:	e59d0014 	ldr	r0, [sp, #20]
    1818:	e0803187 	add	r3, r0, r7, lsl #3
    181c:	e7902187 	ldr	r2, [r0, r7, lsl #3]
    1820:	e59d1008 	ldr	r1, [sp, #8]
    1824:	e5812008 	str	r2, [r1, #8]
            troopPtr->y = nextPointValues[arrayInc].y;
    1828:	e5933004 	ldr	r3, [r3, #4]
    182c:	e581300c 	str	r3, [r1, #12]
            troopPtr->dx = -troopPtr->dx;
    1830:	e5913010 	ldr	r3, [r1, #16]
    1834:	e2633000 	rsb	r3, r3, #0
    1838:	e5813010 	str	r3, [r1, #16]
            troopPtr->dy= 0;
    183c:	e3a03000 	mov	r3, #0
    1840:	e5813014 	str	r3, [r1, #20]
            break;
    1844:	ea000034 	b	191c <Mob_move+0x4ec>
        }
        case TOPRIGHT:{
            troopPtr->x = nextPointValues[arrayInc].x ;
    1848:	e59d2014 	ldr	r2, [sp, #20]
    184c:	e0823187 	add	r3, r2, r7, lsl #3
    1850:	e7922187 	ldr	r2, [r2, r7, lsl #3]
    1854:	e59d0008 	ldr	r0, [sp, #8]
    1858:	e5802008 	str	r2, [r0, #8]
            troopPtr->dx = -troopPtr->dx;
    185c:	e5902010 	ldr	r2, [r0, #16]
    1860:	e2622000 	rsb	r2, r2, #0
    1864:	e5802010 	str	r2, [r0, #16]
            troopPtr->y = nextPointValues[arrayInc].y;
    1868:	e5933004 	ldr	r3, [r3, #4]
    186c:	e580300c 	str	r3, [r0, #12]
            troopPtr->dy = 0;
    1870:	e3a03000 	mov	r3, #0
    1874:	e5803014 	str	r3, [r0, #20]
            break;
    1878:	ea000027 	b	191c <Mob_move+0x4ec>
        }
        case BOTRIGHT:{
           troopPtr->y = nextPointValues[arrayInc].y ;
    187c:	e59d1014 	ldr	r1, [sp, #20]
    1880:	e0813187 	add	r3, r1, r7, lsl #3
    1884:	e5933004 	ldr	r3, [r3, #4]
    1888:	e59d2008 	ldr	r2, [sp, #8]
    188c:	e582300c 	str	r3, [r2, #12]
            troopPtr->dy = 0;
    1890:	e3a03000 	mov	r3, #0
    1894:	e5823014 	str	r3, [r2, #20]
            troopPtr->x = nextPointValues[arrayInc].x ;
    1898:	e7913187 	ldr	r3, [r1, r7, lsl #3]
    189c:	e5823008 	str	r3, [r2, #8]
            troopPtr->dx = -troopPtr->dx;
    18a0:	e5923010 	ldr	r3, [r2, #16]
    18a4:	e2633000 	rsb	r3, r3, #0
    18a8:	e5823010 	str	r3, [r2, #16]
            troopPtr->grounded = true;
    18ac:	e3a03001 	mov	r3, #1
    18b0:	e5c23018 	strb	r3, [r2, #24]
            break;
    18b4:	ea000018 	b	191c <Mob_move+0x4ec>
        }
        case BOTLEFT:{
            troopPtr->x = nextPointValues[arrayInc].x;
    18b8:	e59d0014 	ldr	r0, [sp, #20]
    18bc:	e0803187 	add	r3, r0, r7, lsl #3
    18c0:	e7902187 	ldr	r2, [r0, r7, lsl #3]
    18c4:	e59d1008 	ldr	r1, [sp, #8]
    18c8:	e5812008 	str	r2, [r1, #8]
            troopPtr->dx = -troopPtr->dx;
    18cc:	e5912010 	ldr	r2, [r1, #16]
    18d0:	e2622000 	rsb	r2, r2, #0
    18d4:	e5812010 	str	r2, [r1, #16]
            troopPtr->y = nextPointValues[arrayInc].y ;
    18d8:	e5933004 	ldr	r3, [r3, #4]
    18dc:	e581300c 	str	r3, [r1, #12]
            troopPtr->dy = 0;
    18e0:	e3a03000 	mov	r3, #0
    18e4:	e5813014 	str	r3, [r1, #20]
            troopPtr->grounded = true;
    18e8:	e3a03001 	mov	r3, #1
    18ec:	e5c13018 	strb	r3, [r1, #24]
            break;
    18f0:	ea000009 	b	191c <Mob_move+0x4ec>
        }
        default:{
            troopPtr->x += troopPtr->dx;
    18f4:	e59d3008 	ldr	r3, [sp, #8]
    18f8:	e5932008 	ldr	r2, [r3, #8]
    18fc:	e5933010 	ldr	r3, [r3, #16]
    1900:	e0823003 	add	r3, r2, r3
    1904:	e59d0008 	ldr	r0, [sp, #8]
    1908:	e5803008 	str	r3, [r0, #8]
            troopPtr->y += troopPtr->dy;
    190c:	e590200c 	ldr	r2, [r0, #12]
    1910:	e5903014 	ldr	r3, [r0, #20]
    1914:	e0823003 	add	r3, r2, r3
    1918:	e580300c 	str	r3, [r0, #12]
            break;
        }
    }
    free(nextPointValues);
    191c:	e59d0014 	ldr	r0, [sp, #20]
    1920:	eb0005ea 	bl	30d0 <free>

}
    1924:	e28dd02c 	add	sp, sp, #44	; 0x2c
    1928:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000192c <Space_update>:

void Space_update(){
    192c:	e92d4070 	push	{r4, r5, r6, lr}
    MainChar_updateBins(&GAME.Zero);
    1930:	e3064e64 	movw	r4, #28260	; 0x6e64
    1934:	e3404000 	movt	r4, #0
    1938:	e1a00004 	mov	r0, r4
    193c:	ebfffb27 	bl	5e0 <MainChar_updateBins>
    unsigned i,j,k;
    for(i=0; i<GAME.objVisible.maxNumOfMobs; i++){
    1940:	e5943060 	ldr	r3, [r4, #96]	; 0x60
    1944:	e3530000 	cmp	r3, #0
    1948:	0a00000b 	beq	197c <Space_update+0x50>
    194c:	e2845034 	add	r5, r4, #52	; 0x34
    1950:	e3a04000 	mov	r4, #0
    1954:	e3066e64 	movw	r6, #28260	; 0x6e64
    1958:	e3406000 	movt	r6, #0
        if(GAME.objVisible.arrMobsPtr[i] == NULL) continue;
    195c:	e5b50004 	ldr	r0, [r5, #4]!
    1960:	e3500000 	cmp	r0, #0
    1964:	0a000000 	beq	196c <Space_update+0x40>
        Mobs_updateBins(GAME.objVisible.arrMobsPtr[i]);
    1968:	ebfffb82 	bl	778 <Mobs_updateBins>
}

void Space_update(){
    MainChar_updateBins(&GAME.Zero);
    unsigned i,j,k;
    for(i=0; i<GAME.objVisible.maxNumOfMobs; i++){
    196c:	e2844001 	add	r4, r4, #1
    1970:	e5963060 	ldr	r3, [r6, #96]	; 0x60
    1974:	e1530004 	cmp	r3, r4
    1978:	8afffff7 	bhi	195c <Space_update+0x30>
        if(GAME.objVisible.arrMobsPtr[i] == NULL) continue;
        Mobs_updateBins(GAME.objVisible.arrMobsPtr[i]);
    }

    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    197c:	e3063e64 	movw	r3, #28260	; 0x6e64
    1980:	e3403000 	movt	r3, #0
    1984:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
    1988:	e3530000 	cmp	r3, #0
    198c:	08bd8070 	popeq	{r4, r5, r6, pc}
    1990:	e59f502c 	ldr	r5, [pc, #44]	; 19c4 <Space_update+0x98>
    1994:	e3a04000 	mov	r4, #0
    1998:	e3066e64 	movw	r6, #28260	; 0x6e64
    199c:	e3406000 	movt	r6, #0
        Terrain* curTerPtr =  GAME.objVisible.arrTersPtr[i];
    19a0:	e5b50004 	ldr	r0, [r5, #4]!
        if(curTerPtr == NULL) continue;
    19a4:	e3500000 	cmp	r0, #0
    19a8:	0a000000 	beq	19b0 <Space_update+0x84>
        
        Terrain_updateBins(curTerPtr);
    19ac:	ebfffbd5 	bl	908 <Terrain_updateBins>
    for(i=0; i<GAME.objVisible.maxNumOfMobs; i++){
        if(GAME.objVisible.arrMobsPtr[i] == NULL) continue;
        Mobs_updateBins(GAME.objVisible.arrMobsPtr[i]);
    }

    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    19b0:	e2844001 	add	r4, r4, #1
    19b4:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
    19b8:	e1530004 	cmp	r3, r4
    19bc:	8afffff7 	bhi	19a0 <Space_update+0x74>
    19c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    19c4:	00006ec4 	.word	0x00006ec4

000019c8 <Visible_update>:
        
        Terrain_updateBins(curTerPtr);
    }
}

void Visible_update(){
    19c8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    
    unsigned i,j,k;
    //Remove mobs not visible anymore:
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    19cc:	e3063e64 	movw	r3, #28260	; 0x6e64
    19d0:	e3403000 	movt	r3, #0
    19d4:	e5933060 	ldr	r3, [r3, #96]	; 0x60
    19d8:	e3530000 	cmp	r3, #0
    19dc:	0a00000f 	beq	1a20 <Visible_update+0x58>
    19e0:	e59f12c4 	ldr	r1, [pc, #708]	; 1cac <Visible_update+0x2e4>
    19e4:	e3a02000 	mov	r2, #0
        if(GAME.objVisible.arrMobsPtr[i] == NULL) continue;
        //Remove from visible:
        if(/*GAME.objVisible.arrMobsPtr[i]->killed ||*/ !GAME.objVisible.arrMobsPtr[i]->onScreen){
            GAME.objVisible.arrMobsPtr[i]->inVisibleVector = false;
    19e8:	e1a04002 	mov	r4, r2

void Visible_update(){
    
    unsigned i,j,k;
    //Remove mobs not visible anymore:
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    19ec:	e306ce64 	movw	r12, #28260	; 0x6e64
    19f0:	e340c000 	movt	r12, #0
        if(GAME.objVisible.arrMobsPtr[i] == NULL) continue;
    19f4:	e4913004 	ldr	r3, [r1], #4
    19f8:	e3530000 	cmp	r3, #0
    19fc:	0a000003 	beq	1a10 <Visible_update+0x48>
        //Remove from visible:
        if(/*GAME.objVisible.arrMobsPtr[i]->killed ||*/ !GAME.objVisible.arrMobsPtr[i]->onScreen){
    1a00:	e5d30005 	ldrb	r0, [r3, #5]
    1a04:	e3500000 	cmp	r0, #0
            GAME.objVisible.arrMobsPtr[i]->inVisibleVector = false;
    1a08:	05c34006 	strbeq	r4, [r3, #6]
            GAME.objVisible.arrMobsPtr[i] = NULL;
    1a0c:	05014004 	streq	r4, [r1, #-4]

void Visible_update(){
    
    unsigned i,j,k;
    //Remove mobs not visible anymore:
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    1a10:	e2822001 	add	r2, r2, #1
    1a14:	e59c3060 	ldr	r3, [r12, #96]	; 0x60
    1a18:	e1530002 	cmp	r3, r2
    1a1c:	8afffff4 	bhi	19f4 <Visible_update+0x2c>
            GAME.objVisible.arrMobsPtr[i] = NULL;
            continue;
        }
    }
    //Remove ters not visible anymore:
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    1a20:	e3063e64 	movw	r3, #28260	; 0x6e64
    1a24:	e3403000 	movt	r3, #0
    1a28:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
    1a2c:	e3530000 	cmp	r3, #0
    1a30:	0a00000f 	beq	1a74 <Visible_update+0xac>
    1a34:	e59f1274 	ldr	r1, [pc, #628]	; 1cb0 <Visible_update+0x2e8>
    1a38:	e3a02000 	mov	r2, #0
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
        //Remove from visible:
        if(!GAME.objVisible.arrTersPtr[i]->onScreen){
            GAME.objVisible.arrTersPtr[i]->inVisibleVector = false;
    1a3c:	e1a04002 	mov	r4, r2
            GAME.objVisible.arrMobsPtr[i] = NULL;
            continue;
        }
    }
    //Remove ters not visible anymore:
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    1a40:	e306ce64 	movw	r12, #28260	; 0x6e64
    1a44:	e340c000 	movt	r12, #0
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
    1a48:	e4913004 	ldr	r3, [r1], #4
    1a4c:	e3530000 	cmp	r3, #0
    1a50:	0a000003 	beq	1a64 <Visible_update+0x9c>
        //Remove from visible:
        if(!GAME.objVisible.arrTersPtr[i]->onScreen){
    1a54:	e5d30004 	ldrb	r0, [r3, #4]
    1a58:	e3500000 	cmp	r0, #0
            GAME.objVisible.arrTersPtr[i]->inVisibleVector = false;
    1a5c:	05c34005 	strbeq	r4, [r3, #5]
            GAME.objVisible.arrTersPtr[i] = NULL;
    1a60:	05014004 	streq	r4, [r1, #-4]
            GAME.objVisible.arrMobsPtr[i] = NULL;
            continue;
        }
    }
    //Remove ters not visible anymore:
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    1a64:	e2822001 	add	r2, r2, #1
    1a68:	e59c30dc 	ldr	r3, [r12, #220]	; 0xdc
    1a6c:	e1530002 	cmp	r3, r2
    1a70:	8afffff4 	bhi	1a48 <Visible_update+0x80>
            GAME.objVisible.arrTersPtr[i] = NULL;
            continue;
        }
    }
    //Add Mobs that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
    1a74:	e3063e64 	movw	r3, #28260	; 0x6e64
    1a78:	e3403000 	movt	r3, #0
    1a7c:	e593a030 	ldr	r10, [r3, #48]	; 0x30
    1a80:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    1a84:	e15a0003 	cmp	r10, r3
    1a88:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    1a8c:	e1a0720a 	lsl	r7, r10, #4
        for(j=0; j<GAME.objMap[k].numOfMobs; j++){//Loop through mobs in the map
    1a90:	e3066e64 	movw	r6, #28260	; 0x6e64
    1a94:	e3406000 	movt	r6, #0
    1a98:	e3a08000 	mov	r8, #0
                        break;
                    }
                    //else continue;
                }
                if(GAME.objVisible.arrMobsPtr[i]->inVisibleVector == false)
                    printf("No space for a new mob.\n");
    1a9c:	e306b564 	movw	r11, #25956	; 0x6564
    1aa0:	e340b000 	movt	r11, #0
            if(GAME.objMap[k].arrMobs[j].onScreen && !GAME.objMap[k].arrMobs[j].inVisibleVector){
                for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){ //Find a spot in visible vector
                    if(GAME.objVisible.arrMobsPtr[i] == NULL){
                        //Add the mob to the visible
                        GAME.objVisible.arrMobsPtr[i] = &GAME.objMap[k].arrMobs[j];
                        GAME.objVisible.arrMobsPtr[i]->inVisibleVector = true;
    1aa4:	e3a09001 	mov	r9, #1
    1aa8:	ea000031 	b	1b74 <Visible_update+0x1ac>
        }
    }
    //Add Mobs that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
        for(j=0; j<GAME.objMap[k].numOfMobs; j++){//Loop through mobs in the map
            if(GAME.objMap[k].arrMobs[j].onScreen && !GAME.objMap[k].arrMobs[j].inVisibleVector){
    1aac:	e593c000 	ldr	r12, [r3]
    1ab0:	e08cc005 	add	r12, r12, r5
    1ab4:	e5dc3005 	ldrb	r3, [r12, #5]
    1ab8:	e3530000 	cmp	r3, #0
    1abc:	0a000020 	beq	1b44 <Visible_update+0x17c>
    1ac0:	e5dc3006 	ldrb	r3, [r12, #6]
    1ac4:	e3530000 	cmp	r3, #0
    1ac8:	1a00001d 	bne	1b44 <Visible_update+0x17c>
                for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){ //Find a spot in visible vector
    1acc:	e5960060 	ldr	r0, [r6, #96]	; 0x60
    1ad0:	e3500000 	cmp	r0, #0
    1ad4:	0a000012 	beq	1b24 <Visible_update+0x15c>
                    if(GAME.objVisible.arrMobsPtr[i] == NULL){
    1ad8:	e5963038 	ldr	r3, [r6, #56]	; 0x38
    1adc:	e3530000 	cmp	r3, #0
    1ae0:	12862038 	addne	r2, r6, #56	; 0x38
    1ae4:	11a03008 	movne	r3, r8
    1ae8:	1a000009 	bne	1b14 <Visible_update+0x14c>
    1aec:	ea000003 	b	1b00 <Visible_update+0x138>
    1af0:	e5b21004 	ldr	r1, [r2, #4]!
    1af4:	e3510000 	cmp	r1, #0
    1af8:	1a000005 	bne	1b14 <Visible_update+0x14c>
    1afc:	ea000000 	b	1b04 <Visible_update+0x13c>
    1b00:	e1a03008 	mov	r3, r8
                        //Add the mob to the visible
                        GAME.objVisible.arrMobsPtr[i] = &GAME.objMap[k].arrMobs[j];
    1b04:	e283200e 	add	r2, r3, #14
    1b08:	e786c102 	str	r12, [r6, r2, lsl #2]
                        GAME.objVisible.arrMobsPtr[i]->inVisibleVector = true;
    1b0c:	e5cc9006 	strb	r9, [r12, #6]
                        break;
    1b10:	ea000004 	b	1b28 <Visible_update+0x160>
    }
    //Add Mobs that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
        for(j=0; j<GAME.objMap[k].numOfMobs; j++){//Loop through mobs in the map
            if(GAME.objMap[k].arrMobs[j].onScreen && !GAME.objMap[k].arrMobs[j].inVisibleVector){
                for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){ //Find a spot in visible vector
    1b14:	e2833001 	add	r3, r3, #1
    1b18:	e1530000 	cmp	r3, r0
    1b1c:	1afffff3 	bne	1af0 <Visible_update+0x128>
    1b20:	ea000000 	b	1b28 <Visible_update+0x160>
    1b24:	e1a03008 	mov	r3, r8
                        GAME.objVisible.arrMobsPtr[i]->inVisibleVector = true;
                        break;
                    }
                    //else continue;
                }
                if(GAME.objVisible.arrMobsPtr[i]->inVisibleVector == false)
    1b28:	e283300e 	add	r3, r3, #14
    1b2c:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    1b30:	e5d33006 	ldrb	r3, [r3, #6]
    1b34:	e3530000 	cmp	r3, #0
    1b38:	1a000001 	bne	1b44 <Visible_update+0x17c>
                    printf("No space for a new mob.\n");
    1b3c:	e1a0000b 	mov	r0, r11
    1b40:	eb00075c 	bl	38b8 <puts>
            continue;
        }
    }
    //Add Mobs that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
        for(j=0; j<GAME.objMap[k].numOfMobs; j++){//Loop through mobs in the map
    1b44:	e2844001 	add	r4, r4, #1
    1b48:	e5963028 	ldr	r3, [r6, #40]	; 0x28
    1b4c:	e0833007 	add	r3, r3, r7
    1b50:	e2855028 	add	r5, r5, #40	; 0x28
    1b54:	e5932004 	ldr	r2, [r3, #4]
    1b58:	e1520004 	cmp	r2, r4
    1b5c:	8affffd2 	bhi	1aac <Visible_update+0xe4>
            GAME.objVisible.arrTersPtr[i] = NULL;
            continue;
        }
    }
    //Add Mobs that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
    1b60:	e28aa001 	add	r10, r10, #1
    1b64:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    1b68:	e2877010 	add	r7, r7, #16
    1b6c:	e153000a 	cmp	r3, r10
    1b70:	3a000007 	bcc	1b94 <Visible_update+0x1cc>
        for(j=0; j<GAME.objMap[k].numOfMobs; j++){//Loop through mobs in the map
    1b74:	e5963028 	ldr	r3, [r6, #40]	; 0x28
    1b78:	e0833007 	add	r3, r3, r7
    1b7c:	e5932004 	ldr	r2, [r3, #4]
    1b80:	e3520000 	cmp	r2, #0
    1b84:	11a05008 	movne	r5, r8
    1b88:	11a04008 	movne	r4, r8
    1b8c:	1affffc6 	bne	1aac <Visible_update+0xe4>
    1b90:	eafffff2 	b	1b60 <Visible_update+0x198>
                    printf("No space for a new mob.\n");
            }
        }
    }
    //Add ters that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
    1b94:	e3062e64 	movw	r2, #28260	; 0x6e64
    1b98:	e3402000 	movt	r2, #0
    1b9c:	e592a030 	ldr	r10, [r2, #48]	; 0x30
    1ba0:	e15a0003 	cmp	r10, r3
    1ba4:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    1ba8:	e1a0720a 	lsl	r7, r10, #4
        for(j=0; j<GAME.objMap[k].numOfTers; j++){//Loop through ters in the map
    1bac:	e1a06002 	mov	r6, r2
    1bb0:	e3a08000 	mov	r8, #0
                        break;
                    }
                    //else continue;
                }
                if(GAME.objVisible.arrTersPtr[i]->inVisibleVector == false)
                    printf("No space for a new ter.\n");
    1bb4:	e306b57c 	movw	r11, #25980	; 0x657c
    1bb8:	e340b000 	movt	r11, #0
            if(GAME.objMap[k].arrTers[j].onScreen && !GAME.objMap[k].arrTers[j].inVisibleVector){
                for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){ //Find a spot in visible vector
                    if(GAME.objVisible.arrTersPtr[i] == NULL){
                        //Add the ters to the visible
                        GAME.objVisible.arrTersPtr[i] = &GAME.objMap[k].arrTers[j];
                        GAME.objVisible.arrTersPtr[i]->inVisibleVector = true;
    1bbc:	e3a09001 	mov	r9, #1
    1bc0:	ea000031 	b	1c8c <Visible_update+0x2c4>
        }
    }
    //Add ters that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
        for(j=0; j<GAME.objMap[k].numOfTers; j++){//Loop through ters in the map
            if(GAME.objMap[k].arrTers[j].onScreen && !GAME.objMap[k].arrTers[j].inVisibleVector){
    1bc4:	e593c008 	ldr	r12, [r3, #8]
    1bc8:	e08cc005 	add	r12, r12, r5
    1bcc:	e5dc3004 	ldrb	r3, [r12, #4]
    1bd0:	e3530000 	cmp	r3, #0
    1bd4:	0a000020 	beq	1c5c <Visible_update+0x294>
    1bd8:	e5dc3005 	ldrb	r3, [r12, #5]
    1bdc:	e3530000 	cmp	r3, #0
    1be0:	1a00001d 	bne	1c5c <Visible_update+0x294>
                for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){ //Find a spot in visible vector
    1be4:	e59600dc 	ldr	r0, [r6, #220]	; 0xdc
    1be8:	e3500000 	cmp	r0, #0
    1bec:	0a000012 	beq	1c3c <Visible_update+0x274>
                    if(GAME.objVisible.arrTersPtr[i] == NULL){
    1bf0:	e5963064 	ldr	r3, [r6, #100]	; 0x64
    1bf4:	e3530000 	cmp	r3, #0
    1bf8:	12862064 	addne	r2, r6, #100	; 0x64
    1bfc:	11a03008 	movne	r3, r8
    1c00:	1a000009 	bne	1c2c <Visible_update+0x264>
    1c04:	ea000003 	b	1c18 <Visible_update+0x250>
    1c08:	e5b21004 	ldr	r1, [r2, #4]!
    1c0c:	e3510000 	cmp	r1, #0
    1c10:	1a000005 	bne	1c2c <Visible_update+0x264>
    1c14:	ea000000 	b	1c1c <Visible_update+0x254>
    1c18:	e1a03008 	mov	r3, r8
                        //Add the ters to the visible
                        GAME.objVisible.arrTersPtr[i] = &GAME.objMap[k].arrTers[j];
    1c1c:	e0862103 	add	r2, r6, r3, lsl #2
    1c20:	e582c064 	str	r12, [r2, #100]	; 0x64
                        GAME.objVisible.arrTersPtr[i]->inVisibleVector = true;
    1c24:	e5cc9005 	strb	r9, [r12, #5]
                        break;
    1c28:	ea000004 	b	1c40 <Visible_update+0x278>
    }
    //Add ters that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
        for(j=0; j<GAME.objMap[k].numOfTers; j++){//Loop through ters in the map
            if(GAME.objMap[k].arrTers[j].onScreen && !GAME.objMap[k].arrTers[j].inVisibleVector){
                for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){ //Find a spot in visible vector
    1c2c:	e2833001 	add	r3, r3, #1
    1c30:	e1530000 	cmp	r3, r0
    1c34:	1afffff3 	bne	1c08 <Visible_update+0x240>
    1c38:	ea000000 	b	1c40 <Visible_update+0x278>
    1c3c:	e1a03008 	mov	r3, r8
                        GAME.objVisible.arrTersPtr[i]->inVisibleVector = true;
                        break;
                    }
                    //else continue;
                }
                if(GAME.objVisible.arrTersPtr[i]->inVisibleVector == false)
    1c40:	e0863103 	add	r3, r6, r3, lsl #2
    1c44:	e5933064 	ldr	r3, [r3, #100]	; 0x64
    1c48:	e5d33005 	ldrb	r3, [r3, #5]
    1c4c:	e3530000 	cmp	r3, #0
    1c50:	1a000001 	bne	1c5c <Visible_update+0x294>
                    printf("No space for a new ter.\n");
    1c54:	e1a0000b 	mov	r0, r11
    1c58:	eb000716 	bl	38b8 <puts>
            }
        }
    }
    //Add ters that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
        for(j=0; j<GAME.objMap[k].numOfTers; j++){//Loop through ters in the map
    1c5c:	e2844001 	add	r4, r4, #1
    1c60:	e5963028 	ldr	r3, [r6, #40]	; 0x28
    1c64:	e0833007 	add	r3, r3, r7
    1c68:	e2855014 	add	r5, r5, #20
    1c6c:	e593200c 	ldr	r2, [r3, #12]
    1c70:	e1520004 	cmp	r2, r4
    1c74:	8affffd2 	bhi	1bc4 <Visible_update+0x1fc>
                    printf("No space for a new mob.\n");
            }
        }
    }
    //Add ters that are visible now:
    for(k=GAME.mapLeftIdx; k<=GAME.mapRightIdx; k++){//Loop through map
    1c78:	e28aa001 	add	r10, r10, #1
    1c7c:	e2877010 	add	r7, r7, #16
    1c80:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    1c84:	e153000a 	cmp	r3, r10
    1c88:	38bd8ff8 	popcc	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        for(j=0; j<GAME.objMap[k].numOfTers; j++){//Loop through ters in the map
    1c8c:	e5963028 	ldr	r3, [r6, #40]	; 0x28
    1c90:	e0833007 	add	r3, r3, r7
    1c94:	e593200c 	ldr	r2, [r3, #12]
    1c98:	e3520000 	cmp	r2, #0
    1c9c:	11a05008 	movne	r5, r8
    1ca0:	11a04008 	movne	r4, r8
    1ca4:	1affffc6 	bne	1bc4 <Visible_update+0x1fc>
    1ca8:	eafffff2 	b	1c78 <Visible_update+0x2b0>
    1cac:	00006e9c 	.word	0x00006e9c
    1cb0:	00006ec8 	.word	0x00006ec8

00001cb4 <initializeGame>:
            }
        }
    }
}

void initializeGame(){
    1cb4:	e92d4010 	push	{r4, lr}
    declareSprites();
    1cb8:	eb0003a0 	bl	2b40 <declareSprites>
    GAME.spritesArr = allSprites;  
    1cbc:	e3064e64 	movw	r4, #28260	; 0x6e64
    1cc0:	e3404000 	movt	r4, #0
    1cc4:	e3062f7c 	movw	r2, #28540	; 0x6f7c
    1cc8:	e3402000 	movt	r2, #0
    1ccc:	e58420fc 	str	r2, [r4, #252]	; 0xfc
    GAME.Zero.health = 10;
    1cd0:	e3a0300a 	mov	r3, #10
    1cd4:	e5843000 	str	r3, [r4]
    GAME.Zero.x = SCREEN_X/2+1 - (GAME.spritesArr[OBJECT_ID_ZERO].b+1)/2;
    1cd8:	e5923004 	ldr	r3, [r2, #4]
    1cdc:	e2833001 	add	r3, r3, #1
    1ce0:	e0833fa3 	add	r3, r3, r3, lsr #31
    1ce4:	e1a030c3 	asr	r3, r3, #1
    1ce8:	e26330a1 	rsb	r3, r3, #161	; 0xa1
    1cec:	e5843004 	str	r3, [r4, #4]
    GAME.Zero.y = GAME_FLOOR - GAME.spritesArr[OBJECT_ID_ZERO].h;
    1cf0:	e5923008 	ldr	r3, [r2, #8]
    1cf4:	e26330c8 	rsb	r3, r3, #200	; 0xc8
    1cf8:	e5843008 	str	r3, [r4, #8]
    GAME.Zero.dx = 0;
    1cfc:	e3a03000 	mov	r3, #0
    1d00:	e584300c 	str	r3, [r4, #12]
    GAME.Zero.dy = 0;
    1d04:	e5843010 	str	r3, [r4, #16]
    GAME.Zero.jumpHeight = 20;
    1d08:	e3a01014 	mov	r1, #20
    1d0c:	e5841014 	str	r1, [r4, #20]
    GAME.Zero.hasAbility1 = false;
    1d10:	e5c43019 	strb	r3, [r4, #25]
    GAME.Zero.hasAbility2 = false; 
    1d14:	e5c4301a 	strb	r3, [r4, #26]
    GAME.Zero.spritePtr = &GAME.spritesArr[OBJECT_ID_ZERO];  
    1d18:	e584201c 	str	r2, [r4, #28]
	GAME.Zero.grounded = false;
    1d1c:	e5c43018 	strb	r3, [r4, #24]
    
    GAME.topLeft.x = 0;
    1d20:	e5843020 	str	r3, [r4, #32]
    GAME.topLeft.y = 0;
    1d24:	e5843024 	str	r3, [r4, #36]	; 0x24
    GAME.mapLeftIdx = 0/MAP_STEP;
    1d28:	e5843030 	str	r3, [r4, #48]	; 0x30
    GAME.mapRightIdx = ( (0+(SCREEN_X-1))/MAP_STEP );
    1d2c:	e3a0301f 	mov	r3, #31
    1d30:	e5843034 	str	r3, [r4, #52]	; 0x34
    
    GAME.mapSize = (GAME_SIZE_X-1)/MAP_STEP + 1;
    1d34:	e3a03096 	mov	r3, #150	; 0x96
    1d38:	e584302c 	str	r3, [r4, #44]	; 0x2c
    GAME.objMap = (Map *)malloc(GAME.mapSize *sizeof(Map));
    1d3c:	e3a00e96 	mov	r0, #2400	; 0x960
    1d40:	eb0004da 	bl	30b0 <malloc>
    1d44:	e5840028 	str	r0, [r4, #40]	; 0x28
    
    unsigned i;
    for (i = 0; i < GAME.mapSize; i++){
    1d48:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    1d4c:	e3530000 	cmp	r3, #0
    1d50:	0a00000d 	beq	1d8c <initializeGame+0xd8>
    1d54:	e3a03000 	mov	r3, #0
        GAME.objMap[i].numOfTers = 0;
    1d58:	e1a02004 	mov	r2, r4
    1d5c:	e1a00003 	mov	r0, r3
    1d60:	e1a01203 	lsl	r1, r3, #4
    1d64:	e592c028 	ldr	r12, [r2, #40]	; 0x28
    1d68:	e08cc001 	add	r12, r12, r1
    1d6c:	e58c000c 	str	r0, [r12, #12]
        GAME.objMap[i].numOfMobs = 0;
    1d70:	e592c028 	ldr	r12, [r2, #40]	; 0x28
    1d74:	e08c1001 	add	r1, r12, r1
    1d78:	e5810004 	str	r0, [r1, #4]
    
    GAME.mapSize = (GAME_SIZE_X-1)/MAP_STEP + 1;
    GAME.objMap = (Map *)malloc(GAME.mapSize *sizeof(Map));
    
    unsigned i;
    for (i = 0; i < GAME.mapSize; i++){
    1d7c:	e2833001 	add	r3, r3, #1
    1d80:	e592102c 	ldr	r1, [r2, #44]	; 0x2c
    1d84:	e1510003 	cmp	r1, r3
    1d88:	8afffff4 	bhi	1d60 <initializeGame+0xac>
        GAME.objMap[i].numOfTers = 0;
        GAME.objMap[i].numOfMobs = 0;
    }
    
    //function to populate the MAP
    Map_create();
    1d8c:	ebfff9a1 	bl	418 <Map_create>
    //Visible:
    GAME.objVisible.maxNumOfMobs = MAX_NUMBER_MOBS_VISIBLE;
    1d90:	e3061e64 	movw	r1, #28260	; 0x6e64
    1d94:	e3401000 	movt	r1, #0
    1d98:	e3a0300a 	mov	r3, #10
    1d9c:	e5813060 	str	r3, [r1, #96]	; 0x60
    GAME.objVisible.maxNumOfTers = MAX_NUMBER_TERRAINS_VISIBLE;
    1da0:	e3a0301e 	mov	r3, #30
    1da4:	e58130dc 	str	r3, [r1, #220]	; 0xdc
    1da8:	e2813034 	add	r3, r1, #52	; 0x34
            }
        }
    }
}

void initializeGame(){
    1dac:	e281005c 	add	r0, r1, #92	; 0x5c
    Map_create();
    //Visible:
    GAME.objVisible.maxNumOfMobs = MAX_NUMBER_MOBS_VISIBLE;
    GAME.objVisible.maxNumOfTers = MAX_NUMBER_TERRAINS_VISIBLE;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
        GAME.objVisible.arrMobsPtr[i] = NULL;
    1db0:	e3a02000 	mov	r2, #0
    1db4:	e5a32004 	str	r2, [r3, #4]!
    //function to populate the MAP
    Map_create();
    //Visible:
    GAME.objVisible.maxNumOfMobs = MAX_NUMBER_MOBS_VISIBLE;
    GAME.objVisible.maxNumOfTers = MAX_NUMBER_TERRAINS_VISIBLE;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    1db8:	e1530000 	cmp	r3, r0
    1dbc:	1afffffc 	bne	1db4 <initializeGame+0x100>
    1dc0:	e59f309c 	ldr	r3, [pc, #156]	; 1e64 <initializeGame+0x1b0>
            }
        }
    }
}

void initializeGame(){
    1dc4:	e28110d8 	add	r1, r1, #216	; 0xd8
    GAME.objVisible.maxNumOfTers = MAX_NUMBER_TERRAINS_VISIBLE;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
        GAME.objVisible.arrMobsPtr[i] = NULL;
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
        GAME.objVisible.arrTersPtr[i] = NULL;
    1dc8:	e3a02000 	mov	r2, #0
    1dcc:	e5a32004 	str	r2, [r3, #4]!
    GAME.objVisible.maxNumOfMobs = MAX_NUMBER_MOBS_VISIBLE;
    GAME.objVisible.maxNumOfTers = MAX_NUMBER_TERRAINS_VISIBLE;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
        GAME.objVisible.arrMobsPtr[i] = NULL;
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    1dd0:	e1530001 	cmp	r3, r1
    1dd4:	1afffffc 	bne	1dcc <initializeGame+0x118>
        GAME.objVisible.arrTersPtr[i] = NULL;
    }
    
    GAME.frameID = 0;
    1dd8:	e3063e64 	movw	r3, #28260	; 0x6e64
    1ddc:	e3403000 	movt	r3, #0
    1de0:	e3a04000 	mov	r4, #0
    1de4:	e58340f8 	str	r4, [r3, #248]	; 0xf8
    
    GAME.objSpace.base = GAME_SIZE_X;
    1de8:	e30025dc 	movw	r2, #1500	; 0x5dc
    1dec:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    GAME.objSpace.height = GAME_SIZE_Y;
    1df0:	e3a020f0 	mov	r2, #240	; 0xf0
    1df4:	e58320e8 	str	r2, [r3, #232]	; 0xe8
    GAME.objSpace.numOfMobsInBin = MAX_NUMBER_MOBS_BIN;
    1df8:	e3a02005 	mov	r2, #5
    1dfc:	e58320ec 	str	r2, [r3, #236]	; 0xec
    GAME.objSpace.numOfTersInBin = MAX_NUMBER_TERRAINS_BIN;
    1e00:	e58320f0 	str	r2, [r3, #240]	; 0xf0
    GAME.objSpace.numOfMainCharsInBin = MAX_NUMBER_MAINCHARACTER_BIN;
    1e04:	e3a02001 	mov	r2, #1
    1e08:	e58320f4 	str	r2, [r3, #244]	; 0xf4
    Space_create();
    1e0c:	ebfff9af 	bl	4d0 <Space_create>
    
    leftKey.pressed = false;
    1e10:	e306cf6c 	movw	r12, #28524	; 0x6f6c
    1e14:	e340c000 	movt	r12, #0
    1e18:	e5cc4000 	strb	r4, [r12]
    rightKey.pressed = false;
    1e1c:	e3060f74 	movw	r0, #28532	; 0x6f74
    1e20:	e3400000 	movt	r0, #0
    1e24:	e5c04000 	strb	r4, [r0]
    upKey.pressed = false;
    1e28:	e3061f68 	movw	r1, #28520	; 0x6f68
    1e2c:	e3401000 	movt	r1, #0
    1e30:	e5c14000 	strb	r4, [r1]
    downKey.pressed = false;
    1e34:	e3062f70 	movw	r2, #28528	; 0x6f70
    1e38:	e3402000 	movt	r2, #0
    1e3c:	e5c24000 	strb	r4, [r2]
    spaceKey.pressed = false;
    1e40:	e3063f78 	movw	r3, #28536	; 0x6f78
    1e44:	e3403000 	movt	r3, #0
    1e48:	e5c34000 	strb	r4, [r3]
    leftKey.released = false;
    1e4c:	e5cc4001 	strb	r4, [r12, #1]
    rightKey.released = false;
    1e50:	e5c04001 	strb	r4, [r0, #1]
    upKey.released = false;
    1e54:	e5c14001 	strb	r4, [r1, #1]
    downKey.released = false;
    1e58:	e5c24001 	strb	r4, [r2, #1]
    spaceKey.released = false;
    1e5c:	e5c34001 	strb	r4, [r3, #1]
    1e60:	e8bd8010 	pop	{r4, pc}
    1e64:	00006ec4 	.word	0x00006ec4

00001e68 <Visible_draw>:
}

void Visible_draw(){
    1e68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    1e6c:	e24dd024 	sub	sp, sp, #36	; 0x24
    unsigned i;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    1e70:	e3063e64 	movw	r3, #28260	; 0x6e64
    1e74:	e3403000 	movt	r3, #0
    1e78:	e5933060 	ldr	r3, [r3, #96]	; 0x60
    1e7c:	e3530000 	cmp	r3, #0
    1e80:	0a000016 	beq	1ee0 <Visible_draw+0x78>
    1e84:	e59f60e4 	ldr	r6, [pc, #228]	; 1f70 <Visible_draw+0x108>
    1e88:	e3a05000 	mov	r5, #0
        Mob* curMobPtr =  GAME.objVisible.arrMobsPtr[i];
        if(curMobPtr == NULL) continue;
        
        Sprites_draw_mob(*curMobPtr, GAME.topLeft);
    1e8c:	e3067e64 	movw	r7, #28260	; 0x6e64
    1e90:	e3407000 	movt	r7, #0
}

void Visible_draw(){
    unsigned i;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
        Mob* curMobPtr =  GAME.objVisible.arrMobsPtr[i];
    1e94:	e5b64004 	ldr	r4, [r6, #4]!
        if(curMobPtr == NULL) continue;
    1e98:	e3540000 	cmp	r4, #0
    1e9c:	0a00000b 	beq	1ed0 <Visible_draw+0x68>
        
        Sprites_draw_mob(*curMobPtr, GAME.topLeft);
    1ea0:	e28d3018 	add	r3, sp, #24
    1ea4:	e2872020 	add	r2, r7, #32
    1ea8:	e8920003 	ldm	r2, {r0, r1}
    1eac:	e8830003 	stm	r3, {r0, r1}
    1eb0:	e1a0c00d 	mov	r12, sp
    1eb4:	e284e010 	add	lr, r4, #16
    1eb8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1ebc:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
    1ec0:	e89e0003 	ldm	lr, {r0, r1}
    1ec4:	e88c0003 	stm	r12, {r0, r1}
    1ec8:	e894000f 	ldm	r4, {r0, r1, r2, r3}
    1ecc:	eb00015f 	bl	2450 <Sprites_draw_mob>
    spaceKey.released = false;
}

void Visible_draw(){
    unsigned i;
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    1ed0:	e2855001 	add	r5, r5, #1
    1ed4:	e5973060 	ldr	r3, [r7, #96]	; 0x60
    1ed8:	e1530005 	cmp	r3, r5
    1edc:	8affffec 	bhi	1e94 <Visible_draw+0x2c>
        Mob* curMobPtr =  GAME.objVisible.arrMobsPtr[i];
        if(curMobPtr == NULL) continue;
        
        Sprites_draw_mob(*curMobPtr, GAME.topLeft);
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    1ee0:	e3063e64 	movw	r3, #28260	; 0x6e64
    1ee4:	e3403000 	movt	r3, #0
    1ee8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
    1eec:	e3530000 	cmp	r3, #0
    1ef0:	0a000011 	beq	1f3c <Visible_draw+0xd4>
    1ef4:	e59f5078 	ldr	r5, [pc, #120]	; 1f74 <Visible_draw+0x10c>
    1ef8:	e3a04000 	mov	r4, #0
        Terrain* curTerPtr =  GAME.objVisible.arrTersPtr[i];
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
        
        Sprites_draw_terrain(*curTerPtr, GAME.topLeft);
    1efc:	e3066e64 	movw	r6, #28260	; 0x6e64
    1f00:	e3406000 	movt	r6, #0
        if(curMobPtr == NULL) continue;
        
        Sprites_draw_mob(*curMobPtr, GAME.topLeft);
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
        Terrain* curTerPtr =  GAME.objVisible.arrTersPtr[i];
    1f04:	e5b53004 	ldr	r3, [r5, #4]!
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
    1f08:	e3530000 	cmp	r3, #0
    1f0c:	0a000006 	beq	1f2c <Visible_draw+0xc4>
        
        Sprites_draw_terrain(*curTerPtr, GAME.topLeft);
    1f10:	e2862020 	add	r2, r6, #32
    1f14:	e8920003 	ldm	r2, {r0, r1}
    1f18:	e98d0003 	stmib	sp, {r0, r1}
    1f1c:	e5932010 	ldr	r2, [r3, #16]
    1f20:	e58d2000 	str	r2, [sp]
    1f24:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    1f28:	eb00016f 	bl	24ec <Sprites_draw_terrain>
        Mob* curMobPtr =  GAME.objVisible.arrMobsPtr[i];
        if(curMobPtr == NULL) continue;
        
        Sprites_draw_mob(*curMobPtr, GAME.topLeft);
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    1f2c:	e2844001 	add	r4, r4, #1
    1f30:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
    1f34:	e1530004 	cmp	r3, r4
    1f38:	8afffff1 	bhi	1f04 <Visible_draw+0x9c>
        Terrain* curTerPtr =  GAME.objVisible.arrTersPtr[i];
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
        
        Sprites_draw_terrain(*curTerPtr, GAME.topLeft);
    }
    Sprites_draw_main(GAME.Zero, GAME.topLeft);
    1f3c:	e306ce64 	movw	r12, #28260	; 0x6e64
    1f40:	e340c000 	movt	r12, #0
    1f44:	e28d3010 	add	r3, sp, #16
    1f48:	e28c2020 	add	r2, r12, #32
    1f4c:	e8920003 	ldm	r2, {r0, r1}
    1f50:	e8830003 	stm	r3, {r0, r1}
    1f54:	e28c3010 	add	r3, r12, #16
    1f58:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    1f5c:	e88d000f 	stm	sp, {r0, r1, r2, r3}
    1f60:	e89c000f 	ldm	r12, {r0, r1, r2, r3}
    1f64:	eb000112 	bl	23b4 <Sprites_draw_main>
}
    1f68:	e28dd024 	add	sp, sp, #36	; 0x24
    1f6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    1f70:	00006e98 	.word	0x00006e98
    1f74:	00006ec4 	.word	0x00006ec4

00001f78 <screen_move>:
    }

}

void screen_move(){
    GAME.topLeft.x = GAME.Zero.x - SCREEN_X/2+1 + (GAME.spritesArr[OBJECT_ID_ZERO].b+1)/2;
    1f78:	e3063e64 	movw	r3, #28260	; 0x6e64
    1f7c:	e3403000 	movt	r3, #0
    1f80:	e5930004 	ldr	r0, [r3, #4]
    1f84:	e240009f 	sub	r0, r0, #159	; 0x9f
    1f88:	e59320fc 	ldr	r2, [r3, #252]	; 0xfc
    1f8c:	e5921004 	ldr	r1, [r2, #4]
    1f90:	e2811001 	add	r1, r1, #1
    1f94:	e0811fa1 	add	r1, r1, r1, lsr #31
    1f98:	e08020c1 	add	r2, r0, r1, asr #1
    1f9c:	e5832020 	str	r2, [r3, #32]
    int signedLeftIdx = GAME.topLeft.x/MAP_STEP;
    1fa0:	e3061667 	movw	r1, #26215	; 0x6667
    1fa4:	e3461666 	movt	r1, #26214	; 0x6666
    1fa8:	e0cc3291 	smull	r3, r12, r1, r2
    1fac:	e1a00fc2 	asr	r0, r2, #31
    int signedRightIdx = (GAME.topLeft.x+SCREEN_X-1)/MAP_STEP;
    1fb0:	e2823f4f 	add	r3, r2, #316	; 0x13c
    1fb4:	e2833003 	add	r3, r3, #3
    1fb8:	e0c12391 	smull	r2, r1, r1, r3
    1fbc:	e1a03fc3 	asr	r3, r3, #31
    1fc0:	e0633141 	rsb	r3, r3, r1, asr #2
    
    if(signedLeftIdx<0)
    1fc4:	e070014c 	rsbs	r0, r0, r12, asr #2
    1fc8:	5a000004 	bpl	1fe0 <screen_move+0x68>
        GAME.mapLeftIdx = 0;
    1fcc:	e3062e64 	movw	r2, #28260	; 0x6e64
    1fd0:	e3402000 	movt	r2, #0
    1fd4:	e3a01000 	mov	r1, #0
    1fd8:	e5821030 	str	r1, [r2, #48]	; 0x30
    1fdc:	ea00000a 	b	200c <screen_move+0x94>
    else if (signedLeftIdx>=GAME.mapSize)
    1fe0:	e3062e64 	movw	r2, #28260	; 0x6e64
    1fe4:	e3402000 	movt	r2, #0
    1fe8:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
    1fec:	e1500002 	cmp	r0, r2
         GAME.mapLeftIdx = GAME.mapSize-1;
    1ff0:	23061e64 	movwcs	r1, #28260	; 0x6e64
    1ff4:	23401000 	movtcs	r1, #0
    1ff8:	22422001 	subcs	r2, r2, #1
    1ffc:	25812030 	strcs	r2, [r1, #48]	; 0x30
    else
        GAME.mapLeftIdx = GAME.topLeft.x/MAP_STEP;
    2000:	33062e64 	movwcc	r2, #28260	; 0x6e64
    2004:	33402000 	movtcc	r2, #0
    2008:	35820030 	strcc	r0, [r2, #48]	; 0x30

    if(signedRightIdx>=GAME.mapSize)
    200c:	e3062e64 	movw	r2, #28260	; 0x6e64
    2010:	e3402000 	movt	r2, #0
    2014:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
    2018:	e1530002 	cmp	r3, r2
    201c:	3a000004 	bcc	2034 <screen_move+0xbc>
        GAME.mapRightIdx = GAME.mapSize-1;
    2020:	e3063e64 	movw	r3, #28260	; 0x6e64
    2024:	e3403000 	movt	r3, #0
    2028:	e2422001 	sub	r2, r2, #1
    202c:	e5832034 	str	r2, [r3, #52]	; 0x34
    2030:	e12fff1e 	bx	lr
    else if (signedRightIdx < 0)
    2034:	e3530000 	cmp	r3, #0
         GAME.mapRightIdx = GAME.topLeft.x/MAP_STEP;
    2038:	b3063e64 	movwlt	r3, #28260	; 0x6e64
    203c:	b3403000 	movtlt	r3, #0
    2040:	b5830034 	strlt	r0, [r3, #52]	; 0x34
    else
        GAME.mapRightIdx = (GAME.topLeft.x+SCREEN_X-1)/MAP_STEP;
    2044:	a3062e64 	movwge	r2, #28260	; 0x6e64
    2048:	a3402000 	movtge	r2, #0
    204c:	a5823034 	strge	r3, [r2, #52]	; 0x34
    2050:	e12fff1e 	bx	lr

00002054 <update_objects>:
        Sprites_draw_terrain(*curTerPtr, GAME.topLeft);
    }
    Sprites_draw_main(GAME.Zero, GAME.topLeft);
}

void update_objects(){
    2054:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    GAME.frameID++;
    2058:	e3064e64 	movw	r4, #28260	; 0x6e64
    205c:	e3404000 	movt	r4, #0
    2060:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    2064:	e2833001 	add	r3, r3, #1
    2068:	e58430f8 	str	r3, [r4, #248]	; 0xf8
    screen_move();
    206c:	ebffffc1 	bl	1f78 <screen_move>
    
    unsigned i,j,k;
    
    //Adds valid objects in the map to the visible vector:
    for(i=GAME.mapLeftIdx; i<=GAME.mapRightIdx; i++){
    2070:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    2074:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    2078:	e1560003 	cmp	r6, r3
        for(j=0; j<GAME.mapRightIdx - GAME.mapLeftIdx + 1; j++){
    207c:	93060e64 	movwls	r0, #28260	; 0x6e64
    2080:	93400000 	movtls	r0, #0
    2084:	93a05000 	movls	r5, #0
            for(k=0; k<GAME.objMap[j].numOfMobs; k++){ //Loop through mobs that are supposed to be in the screen.
                Mob* curMobPtr =  &GAME.objMap[j].arrMobs[k];
                if(/*!curMobPtr->killed && */!curMobPtr->spawned){
                    curMobPtr->onScreen = true;
    2088:	93a0e001 	movls	lr, #1
    screen_move();
    
    unsigned i,j,k;
    
    //Adds valid objects in the map to the visible vector:
    for(i=GAME.mapLeftIdx; i<=GAME.mapRightIdx; i++){
    208c:	9a000034 	bls	2164 <update_objects+0x110>
    2090:	ea00003a 	b	2180 <update_objects+0x12c>
        for(j=0; j<GAME.mapRightIdx - GAME.mapLeftIdx + 1; j++){
            for(k=0; k<GAME.objMap[j].numOfMobs; k++){ //Loop through mobs that are supposed to be in the screen.
                Mob* curMobPtr =  &GAME.objMap[j].arrMobs[k];
    2094:	e5933000 	ldr	r3, [r3]
    2098:	e0833001 	add	r3, r3, r1
                if(/*!curMobPtr->killed && */!curMobPtr->spawned){
    209c:	e5d37007 	ldrb	r7, [r3, #7]
    20a0:	e3570000 	cmp	r7, #0
                    curMobPtr->onScreen = true;
    20a4:	05c3e005 	strbeq	lr, [r3, #5]
                    curMobPtr->spawned = true;
    20a8:	05c3e007 	strbeq	lr, [r3, #7]
    unsigned i,j,k;
    
    //Adds valid objects in the map to the visible vector:
    for(i=GAME.mapLeftIdx; i<=GAME.mapRightIdx; i++){
        for(j=0; j<GAME.mapRightIdx - GAME.mapLeftIdx + 1; j++){
            for(k=0; k<GAME.objMap[j].numOfMobs; k++){ //Loop through mobs that are supposed to be in the screen.
    20ac:	e2822001 	add	r2, r2, #1
    20b0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    20b4:	e083300c 	add	r3, r3, r12
    20b8:	e2811028 	add	r1, r1, #40	; 0x28
    20bc:	e5937004 	ldr	r7, [r3, #4]
    20c0:	e1570002 	cmp	r7, r2
    20c4:	8afffff2 	bhi	2094 <update_objects+0x40>
                }
                //else{
                //    curMobPtr->onScreen = false;
                //}
            }
            for(k=0; k<GAME.objMap[j].numOfTers; k++){
    20c8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    20cc:	e083300c 	add	r3, r3, r12
    20d0:	e593200c 	ldr	r2, [r3, #12]
    20d4:	e3520000 	cmp	r2, #0
    20d8:	0a00000d 	beq	2114 <update_objects+0xc0>
    20dc:	e1a01005 	mov	r1, r5
    20e0:	e1a02005 	mov	r2, r5
                Terrain* curTerPtr =  &GAME.objMap[j].arrTers[k];
    20e4:	e5933008 	ldr	r3, [r3, #8]
    20e8:	e0833001 	add	r3, r3, r1
                if(!curTerPtr->onScreen){
    20ec:	e5d37004 	ldrb	r7, [r3, #4]
    20f0:	e3570000 	cmp	r7, #0
                    curTerPtr->onScreen = true;
    20f4:	05c3e004 	strbeq	lr, [r3, #4]
                }
                //else{
                //    curMobPtr->onScreen = false;
                //}
            }
            for(k=0; k<GAME.objMap[j].numOfTers; k++){
    20f8:	e2822001 	add	r2, r2, #1
    20fc:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    2100:	e083300c 	add	r3, r3, r12
    2104:	e2811014 	add	r1, r1, #20
    2108:	e593700c 	ldr	r7, [r3, #12]
    210c:	e1570002 	cmp	r7, r2
    2110:	8afffff3 	bhi	20e4 <update_objects+0x90>
    
    unsigned i,j,k;
    
    //Adds valid objects in the map to the visible vector:
    for(i=GAME.mapLeftIdx; i<=GAME.mapRightIdx; i++){
        for(j=0; j<GAME.mapRightIdx - GAME.mapLeftIdx + 1; j++){
    2114:	e2844001 	add	r4, r4, #1
    2118:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    211c:	e2833001 	add	r3, r3, #1
    2120:	e5902030 	ldr	r2, [r0, #48]	; 0x30
    2124:	e0623003 	rsb	r3, r2, r3
    2128:	e1530004 	cmp	r3, r4
    212c:	9a000008 	bls	2154 <update_objects+0x100>
            for(k=0; k<GAME.objMap[j].numOfMobs; k++){ //Loop through mobs that are supposed to be in the screen.
    2130:	e1a0c204 	lsl	r12, r4, #4
    2134:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    2138:	e083300c 	add	r3, r3, r12
    213c:	e5932004 	ldr	r2, [r3, #4]
    2140:	e3520000 	cmp	r2, #0
    2144:	11a01005 	movne	r1, r5
    2148:	11a02005 	movne	r2, r5
    214c:	1affffd0 	bne	2094 <update_objects+0x40>
    2150:	eaffffdc 	b	20c8 <update_objects+0x74>
    screen_move();
    
    unsigned i,j,k;
    
    //Adds valid objects in the map to the visible vector:
    for(i=GAME.mapLeftIdx; i<=GAME.mapRightIdx; i++){
    2154:	e2866001 	add	r6, r6, #1
    2158:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    215c:	e1530006 	cmp	r3, r6
    2160:	3a000006 	bcc	2180 <update_objects+0x12c>
        for(j=0; j<GAME.mapRightIdx - GAME.mapLeftIdx + 1; j++){
    2164:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    2168:	e2833001 	add	r3, r3, #1
    216c:	e5902030 	ldr	r2, [r0, #48]	; 0x30
    2170:	e1520003 	cmp	r2, r3
    2174:	11a04005 	movne	r4, r5
    2178:	1affffec 	bne	2130 <update_objects+0xdc>
    217c:	eafffff4 	b	2154 <update_objects+0x100>
            }
        }
    }
    
    //Updates what is visible:
    Visible_update();
    2180:	ebfffe10 	bl	19c8 <Visible_update>
    
    Space_update();
    2184:	ebfffde8 	bl	192c <Space_update>
    
    //All visible will live:
        
    MainChar_move(&GAME.Zero);
    2188:	e3064e64 	movw	r4, #28260	; 0x6e64
    218c:	e3404000 	movt	r4, #0
    2190:	e1a00004 	mov	r0, r4
    2194:	ebfffa9d 	bl	c10 <MainChar_move>
    //GAME.Zero.x += GAME.Zero.dx;
    //GAME.Zero.y += GAME.Zero.dy;
    
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    2198:	e5943060 	ldr	r3, [r4, #96]	; 0x60
    219c:	e3530000 	cmp	r3, #0
    21a0:	0a00001c 	beq	2218 <update_objects+0x1c4>
    21a4:	e2846038 	add	r6, r4, #56	; 0x38
    21a8:	e3a05000 	mov	r5, #0
        Mob* curMobPtr =  GAME.objVisible.arrMobsPtr[i];
        if(curMobPtr == NULL) continue;
        Mob_move(curMobPtr);
        //Check if mob should remain in visible vector:
        if((curMobPtr->x+curMobPtr->spritePtr->b<GAME.topLeft.x || curMobPtr->x>GAME.topLeft.x+SCREEN_X -1) || curMobPtr->killed){ //If it left the screen:
    21ac:	e1a07004 	mov	r7, r4
            GAME.objVisible.arrMobsPtr[i]->onScreen = false;
    21b0:	e1a08005 	mov	r8, r5
    MainChar_move(&GAME.Zero);
    //GAME.Zero.x += GAME.Zero.dx;
    //GAME.Zero.y += GAME.Zero.dy;
    
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
        Mob* curMobPtr =  GAME.objVisible.arrMobsPtr[i];
    21b4:	e4964004 	ldr	r4, [r6], #4
        if(curMobPtr == NULL) continue;
    21b8:	e3540000 	cmp	r4, #0
    21bc:	0a000011 	beq	2208 <update_objects+0x1b4>
        Mob_move(curMobPtr);
    21c0:	e1a00004 	mov	r0, r4
    21c4:	ebfffc99 	bl	1430 <Mob_move>
        //Check if mob should remain in visible vector:
        if((curMobPtr->x+curMobPtr->spritePtr->b<GAME.topLeft.x || curMobPtr->x>GAME.topLeft.x+SCREEN_X -1) || curMobPtr->killed){ //If it left the screen:
    21c8:	e5943008 	ldr	r3, [r4, #8]
    21cc:	e5972020 	ldr	r2, [r7, #32]
    21d0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    21d4:	e5911004 	ldr	r1, [r1, #4]
    21d8:	e0831001 	add	r1, r3, r1
    21dc:	e1510002 	cmp	r1, r2
    21e0:	ba000006 	blt	2200 <update_objects+0x1ac>
    21e4:	e2822f4f 	add	r2, r2, #316	; 0x13c
    21e8:	e2822003 	add	r2, r2, #3
    21ec:	e1530002 	cmp	r3, r2
    21f0:	ca000002 	bgt	2200 <update_objects+0x1ac>
    21f4:	e5d43004 	ldrb	r3, [r4, #4]
    21f8:	e3530000 	cmp	r3, #0
    21fc:	0a000001 	beq	2208 <update_objects+0x1b4>
            GAME.objVisible.arrMobsPtr[i]->onScreen = false;
    2200:	e5163004 	ldr	r3, [r6, #-4]
    2204:	e5c38005 	strb	r8, [r3, #5]
        
    MainChar_move(&GAME.Zero);
    //GAME.Zero.x += GAME.Zero.dx;
    //GAME.Zero.y += GAME.Zero.dy;
    
    for(i = 0; i<GAME.objVisible.maxNumOfMobs; i++){
    2208:	e2855001 	add	r5, r5, #1
    220c:	e5973060 	ldr	r3, [r7, #96]	; 0x60
    2210:	e1530005 	cmp	r3, r5
    2214:	8affffe6 	bhi	21b4 <update_objects+0x160>
        if((curMobPtr->x+curMobPtr->spritePtr->b<GAME.topLeft.x || curMobPtr->x>GAME.topLeft.x+SCREEN_X -1) || curMobPtr->killed){ //If it left the screen:
            GAME.objVisible.arrMobsPtr[i]->onScreen = false;
            continue;
        }
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    2218:	e3063e64 	movw	r3, #28260	; 0x6e64
    221c:	e3403000 	movt	r3, #0
    2220:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
    2224:	e3530000 	cmp	r3, #0
    2228:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    222c:	e59fc05c 	ldr	r12, [pc, #92]	; 2290 <update_objects+0x23c>
    2230:	e3a02000 	mov	r2, #0
        Terrain* curTerPtr =  GAME.objVisible.arrTersPtr[i];
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
        
        //Check if mob should remain in visible vector
        if((curTerPtr->x+curTerPtr->spritePtr->b<GAME.topLeft.x || curTerPtr->x>GAME.topLeft.x+SCREEN_X -1)){ //If it left the screen:
    2234:	e3064e64 	movw	r4, #28260	; 0x6e64
    2238:	e3404000 	movt	r4, #0
            GAME.objVisible.arrTersPtr[i]->onScreen = false;
    223c:	e1a06002 	mov	r6, r2
            GAME.objVisible.arrMobsPtr[i]->onScreen = false;
            continue;
        }
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
        Terrain* curTerPtr =  GAME.objVisible.arrTersPtr[i];
    2240:	e5bc3004 	ldr	r3, [r12, #4]!
        if(GAME.objVisible.arrTersPtr[i] == NULL) continue;
    2244:	e3530000 	cmp	r3, #0
    2248:	0a00000b 	beq	227c <update_objects+0x228>
        
        //Check if mob should remain in visible vector
        if((curTerPtr->x+curTerPtr->spritePtr->b<GAME.topLeft.x || curTerPtr->x>GAME.topLeft.x+SCREEN_X -1)){ //If it left the screen:
    224c:	e5931008 	ldr	r1, [r3, #8]
    2250:	e5940020 	ldr	r0, [r4, #32]
    2254:	e5935010 	ldr	r5, [r3, #16]
    2258:	e5955004 	ldr	r5, [r5, #4]
    225c:	e0815005 	add	r5, r1, r5
    2260:	e1550000 	cmp	r5, r0
    2264:	ba000003 	blt	2278 <update_objects+0x224>
    2268:	e2800f4f 	add	r0, r0, #316	; 0x13c
    226c:	e2800003 	add	r0, r0, #3
    2270:	e1510000 	cmp	r1, r0
    2274:	da000000 	ble	227c <update_objects+0x228>
            GAME.objVisible.arrTersPtr[i]->onScreen = false;
    2278:	e5c36004 	strb	r6, [r3, #4]
        if((curMobPtr->x+curMobPtr->spritePtr->b<GAME.topLeft.x || curMobPtr->x>GAME.topLeft.x+SCREEN_X -1) || curMobPtr->killed){ //If it left the screen:
            GAME.objVisible.arrMobsPtr[i]->onScreen = false;
            continue;
        }
    }
    for(i = 0; i<GAME.objVisible.maxNumOfTers; i++){
    227c:	e2822001 	add	r2, r2, #1
    2280:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
    2284:	e1530002 	cmp	r3, r2
    2288:	8affffec 	bhi	2240 <update_objects+0x1ec>
    228c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    2290:	00006ec4 	.word	0x00006ec4

00002294 <move>:
    
}

void move(){
	//HEX_PS2(byte1, byte2, byte3);
    GAME.Zero.dx = 0;
    2294:	e3063e64 	movw	r3, #28260	; 0x6e64
    2298:	e3403000 	movt	r3, #0
    229c:	e3a02000 	mov	r2, #0
    22a0:	e583200c 	str	r2, [r3, #12]
	if (leftKey.pressed && GAME.Zero.dx > -5){
    22a4:	e3063f6c 	movw	r3, #28524	; 0x6f6c
    22a8:	e3403000 	movt	r3, #0
    22ac:	e5d33000 	ldrb	r3, [r3]
    22b0:	e1530002 	cmp	r3, r2
        GAME.Zero.dx -= 3;
    22b4:	13063e64 	movwne	r3, #28260	; 0x6e64
    22b8:	13403000 	movtne	r3, #0
    22bc:	13e02002 	mvnne	r2, #2
    22c0:	1583200c 	strne	r2, [r3, #12]
    }
    if (rightKey.pressed && GAME.Zero.dx < 5){
    22c4:	e3063f74 	movw	r3, #28532	; 0x6f74
    22c8:	e3403000 	movt	r3, #0
    22cc:	e5d33000 	ldrb	r3, [r3]
    22d0:	e3530000 	cmp	r3, #0
    22d4:	0a000007 	beq	22f8 <move+0x64>
    22d8:	e3063e64 	movw	r3, #28260	; 0x6e64
    22dc:	e3403000 	movt	r3, #0
    22e0:	e593300c 	ldr	r3, [r3, #12]
    22e4:	e3530004 	cmp	r3, #4
        GAME.Zero.dx += 3;
    22e8:	d3062e64 	movwle	r2, #28260	; 0x6e64
    22ec:	d3402000 	movtle	r2, #0
    22f0:	d2833003 	addle	r3, r3, #3
    22f4:	d582300c 	strle	r3, [r2, #12]
    }
    
    if (upKey.pressed && GAME.Zero.dy > -2){
    22f8:	e3063f68 	movw	r3, #28520	; 0x6f68
    22fc:	e3403000 	movt	r3, #0
    2300:	e5d33000 	ldrb	r3, [r3]
    2304:	e3530000 	cmp	r3, #0
    2308:	0a000007 	beq	232c <move+0x98>
    230c:	e3063e64 	movw	r3, #28260	; 0x6e64
    2310:	e3403000 	movt	r3, #0
    2314:	e5932010 	ldr	r2, [r3, #16]
    2318:	e3720001 	cmn	r2, #1
        GAME.Zero.dy -= 6;
    231c:	a3063e64 	movwge	r3, #28260	; 0x6e64
    2320:	a3403000 	movtge	r3, #0
    2324:	a2422006 	subge	r2, r2, #6
    2328:	a5832010 	strge	r2, [r3, #16]
    }
    if (downKey.pressed && GAME.Zero.dy < +3){
    232c:	e3063f70 	movw	r3, #28528	; 0x6f70
    2330:	e3403000 	movt	r3, #0
    2334:	e5d33000 	ldrb	r3, [r3]
    2338:	e3530000 	cmp	r3, #0
    233c:	0a000007 	beq	2360 <move+0xcc>
    2340:	e3063e64 	movw	r3, #28260	; 0x6e64
    2344:	e3403000 	movt	r3, #0
    2348:	e5933010 	ldr	r3, [r3, #16]
    234c:	e3530002 	cmp	r3, #2
        GAME.Zero.dy = +1;
    2350:	d3063e64 	movwle	r3, #28260	; 0x6e64
    2354:	d3403000 	movtle	r3, #0
    2358:	d3a02001 	movle	r2, #1
    235c:	d5832010 	strle	r2, [r3, #16]
    }
    if (spaceKey.pressed && GAME.Zero.dy> -2){
    2360:	e3063f78 	movw	r3, #28536	; 0x6f78
    2364:	e3403000 	movt	r3, #0
    2368:	e5d33000 	ldrb	r3, [r3]
    236c:	e3530000 	cmp	r3, #0
    2370:	012fff1e 	bxeq	lr
    2374:	e3063e64 	movw	r3, #28260	; 0x6e64
    2378:	e3403000 	movt	r3, #0
    237c:	e5932010 	ldr	r2, [r3, #16]
    2380:	e3720001 	cmn	r2, #1
        GAME.Zero.dy -= 6;
    2384:	a3063e64 	movwge	r3, #28260	; 0x6e64
    2388:	a3403000 	movtge	r3, #0
    238c:	a2422006 	subge	r2, r2, #6
    2390:	a5832010 	strge	r2, [r3, #16]
    2394:	e12fff1e 	bx	lr

00002398 <MPcore_private_timer_ISR>:
******************************************************************************/
void MPcore_private_timer_ISR( )
{
	volatile int * MPcore_private_timer_ptr = (int *) MPCORE_PRIV_TIMER;	// private timer address

	*(MPcore_private_timer_ptr + 3) = 1;	// Write to timer interrupt status register to
    2398:	e3a02001 	mov	r2, #1
    239c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    23a0:	e50329f3 	str	r2, [r3, #-2547]	; 0xfffff60d
														// clear the interrupt (note: not really necessary)

	timeout = 1;									// set global variable
    23a4:	e3063fa0 	movw	r3, #28576	; 0x6fa0
    23a8:	e3403000 	movt	r3, #0
    23ac:	e5832000 	str	r2, [r3]
    23b0:	e12fff1e 	bx	lr

000023b4 <Sprites_draw_main>:
 */

#include "Objects.h"


void Sprites_draw_main(MainChar Zero, Point topLeft){
    23b4:	e24dd010 	sub	sp, sp, #16
    23b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    23bc:	e28dc01c 	add	r12, sp, #28
    23c0:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    Sprite cur = *Zero.spritePtr;
    23c4:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    23c8:	e5936004 	ldr	r6, [r3, #4]
    23cc:	e593a008 	ldr	r10, [r3, #8]
    23d0:	e593800c 	ldr	r8, [r3, #12]
    int i,j;
    for(i=0; i<cur.h; i++){
    23d4:	e35a0000 	cmp	r10, #0
    23d8:	c3a05000 	movgt	r5, #0
 */

#include "Objects.h"


void Sprites_draw_main(MainChar Zero, Point topLeft){
    23dc:	c1a09005 	movgt	r9, r5
    Sprite cur = *Zero.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
    23e0:	ca000012 	bgt	2430 <Sprites_draw_main+0x7c>
    23e4:	ea000016 	b	2444 <Sprites_draw_main+0x90>
        for(j=0;j<cur.b;j++){
            //If(colorArray[i][j]==-1 don't draw)
            int xToDraw = Zero.x-topLeft.x + j;
    23e8:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    23ec:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    23f0:	e0630000 	rsb	r0, r3, r0
            int yToDraw = Zero.y-topLeft.y + i;
    23f4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    23f8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
    23fc:	e0631001 	rsb	r1, r3, r1
            if((xToDraw>=0 || xToDraw<SCREEN_X) && (yToDraw>=0 || yToDraw<SCREEN_Y))
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
    2400:	e7982007 	ldr	r2, [r8, r7]
    2404:	e1a03084 	lsl	r3, r4, #1
    2408:	e0800004 	add	r0, r0, r4
    240c:	e0811005 	add	r1, r1, r5
    2410:	e19220f3 	ldrsh	r2, [r2, r3]
    2414:	eb00022d 	bl	2cd0 <plot_pixel>

void Sprites_draw_main(MainChar Zero, Point topLeft){
    Sprite cur = *Zero.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
        for(j=0;j<cur.b;j++){
    2418:	e2844001 	add	r4, r4, #1
    241c:	e1540006 	cmp	r4, r6
    2420:	1afffff0 	bne	23e8 <Sprites_draw_main+0x34>


void Sprites_draw_main(MainChar Zero, Point topLeft){
    Sprite cur = *Zero.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
    2424:	e2855001 	add	r5, r5, #1
    2428:	e155000a 	cmp	r5, r10
    242c:	0a000004 	beq	2444 <Sprites_draw_main+0x90>
        for(j=0;j<cur.b;j++){
    2430:	e3560000 	cmp	r6, #0
    2434:	dafffffa 	ble	2424 <Sprites_draw_main+0x70>
 */

#include "Objects.h"


void Sprites_draw_main(MainChar Zero, Point topLeft){
    2438:	e1a07105 	lsl	r7, r5, #2
    243c:	e1a04009 	mov	r4, r9
    2440:	eaffffe8 	b	23e8 <Sprites_draw_main+0x34>
            int yToDraw = Zero.y-topLeft.y + i;
            if((xToDraw>=0 || xToDraw<SCREEN_X) && (yToDraw>=0 || yToDraw<SCREEN_Y))
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
}
    2444:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    2448:	e28dd010 	add	sp, sp, #16
    244c:	e12fff1e 	bx	lr

00002450 <Sprites_draw_mob>:

void Sprites_draw_mob(Mob troop, Point topLeft){
    2450:	e24dd010 	sub	sp, sp, #16
    2454:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    2458:	e28dc01c 	add	r12, sp, #28
    245c:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    Sprite cur = *troop.spritePtr;
    2460:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    2464:	e5936004 	ldr	r6, [r3, #4]
    2468:	e593a008 	ldr	r10, [r3, #8]
    246c:	e593800c 	ldr	r8, [r3, #12]
    int i,j;
    for(i=0; i<cur.h; i++){
    2470:	e35a0000 	cmp	r10, #0
    2474:	c3a05000 	movgt	r5, #0
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
}

void Sprites_draw_mob(Mob troop, Point topLeft){
    2478:	c1a09005 	movgt	r9, r5
    Sprite cur = *troop.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
    247c:	ca000012 	bgt	24cc <Sprites_draw_mob+0x7c>
    2480:	ea000016 	b	24e0 <Sprites_draw_mob+0x90>
        for(j=0;j<cur.b;j++){
            int xToDraw = troop.x-topLeft.x + j;
    2484:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
    2488:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    248c:	e0630000 	rsb	r0, r3, r0
            int yToDraw = troop.y-topLeft.y + i;
    2490:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
    2494:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    2498:	e0631001 	rsb	r1, r3, r1
            if((xToDraw>=0 || xToDraw<SCREEN_X) && (yToDraw>=0 || yToDraw<SCREEN_Y))
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
    249c:	e7982007 	ldr	r2, [r8, r7]
    24a0:	e1a03084 	lsl	r3, r4, #1
    24a4:	e0800004 	add	r0, r0, r4
    24a8:	e0811005 	add	r1, r1, r5
    24ac:	e19220f3 	ldrsh	r2, [r2, r3]
    24b0:	eb000206 	bl	2cd0 <plot_pixel>

void Sprites_draw_mob(Mob troop, Point topLeft){
    Sprite cur = *troop.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
        for(j=0;j<cur.b;j++){
    24b4:	e2844001 	add	r4, r4, #1
    24b8:	e1540006 	cmp	r4, r6
    24bc:	1afffff0 	bne	2484 <Sprites_draw_mob+0x34>
}

void Sprites_draw_mob(Mob troop, Point topLeft){
    Sprite cur = *troop.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
    24c0:	e2855001 	add	r5, r5, #1
    24c4:	e155000a 	cmp	r5, r10
    24c8:	0a000004 	beq	24e0 <Sprites_draw_mob+0x90>
        for(j=0;j<cur.b;j++){
    24cc:	e3560000 	cmp	r6, #0
    24d0:	dafffffa 	ble	24c0 <Sprites_draw_mob+0x70>
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
}

void Sprites_draw_mob(Mob troop, Point topLeft){
    24d4:	e1a07105 	lsl	r7, r5, #2
    24d8:	e1a04009 	mov	r4, r9
    24dc:	eaffffe8 	b	2484 <Sprites_draw_mob+0x34>
            int yToDraw = troop.y-topLeft.y + i;
            if((xToDraw>=0 || xToDraw<SCREEN_X) && (yToDraw>=0 || yToDraw<SCREEN_Y))
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
}
    24e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    24e4:	e28dd010 	add	sp, sp, #16
    24e8:	e12fff1e 	bx	lr

000024ec <Sprites_draw_terrain>:

void Sprites_draw_terrain(Terrain Skule, Point topLeft){
    24ec:	e24dd010 	sub	sp, sp, #16
    24f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    24f4:	e28dc01c 	add	r12, sp, #28
    24f8:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    Sprite cur = *Skule.spritePtr;
    24fc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    2500:	e5936004 	ldr	r6, [r3, #4]
    2504:	e593a008 	ldr	r10, [r3, #8]
    2508:	e593800c 	ldr	r8, [r3, #12]
    int i,j;
    for(i=0; i<cur.h; i++){
    250c:	e35a0000 	cmp	r10, #0
    2510:	c3a05000 	movgt	r5, #0
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
}

void Sprites_draw_terrain(Terrain Skule, Point topLeft){
    2514:	c1a09005 	movgt	r9, r5
    Sprite cur = *Skule.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
    2518:	ca000012 	bgt	2568 <Sprites_draw_terrain+0x7c>
    251c:	ea000016 	b	257c <Sprites_draw_terrain+0x90>
        for(j=0;j<cur.b;j++){
            int xToDraw = Skule.x-topLeft.x + j;
    2520:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
    2524:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    2528:	e0630000 	rsb	r0, r3, r0
            int yToDraw = Skule.y-topLeft.y + i;
    252c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    2530:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    2534:	e0631001 	rsb	r1, r3, r1
            if((xToDraw>=0 || xToDraw<SCREEN_X) && (yToDraw>=0 || yToDraw<SCREEN_Y))
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
    2538:	e7982007 	ldr	r2, [r8, r7]
    253c:	e1a03084 	lsl	r3, r4, #1
    2540:	e0800004 	add	r0, r0, r4
    2544:	e0811005 	add	r1, r1, r5
    2548:	e19220f3 	ldrsh	r2, [r2, r3]
    254c:	eb0001df 	bl	2cd0 <plot_pixel>

void Sprites_draw_terrain(Terrain Skule, Point topLeft){
    Sprite cur = *Skule.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
        for(j=0;j<cur.b;j++){
    2550:	e2844001 	add	r4, r4, #1
    2554:	e1540006 	cmp	r4, r6
    2558:	1afffff0 	bne	2520 <Sprites_draw_terrain+0x34>
}

void Sprites_draw_terrain(Terrain Skule, Point topLeft){
    Sprite cur = *Skule.spritePtr;
    int i,j;
    for(i=0; i<cur.h; i++){
    255c:	e2855001 	add	r5, r5, #1
    2560:	e155000a 	cmp	r5, r10
    2564:	0a000004 	beq	257c <Sprites_draw_terrain+0x90>
        for(j=0;j<cur.b;j++){
    2568:	e3560000 	cmp	r6, #0
    256c:	dafffffa 	ble	255c <Sprites_draw_terrain+0x70>
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
}

void Sprites_draw_terrain(Terrain Skule, Point topLeft){
    2570:	e1a07105 	lsl	r7, r5, #2
    2574:	e1a04009 	mov	r4, r9
    2578:	eaffffe8 	b	2520 <Sprites_draw_terrain+0x34>
            int yToDraw = Skule.y-topLeft.y + i;
            if((xToDraw>=0 || xToDraw<SCREEN_X) && (yToDraw>=0 || yToDraw<SCREEN_Y))
                plot_pixel(xToDraw,yToDraw,cur.colorArray[i][j]);
        }
    }
    257c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    2580:	e28dd010 	add	sp, sp, #16
    2584:	e12fff1e 	bx	lr

00002588 <HEX_PS2>:
	//if both b2 and b3 are the same, key is begin held down,
	//keep moving in specified direction
	
	//if b2 is F0, break code when a key is released,
	//only move in specified direction once
	if (b2 == BREAK)
    2588:	e35100f0 	cmp	r1, #240	; 0xf0
		ps2Static = true;
    258c:	e3063f64 	movw	r3, #28516	; 0x6f64
    2590:	e3403000 	movt	r3, #0
    2594:	03a01001 	moveq	r1, #1
	else ps2Static = false;
    2598:	13a01000 	movne	r1, #0
    259c:	e5c31000 	strb	r1, [r3]
	
	switch (b3){
    25a0:	e352001d 	cmp	r2, #29
    25a4:	0a00000c 	beq	25dc <HEX_PS2+0x54>
    25a8:	8a000004 	bhi	25c0 <HEX_PS2+0x38>
    25ac:	e352001b 	cmp	r2, #27
    25b0:	0a000035 	beq	268c <HEX_PS2+0x104>
    25b4:	e352001c 	cmp	r2, #28
    25b8:	1a00007a 	bne	27a8 <HEX_PS2+0x220>
    25bc:	ea00001c 	b	2634 <HEX_PS2+0xac>
    25c0:	e3520029 	cmp	r2, #41	; 0x29
    25c4:	0a00005c 	beq	273c <HEX_PS2+0x1b4>
    25c8:	e35200f0 	cmp	r2, #240	; 0xf0
    25cc:	0a000070 	beq	2794 <HEX_PS2+0x20c>
    25d0:	e3520023 	cmp	r2, #35	; 0x23
    25d4:	1a000073 	bne	27a8 <HEX_PS2+0x220>
    25d8:	ea000041 	b	26e4 <HEX_PS2+0x15c>
		case W:{
			if (ps2Break){
    25dc:	e3063f64 	movw	r3, #28516	; 0x6f64
    25e0:	e3403000 	movt	r3, #0
    25e4:	e5d33001 	ldrb	r3, [r3, #1]
    25e8:	e3530000 	cmp	r3, #0
    25ec:	0a000007 	beq	2610 <HEX_PS2+0x88>
				ps2Break = false;
    25f0:	e3063f64 	movw	r3, #28516	; 0x6f64
    25f4:	e3403000 	movt	r3, #0
    25f8:	e3a02000 	mov	r2, #0
    25fc:	e5c32001 	strb	r2, [r3, #1]
				upKey.pressed = false;
    2600:	e5c32004 	strb	r2, [r3, #4]
				upKey.released = true;
    2604:	e3a02001 	mov	r2, #1
    2608:	e5c32005 	strb	r2, [r3, #5]
    260c:	e12fff1e 	bx	lr
			}
			else if (!ps2Static) upKey.pressed = true;
    2610:	e3063f64 	movw	r3, #28516	; 0x6f64
    2614:	e3403000 	movt	r3, #0
    2618:	e5d33000 	ldrb	r3, [r3]
    261c:	e3530000 	cmp	r3, #0
    2620:	03063f64 	movweq	r3, #28516	; 0x6f64
    2624:	03403000 	movteq	r3, #0
    2628:	03a02001 	moveq	r2, #1
    262c:	05c32004 	strbeq	r2, [r3, #4]
    2630:	e12fff1e 	bx	lr
			break;	
		}
		case A:{
			if (ps2Break){
    2634:	e3063f64 	movw	r3, #28516	; 0x6f64
    2638:	e3403000 	movt	r3, #0
    263c:	e5d33001 	ldrb	r3, [r3, #1]
    2640:	e3530000 	cmp	r3, #0
    2644:	0a000007 	beq	2668 <HEX_PS2+0xe0>
				ps2Break = false;
    2648:	e3063f64 	movw	r3, #28516	; 0x6f64
    264c:	e3403000 	movt	r3, #0
    2650:	e3a02000 	mov	r2, #0
    2654:	e5c32001 	strb	r2, [r3, #1]
				leftKey.pressed = false;
    2658:	e5c32008 	strb	r2, [r3, #8]
				leftKey.released = true;
    265c:	e3a02001 	mov	r2, #1
    2660:	e5c32009 	strb	r2, [r3, #9]
    2664:	e12fff1e 	bx	lr
			}
			else if (!ps2Static) leftKey.pressed = true;
    2668:	e3063f64 	movw	r3, #28516	; 0x6f64
    266c:	e3403000 	movt	r3, #0
    2670:	e5d33000 	ldrb	r3, [r3]
    2674:	e3530000 	cmp	r3, #0
    2678:	03063f64 	movweq	r3, #28516	; 0x6f64
    267c:	03403000 	movteq	r3, #0
    2680:	03a02001 	moveq	r2, #1
    2684:	05c32008 	strbeq	r2, [r3, #8]
    2688:	e12fff1e 	bx	lr
			break;	
		}
		case S:{
			if (ps2Break){
    268c:	e3063f64 	movw	r3, #28516	; 0x6f64
    2690:	e3403000 	movt	r3, #0
    2694:	e5d33001 	ldrb	r3, [r3, #1]
    2698:	e3530000 	cmp	r3, #0
    269c:	0a000007 	beq	26c0 <HEX_PS2+0x138>
				ps2Break = false;
    26a0:	e3063f64 	movw	r3, #28516	; 0x6f64
    26a4:	e3403000 	movt	r3, #0
    26a8:	e3a02000 	mov	r2, #0
    26ac:	e5c32001 	strb	r2, [r3, #1]
				downKey.pressed = false;
    26b0:	e5c3200c 	strb	r2, [r3, #12]
				downKey.released = true;
    26b4:	e3a02001 	mov	r2, #1
    26b8:	e5c3200d 	strb	r2, [r3, #13]
    26bc:	e12fff1e 	bx	lr
			}
			else if (!ps2Static) downKey.pressed = true;
    26c0:	e3063f64 	movw	r3, #28516	; 0x6f64
    26c4:	e3403000 	movt	r3, #0
    26c8:	e5d33000 	ldrb	r3, [r3]
    26cc:	e3530000 	cmp	r3, #0
    26d0:	03063f64 	movweq	r3, #28516	; 0x6f64
    26d4:	03403000 	movteq	r3, #0
    26d8:	03a02001 	moveq	r2, #1
    26dc:	05c3200c 	strbeq	r2, [r3, #12]
    26e0:	e12fff1e 	bx	lr
			break;
		}
		case D:{
			if (ps2Break){
    26e4:	e3063f64 	movw	r3, #28516	; 0x6f64
    26e8:	e3403000 	movt	r3, #0
    26ec:	e5d33001 	ldrb	r3, [r3, #1]
    26f0:	e3530000 	cmp	r3, #0
    26f4:	0a000007 	beq	2718 <HEX_PS2+0x190>
				ps2Break = false;
    26f8:	e3063f64 	movw	r3, #28516	; 0x6f64
    26fc:	e3403000 	movt	r3, #0
    2700:	e3a02000 	mov	r2, #0
    2704:	e5c32001 	strb	r2, [r3, #1]
				rightKey.pressed = false;
    2708:	e5c32010 	strb	r2, [r3, #16]
				rightKey.released = true;
    270c:	e3a02001 	mov	r2, #1
    2710:	e5c32011 	strb	r2, [r3, #17]
    2714:	e12fff1e 	bx	lr
			}
			else if (!ps2Static) rightKey.pressed = true;
    2718:	e3063f64 	movw	r3, #28516	; 0x6f64
    271c:	e3403000 	movt	r3, #0
    2720:	e5d33000 	ldrb	r3, [r3]
    2724:	e3530000 	cmp	r3, #0
    2728:	03063f64 	movweq	r3, #28516	; 0x6f64
    272c:	03403000 	movteq	r3, #0
    2730:	03a02001 	moveq	r2, #1
    2734:	05c32010 	strbeq	r2, [r3, #16]
    2738:	e12fff1e 	bx	lr
			break;	
		}
		case SPACE:{
			if (ps2Break){
    273c:	e3063f64 	movw	r3, #28516	; 0x6f64
    2740:	e3403000 	movt	r3, #0
    2744:	e5d33001 	ldrb	r3, [r3, #1]
    2748:	e3530000 	cmp	r3, #0
    274c:	0a000007 	beq	2770 <HEX_PS2+0x1e8>
				ps2Break = false;
    2750:	e3063f64 	movw	r3, #28516	; 0x6f64
    2754:	e3403000 	movt	r3, #0
    2758:	e3a02000 	mov	r2, #0
    275c:	e5c32001 	strb	r2, [r3, #1]
				spaceKey.pressed = false;
    2760:	e5c32014 	strb	r2, [r3, #20]
				spaceKey.released = true;
    2764:	e3a02001 	mov	r2, #1
    2768:	e5c32015 	strb	r2, [r3, #21]
    276c:	e12fff1e 	bx	lr
			}
			else if (!ps2Static) spaceKey.pressed = true;
    2770:	e3063f64 	movw	r3, #28516	; 0x6f64
    2774:	e3403000 	movt	r3, #0
    2778:	e5d33000 	ldrb	r3, [r3]
    277c:	e3530000 	cmp	r3, #0
    2780:	03063f64 	movweq	r3, #28516	; 0x6f64
    2784:	03403000 	movteq	r3, #0
    2788:	03a02001 	moveq	r2, #1
    278c:	05c32014 	strbeq	r2, [r3, #20]
    2790:	e12fff1e 	bx	lr
			break;	
		}
		case BREAK:{
			ps2Break = true;
    2794:	e3063f64 	movw	r3, #28516	; 0x6f64
    2798:	e3403000 	movt	r3, #0
    279c:	e3a02001 	mov	r2, #1
    27a0:	e5c32001 	strb	r2, [r3, #1]
			break;	
    27a4:	e12fff1e 	bx	lr
		}
		default:{
			ps2Break = false;
    27a8:	e3063f64 	movw	r3, #28516	; 0x6f64
    27ac:	e3403000 	movt	r3, #0
    27b0:	e3a02000 	mov	r2, #0
    27b4:	e5c32001 	strb	r2, [r3, #1]
    27b8:	e12fff1e 	bx	lr

000027bc <PS2_ISR>:
	
}


void PS2_ISR( void )
{
    27bc:	e92d4010 	push	{r4, lr}
  	volatile int * PS2_ptr = (int *) 0xFF200100;		// PS/2 port address
	int PS2_data, RAVAIL;

	PS2_data = *(PS2_ptr);									// read the Data register in the PS/2 port
    27c0:	e3a03000 	mov	r3, #0
    27c4:	e34f3f20 	movt	r3, #65312	; 0xff20
    27c8:	e5931100 	ldr	r1, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;			// extract the RAVAIL field
	if (RAVAIL > 0)
    27cc:	e1b03821 	lsrs	r3, r1, #16
    27d0:	08bd8010 	popeq	{r4, pc}
	{
		/* always save the last three bytes received */
		byte1 = byte2;
    27d4:	e3064fa5 	movw	r4, #28581	; 0x6fa5
    27d8:	e3404000 	movt	r4, #0
    27dc:	e5d43000 	ldrb	r3, [r4]
    27e0:	e3062fa6 	movw	r2, #28582	; 0x6fa6
    27e4:	e3402000 	movt	r2, #0
    27e8:	e5c23000 	strb	r3, [r2]
		byte2 = byte3;
    27ec:	e3063fa4 	movw	r3, #28580	; 0x6fa4
    27f0:	e3403000 	movt	r3, #0
    27f4:	e5d30000 	ldrb	r0, [r3]
    27f8:	e5c40000 	strb	r0, [r4]
		byte3 = PS2_data & 0xFF;
    27fc:	e6ef1071 	uxtb	r1, r1
    2800:	e5c31000 	strb	r1, [r3]
		HEX_PS2(byte1, byte2, byte3);
    2804:	e5d20000 	ldrb	r0, [r2]
    2808:	e5d41000 	ldrb	r1, [r4]
    280c:	e5d32000 	ldrb	r2, [r3]
    2810:	ebffff5c 	bl	2588 <HEX_PS2>
		if ( (byte2 == (char) 0xAA) && (byte3 == (char) 0x00) )
    2814:	e5d43000 	ldrb	r3, [r4]
    2818:	e35300aa 	cmp	r3, #170	; 0xaa
    281c:	18bd8010 	popne	{r4, pc}
    2820:	e3063fa4 	movw	r3, #28580	; 0x6fa4
    2824:	e3403000 	movt	r3, #0
    2828:	e5d33000 	ldrb	r3, [r3]
    282c:	e3530000 	cmp	r3, #0
			// mouse inserted; initialize sending of data
			*(PS2_ptr) = 0xF4;
    2830:	034f3f20 	movteq	r3, #65312	; 0xff20
    2834:	03a020f4 	moveq	r2, #244	; 0xf4
    2838:	05832100 	streq	r2, [r3, #256]	; 0x100
    283c:	e8bd8010 	pop	{r4, pc}

00002840 <Rec_draw>:
 * and open the template in the editor.
 */

#include "Rectangle.h"

void Rec_draw (Rec r){
    2840:	e24dd010 	sub	sp, sp, #16
    2844:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2848:	e28dc014 	add	r12, sp, #20
    284c:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    2850:	e59d6020 	ldr	r6, [sp, #32]
    2854:	e59d7018 	ldr	r7, [sp, #24]
    2858:	e59d501c 	ldr	r5, [sp, #28]
    int x;
    int y;
    for(y = r.y; y  < r.y + r.h; y++){
    285c:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
    2860:	e0858008 	add	r8, r5, r8
    2864:	e1550008 	cmp	r5, r8
        for(x = r.x; x < r.x + r.b; x++){
    2868:	b0866007 	addlt	r6, r6, r7
#include "Rectangle.h"

void Rec_draw (Rec r){
    int x;
    int y;
    for(y = r.y; y  < r.y + r.h; y++){
    286c:	ba00000a 	blt	289c <Rec_draw+0x5c>
    2870:	ea00000d 	b	28ac <Rec_draw+0x6c>
        for(x = r.x; x < r.x + r.b; x++){
            plot_pixel(x,y,/*rand()%65536*/r.color);
    2874:	e1a00004 	mov	r0, r4
    2878:	e1a01005 	mov	r1, r5
    287c:	e1dd23f0 	ldrsh	r2, [sp, #48]	; 0x30
    2880:	eb000112 	bl	2cd0 <plot_pixel>

void Rec_draw (Rec r){
    int x;
    int y;
    for(y = r.y; y  < r.y + r.h; y++){
        for(x = r.x; x < r.x + r.b; x++){
    2884:	e2844001 	add	r4, r4, #1
    2888:	e1540006 	cmp	r4, r6
    288c:	bafffff8 	blt	2874 <Rec_draw+0x34>
#include "Rectangle.h"

void Rec_draw (Rec r){
    int x;
    int y;
    for(y = r.y; y  < r.y + r.h; y++){
    2890:	e2855001 	add	r5, r5, #1
    2894:	e1550008 	cmp	r5, r8
    2898:	aa000003 	bge	28ac <Rec_draw+0x6c>
        for(x = r.x; x < r.x + r.b; x++){
    289c:	e1570006 	cmp	r7, r6
    28a0:	b1a04007 	movlt	r4, r7
    28a4:	bafffff2 	blt	2874 <Rec_draw+0x34>
    28a8:	eafffff8 	b	2890 <Rec_draw+0x50>
            plot_pixel(x,y,/*rand()%65536*/r.color);
        }
    }
}
    28ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    28b0:	e28dd010 	add	sp, sp, #16
    28b4:	e12fff1e 	bx	lr

000028b8 <Rec_center>:

Point Rec_center(Rec r){
    28b8:	e24dd010 	sub	sp, sp, #16
    28bc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    28c0:	e1a04000 	mov	r4, r0
    28c4:	e28dc008 	add	r12, sp, #8
    28c8:	e88c000e 	stm	r12, {r1, r2, r3}
    Point center;
    center.x = (2*r.x+r.b+1)/2;
    center.y = (2*r.y+r.h+1)/2;
    28cc:	e59d3014 	ldr	r3, [sp, #20]
    28d0:	e59d200c 	ldr	r2, [sp, #12]
    28d4:	e0833082 	add	r3, r3, r2, lsl #1
    28d8:	e2833001 	add	r3, r3, #1
    28dc:	e0833fa3 	add	r3, r3, r3, lsr #31
    28e0:	e1a020c3 	asr	r2, r3, #1
    }
}

Point Rec_center(Rec r){
    Point center;
    center.x = (2*r.x+r.b+1)/2;
    28e4:	e59d3010 	ldr	r3, [sp, #16]
    28e8:	e0833081 	add	r3, r3, r1, lsl #1
    28ec:	e2833001 	add	r3, r3, #1
    28f0:	e0833fa3 	add	r3, r3, r3, lsr #31
    28f4:	e1a030c3 	asr	r3, r3, #1
    center.y = (2*r.y+r.h+1)/2;
    return center;
    28f8:	e5803000 	str	r3, [r0]
    28fc:	e5802004 	str	r2, [r0, #4]
}
    2900:	e8bd0010 	ldmfd	sp!, {r4}
    2904:	e28dd010 	add	sp, sp, #16
    2908:	e12fff1e 	bx	lr

0000290c <Rec_hitWall>:

int Rec_hitWall(Rec r){
    290c:	e24dd010 	sub	sp, sp, #16
    2910:	e24dc004 	sub	r12, sp, #4
    2914:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    2918:	e59d0004 	ldr	r0, [sp, #4]
    291c:	e59d3014 	ldr	r3, [sp, #20]
    if(r.x+r.dx>=SCREEN_X){
    2920:	e59d2010 	ldr	r2, [sp, #16]
    2924:	e59d1000 	ldr	r1, [sp]
    2928:	e0812002 	add	r2, r1, r2
    292c:	e3520d05 	cmp	r2, #320	; 0x140
    2930:	ba000005 	blt	294c <Rec_hitWall+0x40>
        if(r.y+r.dy<0)
    2934:	e0903003 	adds	r3, r0, r3
    2938:	4a000012 	bmi	2988 <Rec_hitWall+0x7c>
            return HIT_WALL_TOPRIGHT;
        if(r.y+r.dy>=SCREEN_Y)
            return HIT_WALL_BOTRIGHT;
    293c:	e35300f0 	cmp	r3, #240	; 0xf0
    2940:	b3a00002 	movlt	r0, #2
    2944:	a3e00002 	mvnge	r0, #2
    2948:	ea000012 	b	2998 <Rec_hitWall+0x8c>
        return HIT_WALL_RIGHT;
    }
    if(r.x+r.dx<0){
    294c:	e3520000 	cmp	r2, #0
    2950:	aa000005 	bge	296c <Rec_hitWall+0x60>
        if(r.y+r.dy<0)
    2954:	e0903003 	adds	r3, r0, r3
    2958:	4a00000c 	bmi	2990 <Rec_hitWall+0x84>
            return HIT_WALL_TOPLEFT;
        if(r.y+r.dy>=SCREEN_Y)
            return HIT_WALL_BOTLEFT;
    295c:	e35300f0 	cmp	r3, #240	; 0xf0
    2960:	b3a00004 	movlt	r0, #4
    2964:	a3e00003 	mvnge	r0, #3
    2968:	ea00000a 	b	2998 <Rec_hitWall+0x8c>
        return HIT_WALL_LEFT;
    }
	if(r.y+r.dy<0)
    296c:	e0900003 	adds	r0, r0, r3
		return HIT_WALL_TOP;
    2970:	43a00001 	movmi	r0, #1
            return HIT_WALL_TOPLEFT;
        if(r.y+r.dy>=SCREEN_Y)
            return HIT_WALL_BOTLEFT;
        return HIT_WALL_LEFT;
    }
	if(r.y+r.dy<0)
    2974:	4a000007 	bmi	2998 <Rec_hitWall+0x8c>
		return HIT_WALL_TOP;
	if(r.y+r.dy>=SCREEN_Y)
		return HIT_WALL_BOT;
    2978:	e35000ef 	cmp	r0, #239	; 0xef
    297c:	c3a00003 	movgt	r0, #3
    2980:	d3a00000 	movle	r0, #0
    2984:	ea000003 	b	2998 <Rec_hitWall+0x8c>
}

int Rec_hitWall(Rec r){
    if(r.x+r.dx>=SCREEN_X){
        if(r.y+r.dy<0)
            return HIT_WALL_TOPRIGHT;
    2988:	e3e00001 	mvn	r0, #1
    298c:	ea000001 	b	2998 <Rec_hitWall+0x8c>
            return HIT_WALL_BOTRIGHT;
        return HIT_WALL_RIGHT;
    }
    if(r.x+r.dx<0){
        if(r.y+r.dy<0)
            return HIT_WALL_TOPLEFT;
    2990:	e3e00000 	mvn	r0, #0
    2994:	eaffffff 	b	2998 <Rec_hitWall+0x8c>
	if(r.y+r.dy<0)
		return HIT_WALL_TOP;
	if(r.y+r.dy>=SCREEN_Y)
		return HIT_WALL_BOT;
	return HIT_WALL_NONE;
}
    2998:	e28dd010 	add	sp, sp, #16
    299c:	e12fff1e 	bx	lr

000029a0 <Rec_update>:



void Rec_update(Rec* r){
    29a0:	e92d4010 	push	{r4, lr}
    29a4:	e24dd010 	sub	sp, sp, #16
    29a8:	e1a04000 	mov	r4, r0
    int wallCase = Rec_hitWall(*r);
    29ac:	e2803010 	add	r3, r0, #16
    29b0:	e8930007 	ldm	r3, {r0, r1, r2}
    29b4:	e88d0007 	stm	sp, {r0, r1, r2}
    29b8:	e894000f 	ldm	r4, {r0, r1, r2, r3}
    29bc:	ebffffd2 	bl	290c <Rec_hitWall>
    switch(wallCase){
    29c0:	e2800004 	add	r0, r0, #4
    29c4:	e3500008 	cmp	r0, #8
    29c8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    29cc:	ea000059 	b	2b38 <Rec_update+0x198>
    29d0:	00002ae8 	.word	0x00002ae8
    29d4:	00002ab4 	.word	0x00002ab4
    29d8:	00002a84 	.word	0x00002a84
    29dc:	00002a5c 	.word	0x00002a5c
    29e0:	00002b18 	.word	0x00002b18
    29e4:	000029f4 	.word	0x000029f4
    29e8:	00002a0c 	.word	0x00002a0c
    29ec:	00002a28 	.word	0x00002a28
    29f0:	00002a44 	.word	0x00002a44
        case HIT_WALL_TOP:{
            r->dy = -r->dy;
    29f4:	e5943014 	ldr	r3, [r4, #20]
    29f8:	e2633000 	rsb	r3, r3, #0
    29fc:	e5843014 	str	r3, [r4, #20]
            r->y = 0;
    2a00:	e3a03000 	mov	r3, #0
    2a04:	e5843004 	str	r3, [r4, #4]
            break;
    2a08:	ea00004a 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_RIGHT:{
            r->dx = -r->dx;
    2a0c:	e5943010 	ldr	r3, [r4, #16]
    2a10:	e2633000 	rsb	r3, r3, #0
    2a14:	e5843010 	str	r3, [r4, #16]
            r->x = SCREEN_X - r->b;
    2a18:	e5943008 	ldr	r3, [r4, #8]
    2a1c:	e2633d05 	rsb	r3, r3, #320	; 0x140
    2a20:	e5843000 	str	r3, [r4]
            break;
    2a24:	ea000043 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_BOT:{
            r->dy = -r->dy;
    2a28:	e5943014 	ldr	r3, [r4, #20]
    2a2c:	e2633000 	rsb	r3, r3, #0
    2a30:	e5843014 	str	r3, [r4, #20]
            r->y = SCREEN_Y - r->h;
    2a34:	e594300c 	ldr	r3, [r4, #12]
    2a38:	e26330f0 	rsb	r3, r3, #240	; 0xf0
    2a3c:	e5843004 	str	r3, [r4, #4]
            break;
    2a40:	ea00003c 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_LEFT:{
            r->dx = -r->dx;
    2a44:	e5943010 	ldr	r3, [r4, #16]
    2a48:	e2633000 	rsb	r3, r3, #0
    2a4c:	e5843010 	str	r3, [r4, #16]
            r->x = 0;
    2a50:	e3a03000 	mov	r3, #0
    2a54:	e5843000 	str	r3, [r4]
            break;
    2a58:	ea000036 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_TOPLEFT:{
            r->dx = -r->dx;
    2a5c:	e5943010 	ldr	r3, [r4, #16]
    2a60:	e2633000 	rsb	r3, r3, #0
    2a64:	e5843010 	str	r3, [r4, #16]
            r->dy = -r->dy;
    2a68:	e5943014 	ldr	r3, [r4, #20]
    2a6c:	e2633000 	rsb	r3, r3, #0
    2a70:	e5843014 	str	r3, [r4, #20]
            r->x = 0;
    2a74:	e3a03000 	mov	r3, #0
    2a78:	e5843000 	str	r3, [r4]
            r->y = 0;
    2a7c:	e5843004 	str	r3, [r4, #4]
            break;
    2a80:	ea00002c 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_TOPRIGHT:{
            r->dx = -r->dx;
    2a84:	e5943010 	ldr	r3, [r4, #16]
    2a88:	e2633000 	rsb	r3, r3, #0
    2a8c:	e5843010 	str	r3, [r4, #16]
            r->dy = -r->dy;
    2a90:	e5943014 	ldr	r3, [r4, #20]
    2a94:	e2633000 	rsb	r3, r3, #0
    2a98:	e5843014 	str	r3, [r4, #20]
            r->x = SCREEN_X - r->b;
    2a9c:	e5943008 	ldr	r3, [r4, #8]
    2aa0:	e2633d05 	rsb	r3, r3, #320	; 0x140
    2aa4:	e5843000 	str	r3, [r4]
            r->y = 0;
    2aa8:	e3a03000 	mov	r3, #0
    2aac:	e5843004 	str	r3, [r4, #4]
            break;
    2ab0:	ea000020 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_BOTRIGHT:{
            r->dx = -r->dx;
    2ab4:	e5943010 	ldr	r3, [r4, #16]
    2ab8:	e2633000 	rsb	r3, r3, #0
    2abc:	e5843010 	str	r3, [r4, #16]
            r->dy = -r->dy;
    2ac0:	e5943014 	ldr	r3, [r4, #20]
    2ac4:	e2633000 	rsb	r3, r3, #0
    2ac8:	e5843014 	str	r3, [r4, #20]
            r->x = SCREEN_X - r->b;
    2acc:	e5943008 	ldr	r3, [r4, #8]
    2ad0:	e2633d05 	rsb	r3, r3, #320	; 0x140
    2ad4:	e5843000 	str	r3, [r4]
            r->y = SCREEN_Y - r->h;
    2ad8:	e594300c 	ldr	r3, [r4, #12]
    2adc:	e26330f0 	rsb	r3, r3, #240	; 0xf0
    2ae0:	e5843004 	str	r3, [r4, #4]
            break;
    2ae4:	ea000013 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_BOTLEFT:{
            r->dx = -r->dx;
    2ae8:	e5943010 	ldr	r3, [r4, #16]
    2aec:	e2633000 	rsb	r3, r3, #0
    2af0:	e5843010 	str	r3, [r4, #16]
            r->dy = -r->dy;
    2af4:	e5943014 	ldr	r3, [r4, #20]
    2af8:	e2633000 	rsb	r3, r3, #0
    2afc:	e5843014 	str	r3, [r4, #20]
            r->x = 0;
    2b00:	e3a03000 	mov	r3, #0
    2b04:	e5843000 	str	r3, [r4]
            r->y = SCREEN_Y - r->h;
    2b08:	e594300c 	ldr	r3, [r4, #12]
    2b0c:	e26330f0 	rsb	r3, r3, #240	; 0xf0
    2b10:	e5843004 	str	r3, [r4, #4]
            break;
    2b14:	ea000007 	b	2b38 <Rec_update+0x198>
        }
        case HIT_WALL_NONE:{
            r->x += r->dx;
    2b18:	e5942000 	ldr	r2, [r4]
    2b1c:	e5943010 	ldr	r3, [r4, #16]
    2b20:	e0823003 	add	r3, r2, r3
    2b24:	e5843000 	str	r3, [r4]
            r->y += r->dy;
    2b28:	e5942004 	ldr	r2, [r4, #4]
    2b2c:	e5943014 	ldr	r3, [r4, #20]
    2b30:	e0823003 	add	r3, r2, r3
    2b34:	e5843004 	str	r3, [r4, #4]
            break;
        }
        default:
            break;
    }
}
    2b38:	e28dd010 	add	sp, sp, #16
    2b3c:	e8bd8010 	pop	{r4, pc}

00002b40 <declareSprites>:

#include "Sprites.h"
#include "Objects.h"
Sprite allSprites[NUM_OF_SPRITES];

void declareSprites(){
    2b40:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    allSprites[OBJECT_ID_ZERO].id = OBJECT_ID_ZERO;
    2b44:	e3065f7c 	movw	r5, #28540	; 0x6f7c
    2b48:	e3405000 	movt	r5, #0
    2b4c:	e3a04000 	mov	r4, #0
    2b50:	e5854000 	str	r4, [r5]
    allSprites[OBJECT_ID_ZERO].b = ZERO_BASE;
    2b54:	e3a03006 	mov	r3, #6
    2b58:	e5853004 	str	r3, [r5, #4]
    allSprites[OBJECT_ID_ZERO].h = ZERO_HEIGHT;
    2b5c:	e3a0300a 	mov	r3, #10
    2b60:	e5853008 	str	r3, [r5, #8]
    int height = allSprites[OBJECT_ID_ZERO].h;
    int base = allSprites[OBJECT_ID_ZERO].b;
    allSprites[OBJECT_ID_ZERO].colorArray = (short int **)malloc(height * sizeof(short int *));
    2b64:	e3a00028 	mov	r0, #40	; 0x28
    2b68:	eb000150 	bl	30b0 <malloc>
    2b6c:	e585000c 	str	r0, [r5, #12]
    int i;
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_ZERO].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    2b70:	e1a06005 	mov	r6, r5
    2b74:	e3a0700c 	mov	r7, #12
    2b78:	e596500c 	ldr	r5, [r6, #12]
    2b7c:	e1a00007 	mov	r0, r7
    2b80:	eb00014a 	bl	30b0 <malloc>
    2b84:	e7850004 	str	r0, [r5, r4]
    2b88:	e2844004 	add	r4, r4, #4
    allSprites[OBJECT_ID_ZERO].h = ZERO_HEIGHT;
    int height = allSprites[OBJECT_ID_ZERO].h;
    int base = allSprites[OBJECT_ID_ZERO].b;
    allSprites[OBJECT_ID_ZERO].colorArray = (short int **)malloc(height * sizeof(short int *));
    int i;
    for (i=0; i<height; i++) 
    2b8c:	e3540028 	cmp	r4, #40	; 0x28
    2b90:	1afffff8 	bne	2b78 <declareSprites+0x38>
    2b94:	e3a06000 	mov	r6, #0
    allSprites[OBJECT_ID_ZERO].id = OBJECT_ID_ZERO;
    allSprites[OBJECT_ID_ZERO].b = ZERO_BASE;
    allSprites[OBJECT_ID_ZERO].h = ZERO_HEIGHT;
    int height = allSprites[OBJECT_ID_ZERO].h;
    int base = allSprites[OBJECT_ID_ZERO].b;
    allSprites[OBJECT_ID_ZERO].colorArray = (short int **)malloc(height * sizeof(short int *));
    2b98:	e1a0a006 	mov	r10, r6
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_ZERO].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    int j;
    for(i=0; i<height; i++){
        for(j=0; j<base; j++){
            allSprites[OBJECT_ID_ZERO].colorArray[i][j] = rand()%65565;
    2b9c:	e3067f7c 	movw	r7, #28540	; 0x6f7c
    2ba0:	e3407000 	movt	r7, #0
    2ba4:	e30881a5 	movw	r8, #33189	; 0x81a5
    2ba8:	e3478ff1 	movt	r8, #32753	; 0x7ff1
    2bac:	ea000010 	b	2bf4 <declareSprites+0xb4>
    2bb0:	e597300c 	ldr	r3, [r7, #12]
    2bb4:	e7935006 	ldr	r5, [r3, r6]
    2bb8:	eb00034a 	bl	38e8 <rand>
    2bbc:	e0c23098 	smull	r3, r2, r8, r0
    2bc0:	e1a03fc0 	asr	r3, r0, #31
    2bc4:	e06337c2 	rsb	r3, r3, r2, asr #15
    2bc8:	e0832583 	add	r2, r3, r3, lsl #11
    2bcc:	e0632182 	rsb	r2, r3, r2, lsl #3
    2bd0:	e0833102 	add	r3, r3, r2, lsl #2
    2bd4:	e0630000 	rsb	r0, r3, r0
    2bd8:	e18500b4 	strh	r0, [r5, r4]
    2bdc:	e2844002 	add	r4, r4, #2
    int i;
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_ZERO].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    int j;
    for(i=0; i<height; i++){
        for(j=0; j<base; j++){
    2be0:	e354000c 	cmp	r4, #12
    2be4:	1afffff1 	bne	2bb0 <declareSprites+0x70>
    2be8:	e2866004 	add	r6, r6, #4
    allSprites[OBJECT_ID_ZERO].colorArray = (short int **)malloc(height * sizeof(short int *));
    int i;
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_ZERO].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    int j;
    for(i=0; i<height; i++){
    2bec:	e3560028 	cmp	r6, #40	; 0x28
    2bf0:	0a000001 	beq	2bfc <declareSprites+0xbc>
    allSprites[OBJECT_ID_ZERO].id = OBJECT_ID_ZERO;
    allSprites[OBJECT_ID_ZERO].b = ZERO_BASE;
    allSprites[OBJECT_ID_ZERO].h = ZERO_HEIGHT;
    int height = allSprites[OBJECT_ID_ZERO].h;
    int base = allSprites[OBJECT_ID_ZERO].b;
    allSprites[OBJECT_ID_ZERO].colorArray = (short int **)malloc(height * sizeof(short int *));
    2bf4:	e1a0400a 	mov	r4, r10
    2bf8:	eaffffec 	b	2bb0 <declareSprites+0x70>
        for(j=0; j<base; j++){
            allSprites[OBJECT_ID_ZERO].colorArray[i][j] = rand()%65565;
        }
    }
    
    allSprites[OBJECT_ID_FLOOR].id = OBJECT_ID_FLOOR;
    2bfc:	e3064f7c 	movw	r4, #28540	; 0x6f7c
    2c00:	e3404000 	movt	r4, #0
    2c04:	e3a03001 	mov	r3, #1
    2c08:	e5843010 	str	r3, [r4, #16]
    allSprites[OBJECT_ID_FLOOR].b = FLOOR_BASE;
    2c0c:	e3a03f4b 	mov	r3, #300	; 0x12c
    2c10:	e5843014 	str	r3, [r4, #20]
    allSprites[OBJECT_ID_FLOOR].h = FLOOR_HEIGHT;
    2c14:	e3a0300b 	mov	r3, #11
    2c18:	e5843018 	str	r3, [r4, #24]
    height = allSprites[OBJECT_ID_FLOOR].h;
    base = allSprites[OBJECT_ID_FLOOR].b;
    allSprites[OBJECT_ID_FLOOR].colorArray = (short int **)malloc(height * sizeof(short int *));
    2c1c:	e3a0002c 	mov	r0, #44	; 0x2c
    2c20:	eb000122 	bl	30b0 <malloc>
    2c24:	e584001c 	str	r0, [r4, #28]
    2c28:	e3a04000 	mov	r4, #0
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_FLOOR].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    2c2c:	e3066f7c 	movw	r6, #28540	; 0x6f7c
    2c30:	e3406000 	movt	r6, #0
    2c34:	e3a07f96 	mov	r7, #600	; 0x258
    2c38:	e596501c 	ldr	r5, [r6, #28]
    2c3c:	e1a00007 	mov	r0, r7
    2c40:	eb00011a 	bl	30b0 <malloc>
    2c44:	e7850004 	str	r0, [r5, r4]
    2c48:	e2844004 	add	r4, r4, #4
    allSprites[OBJECT_ID_FLOOR].b = FLOOR_BASE;
    allSprites[OBJECT_ID_FLOOR].h = FLOOR_HEIGHT;
    height = allSprites[OBJECT_ID_FLOOR].h;
    base = allSprites[OBJECT_ID_FLOOR].b;
    allSprites[OBJECT_ID_FLOOR].colorArray = (short int **)malloc(height * sizeof(short int *));
    for (i=0; i<height; i++) 
    2c4c:	e354002c 	cmp	r4, #44	; 0x2c
    2c50:	1afffff8 	bne	2c38 <declareSprites+0xf8>
    2c54:	e3a06000 	mov	r6, #0
    allSprites[OBJECT_ID_FLOOR].id = OBJECT_ID_FLOOR;
    allSprites[OBJECT_ID_FLOOR].b = FLOOR_BASE;
    allSprites[OBJECT_ID_FLOOR].h = FLOOR_HEIGHT;
    height = allSprites[OBJECT_ID_FLOOR].h;
    base = allSprites[OBJECT_ID_FLOOR].b;
    allSprites[OBJECT_ID_FLOOR].colorArray = (short int **)malloc(height * sizeof(short int *));
    2c58:	e1a0a006 	mov	r10, r6
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_FLOOR].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    for(i=0; i<height; i++){
        for(j=0; j<base; j++){
            allSprites[OBJECT_ID_FLOOR].colorArray[i][j] = rand()%65565;
    2c5c:	e3067f7c 	movw	r7, #28540	; 0x6f7c
    2c60:	e3407000 	movt	r7, #0
    2c64:	e30881a5 	movw	r8, #33189	; 0x81a5
    2c68:	e3478ff1 	movt	r8, #32753	; 0x7ff1
    2c6c:	ea000010 	b	2cb4 <declareSprites+0x174>
    2c70:	e597301c 	ldr	r3, [r7, #28]
    2c74:	e7935006 	ldr	r5, [r3, r6]
    2c78:	eb00031a 	bl	38e8 <rand>
    2c7c:	e0c23098 	smull	r3, r2, r8, r0
    2c80:	e1a03fc0 	asr	r3, r0, #31
    2c84:	e06337c2 	rsb	r3, r3, r2, asr #15
    2c88:	e0832583 	add	r2, r3, r3, lsl #11
    2c8c:	e0632182 	rsb	r2, r3, r2, lsl #3
    2c90:	e0833102 	add	r3, r3, r2, lsl #2
    2c94:	e0630000 	rsb	r0, r3, r0
    2c98:	e18500b4 	strh	r0, [r5, r4]
    2c9c:	e2844002 	add	r4, r4, #2
    base = allSprites[OBJECT_ID_FLOOR].b;
    allSprites[OBJECT_ID_FLOOR].colorArray = (short int **)malloc(height * sizeof(short int *));
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_FLOOR].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    for(i=0; i<height; i++){
        for(j=0; j<base; j++){
    2ca0:	e3540f96 	cmp	r4, #600	; 0x258
    2ca4:	1afffff1 	bne	2c70 <declareSprites+0x130>
    2ca8:	e2866004 	add	r6, r6, #4
    height = allSprites[OBJECT_ID_FLOOR].h;
    base = allSprites[OBJECT_ID_FLOOR].b;
    allSprites[OBJECT_ID_FLOOR].colorArray = (short int **)malloc(height * sizeof(short int *));
    for (i=0; i<height; i++) 
        allSprites[OBJECT_ID_FLOOR].colorArray[i] = (short int *)malloc(base * sizeof(short int)); 
    for(i=0; i<height; i++){
    2cac:	e356002c 	cmp	r6, #44	; 0x2c
    2cb0:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
    allSprites[OBJECT_ID_FLOOR].id = OBJECT_ID_FLOOR;
    allSprites[OBJECT_ID_FLOOR].b = FLOOR_BASE;
    allSprites[OBJECT_ID_FLOOR].h = FLOOR_HEIGHT;
    height = allSprites[OBJECT_ID_FLOOR].h;
    base = allSprites[OBJECT_ID_FLOOR].b;
    allSprites[OBJECT_ID_FLOOR].colorArray = (short int **)malloc(height * sizeof(short int *));
    2cb4:	e1a0400a 	mov	r4, r10
    2cb8:	eaffffec 	b	2c70 <declareSprites+0x130>

00002cbc <swap>:

volatile int pixel_buffer_start; // global variable

void swap (int* a, int* b){
    int temp;
    temp = *a;
    2cbc:	e5903000 	ldr	r3, [r0]
    *a = *b;
    2cc0:	e5912000 	ldr	r2, [r1]
    2cc4:	e5802000 	str	r2, [r0]
    *b = temp;
    2cc8:	e5813000 	str	r3, [r1]
    2ccc:	e12fff1e 	bx	lr

00002cd0 <plot_pixel>:
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    2cd0:	e3063f9c 	movw	r3, #28572	; 0x6f9c
    2cd4:	e3403000 	movt	r3, #0
    2cd8:	e5933000 	ldr	r3, [r3]
    2cdc:	e1a00080 	lsl	r0, r0, #1
    2ce0:	e0831501 	add	r1, r3, r1, lsl #10
    2ce4:	e18120b0 	strh	r2, [r1, r0]
    2ce8:	e12fff1e 	bx	lr

00002cec <draw_line>:
}

void draw_line(int x1, int y1, int x2, int y2, short int color){
    2cec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2cf0:	e24dd014 	sub	sp, sp, #20
    2cf4:	e58d000c 	str	r0, [sp, #12]
    2cf8:	e58d1008 	str	r1, [sp, #8]
    2cfc:	e58d2004 	str	r2, [sp, #4]
    2d00:	e58d3000 	str	r3, [sp]
    2d04:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    
    bool is_steep = abs(y2-y1) > abs(x2-x1);
    2d08:	e0613003 	rsb	r3, r1, r3
    2d0c:	e3530000 	cmp	r3, #0
    2d10:	b2633000 	rsblt	r3, r3, #0
    2d14:	e0602002 	rsb	r2, r0, r2
    2d18:	e0228fc2 	eor	r8, r2, r2, asr #31
    2d1c:	e0488fc2 	sub	r8, r8, r2, asr #31
    2d20:	e1530008 	cmp	r3, r8
    2d24:	d3a08000 	movle	r8, #0
    2d28:	c3a08001 	movgt	r8, #1
    if (is_steep){
    2d2c:	e3580000 	cmp	r8, #0
    2d30:	0a000005 	beq	2d4c <draw_line+0x60>
        swap (&x1, &y1);
    2d34:	e28d000c 	add	r0, sp, #12
    2d38:	e28d1008 	add	r1, sp, #8
    2d3c:	ebffffde 	bl	2cbc <swap>
        swap (&x2, &y2);
    2d40:	e28d0004 	add	r0, sp, #4
    2d44:	e1a0100d 	mov	r1, sp
    2d48:	ebffffdb 	bl	2cbc <swap>
    }
    if (x2<x1){
    2d4c:	e59d300c 	ldr	r3, [sp, #12]
    2d50:	e59d2004 	ldr	r2, [sp, #4]
    2d54:	e1520003 	cmp	r2, r3
    2d58:	aa000005 	bge	2d74 <draw_line+0x88>
        swap (&x1, &x2);
    2d5c:	e28d000c 	add	r0, sp, #12
    2d60:	e28d1004 	add	r1, sp, #4
    2d64:	ebffffd4 	bl	2cbc <swap>
        swap (&y1, &y2);
    2d68:	e28d0008 	add	r0, sp, #8
    2d6c:	e1a0100d 	mov	r1, sp
    2d70:	ebffffd1 	bl	2cbc <swap>
    }
    
    int dx = x2-x1;
    2d74:	e59d3004 	ldr	r3, [sp, #4]
    2d78:	e59d500c 	ldr	r5, [sp, #12]
    2d7c:	e0659003 	rsb	r9, r5, r3
    int dy = abs(y2-y1);
    2d80:	e59d2000 	ldr	r2, [sp]
    2d84:	e59d6008 	ldr	r6, [sp, #8]
    2d88:	e0667002 	rsb	r7, r6, r2
    2d8c:	e3570000 	cmp	r7, #0
    2d90:	b2677000 	rsblt	r7, r7, #0
    int error = -dx/2;
    2d94:	e2694000 	rsb	r4, r9, #0
    2d98:	e0844fa4 	add	r4, r4, r4, lsr #31
    2d9c:	e1a040c4 	asr	r4, r4, #1
    int x;
    int y = y1;
    int y_step;
    if (y1 < y2){
        y_step = 1;
    2da0:	e1520006 	cmp	r2, r6
    2da4:	d3e0b000 	mvnle	r11, #0
    2da8:	c3a0b001 	movgt	r11, #1
    }
    else y_step = -1;

    for (x = x1; x <= x2; x++){
    2dac:	e1530005 	cmp	r3, r5
    2db0:	ba00000d 	blt	2dec <draw_line+0x100>
        if (is_steep){
    2db4:	e3580000 	cmp	r8, #0
            plot_pixel(y, x, color);
    2db8:	11a00006 	movne	r0, r6
    2dbc:	11a01005 	movne	r1, r5
        }
        else plot_pixel(x, y, color);
    2dc0:	01a00005 	moveq	r0, r5
    2dc4:	01a01006 	moveq	r1, r6
    2dc8:	e1a0200a 	mov	r2, r10
    2dcc:	ebffffbf 	bl	2cd0 <plot_pixel>
        error += dy;
        if (error >= 0){
    2dd0:	e0944007 	adds	r4, r4, r7
            y += y_step;
    2dd4:	5086600b 	addpl	r6, r6, r11
            error -= dx;
    2dd8:	50694004 	rsbpl	r4, r9, r4
    if (y1 < y2){
        y_step = 1;
    }
    else y_step = -1;

    for (x = x1; x <= x2; x++){
    2ddc:	e2855001 	add	r5, r5, #1
    2de0:	e59d3004 	ldr	r3, [sp, #4]
    2de4:	e1530005 	cmp	r3, r5
    2de8:	aafffff1 	bge	2db4 <draw_line+0xc8>
        if (error >= 0){
            y += y_step;
            error -= dx;
        }
    }
}
    2dec:	e28dd014 	add	sp, sp, #20
    2df0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00002df4 <clear_screen>:

void clear_screen(){
    2df4:	e92d4070 	push	{r4, r5, r6, lr}
	int x,y;
    for ( x = 0; x < 320; x++){
    2df8:	e3a05000 	mov	r5, #0
            error -= dx;
        }
    }
}

void clear_screen(){
    2dfc:	e1a06005 	mov	r6, r5
    2e00:	ea000009 	b	2e2c <clear_screen+0x38>
	int x,y;
    for ( x = 0; x < 320; x++){
        for ( y = 0; y < 240; y++){
            plot_pixel(x, y, 0);
    2e04:	e1a00005 	mov	r0, r5
    2e08:	e1a01004 	mov	r1, r4
    2e0c:	e1a02006 	mov	r2, r6
    2e10:	ebffffae 	bl	2cd0 <plot_pixel>
}

void clear_screen(){
	int x,y;
    for ( x = 0; x < 320; x++){
        for ( y = 0; y < 240; y++){
    2e14:	e2844001 	add	r4, r4, #1
    2e18:	e35400f0 	cmp	r4, #240	; 0xf0
    2e1c:	1afffff8 	bne	2e04 <clear_screen+0x10>
    }
}

void clear_screen(){
	int x,y;
    for ( x = 0; x < 320; x++){
    2e20:	e2855001 	add	r5, r5, #1
    2e24:	e3550d05 	cmp	r5, #320	; 0x140
    2e28:	08bd8070 	popeq	{r4, r5, r6, pc}
            error -= dx;
        }
    }
}

void clear_screen(){
    2e2c:	e1a04006 	mov	r4, r6
    2e30:	eafffff3 	b	2e04 <clear_screen+0x10>

00002e34 <wait_for_vsync>:


void wait_for_vsync(){
    volatile int * pixel_ctrl_ptr = 0xFF203020;
    register int status;
    * pixel_ctrl_ptr = 1;
    2e34:	e3033fff 	movw	r3, #16383	; 0x3fff
    2e38:	e34f3f20 	movt	r3, #65312	; 0xff20
    2e3c:	e3a02001 	mov	r2, #1
    2e40:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
    
    status = *(pixel_ctrl_ptr +3);
    2e44:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x1) != 0){
    2e48:	e3130001 	tst	r3, #1
    2e4c:	012fff1e 	bxeq	lr
        //HEX_PS2(byte1, byte2, byte3);
        status = *(pixel_ctrl_ptr +3);
    2e50:	e3032fff 	movw	r2, #16383	; 0x3fff
    2e54:	e34f2f20 	movt	r2, #65312	; 0xff20
    2e58:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    volatile int * pixel_ctrl_ptr = 0xFF203020;
    register int status;
    * pixel_ctrl_ptr = 1;
    
    status = *(pixel_ctrl_ptr +3);
    while ((status & 0x1) != 0){
    2e5c:	e3130001 	tst	r3, #1
    2e60:	1afffffc 	bne	2e58 <wait_for_vsync+0x24>
    2e64:	e12fff1e 	bx	lr

00002e68 <__cs3_reset>:
void MPcore_private_timer_ISR (void);
void PS2_ISR (void);

// Define the exception handlers here 
void __attribute__ ((interrupt)) __cs3_reset (void)
{
    2e68:	eafffffe 	b	2e68 <__cs3_reset>

00002e6c <__cs3_isr_undef>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
    2e6c:	eafffffe 	b	2e6c <__cs3_isr_undef>

00002e70 <__cs3_isr_swi>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
    2e70:	eafffffe 	b	2e70 <__cs3_isr_swi>

00002e74 <__cs3_isr_pabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
    2e74:	eafffffe 	b	2e74 <__cs3_isr_pabort>

00002e78 <__cs3_isr_dabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
    2e78:	eafffffe 	b	2e78 <__cs3_isr_dabort>

00002e7c <__cs3_isr_irq>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
    2e7c:	e24ee004 	sub	lr, lr, #4
    2e80:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	// Read the ICCIAR from the processor interface 
	int address = MPCORE_GIC_CPUIF + ICCIAR; 
	int int_ID = *((int *) address); 
    2e84:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2e88:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
   
	if (int_ID == MPCORE_PRIV_TIMER_IRQ)	// check if interrupt is from the private timer
    2e8c:	e354001d 	cmp	r4, #29
    2e90:	1a000001 	bne	2e9c <__cs3_isr_irq+0x20>
		MPcore_private_timer_ISR ();
    2e94:	ebfffd3f 	bl	2398 <MPcore_private_timer_ISR>
    2e98:	ea000004 	b	2eb0 <__cs3_isr_irq+0x34>
	else if (int_ID == PS2_IRQ)				// check if interrupt is from the PS/2
    2e9c:	e354004f 	cmp	r4, #79	; 0x4f
    2ea0:	1a000001 	bne	2eac <__cs3_isr_irq+0x30>
		PS2_ISR ();
    2ea4:	ebfffe44 	bl	27bc <PS2_ISR>
    2ea8:	ea000000 	b	2eb0 <__cs3_isr_irq+0x34>
    2eac:	eafffffe 	b	2eac <__cs3_isr_irq+0x30>
	else
		while (1);									// if unexpected, then halt

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
	*((int *) address) = int_ID;
    2eb0:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2eb4:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
    2eb8:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00002ebc <__cs3_isr_fiq>:

	return;
} 

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
    2ebc:	eafffffe 	b	2ebc <__cs3_isr_fiq>

00002ec0 <set_A9_IRQ_stack>:
{
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    2ec0:	e3a030d2 	mov	r3, #210	; 0xd2
    2ec4:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    2ec8:	e3e03007 	mvn	r3, #7
    2ecc:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    2ed0:	e3a030d3 	mov	r3, #211	; 0xd3
    2ed4:	e129f003 	msr	CPSR_fc, r3
    2ed8:	e12fff1e 	bx	lr

00002edc <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	int status = SVC_MODE | INT_ENABLE;
	asm("msr cpsr,%[ps]" : : [ps]"r"(status));
    2edc:	e3a03053 	mov	r3, #83	; 0x53
    2ee0:	e129f003 	msr	CPSR_fc, r3
    2ee4:	e12fff1e 	bx	lr

00002ee8 <hw_write_bits>:
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0x1 << (int_ID & 0x1f), value);    
}

void hw_write_bits(volatile int * addr, volatile int unmask, volatile int value)
{     
    2ee8:	e24dd008 	sub	sp, sp, #8
    2eec:	e58d1004 	str	r1, [sp, #4]
    2ef0:	e58d2000 	str	r2, [sp]
    *addr = ((~unmask) & *addr) | value;
    2ef4:	e59d1004 	ldr	r1, [sp, #4]
    2ef8:	e5903000 	ldr	r3, [r0]
    2efc:	e59d2000 	ldr	r2, [sp]
    2f00:	e1c33001 	bic	r3, r3, r1
    2f04:	e1833002 	orr	r3, r3, r2
    2f08:	e5803000 	str	r3, [r0]
}
    2f0c:	e28dd008 	add	sp, sp, #8
    2f10:	e12fff1e 	bx	lr

00002f14 <config_interrupt>:

/* 
 * Configure registers in the GIC for individual interrupt IDs.
*/
void config_interrupt (int int_ID, int CPU_target)
{
    2f14:	e92d4010 	push	{r4, lr}
    2f18:	e1a04000 	mov	r4, r0
	 * addr_offet = #ICDIPTR + n
	 * value = CPU_target << ((int_ID & 0x3) * 8)
	 */
	n = (int_ID >> 2) << 2;
	addr_offset = ICDIPTR + n;
	value = CPU_target << ((int_ID & 0x3) << 3);
    2f1c:	e2003003 	and	r3, r0, #3
    2f20:	e1a03183 	lsl	r3, r3, #3
	/* Set Interrupt Processor Targets Register (ICDIPTRn) to cpu0. 
	 * n = integer_div(int_ID / 4) * 4
	 * addr_offet = #ICDIPTR + n
	 * value = CPU_target << ((int_ID & 0x3) * 8)
	 */
	n = (int_ID >> 2) << 2;
    2f24:	e3c00003 	bic	r0, r0, #3
	addr_offset = ICDIPTR + n;
	value = CPU_target << ((int_ID & 0x3) << 3);
    2f28:	e1a02311 	lsl	r2, r1, r3
	
	/* Now that we know the register address and value, we need to set the correct bits in 
	 * the GIC register, without changing the other bits */
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0xff << ((int_ID & 0x3) << 3), value);  
    2f2c:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
    2f30:	e3a010ff 	mov	r1, #255	; 0xff
    2f34:	e1a01311 	lsl	r1, r1, r3
    2f38:	ebffffea 	bl	2ee8 <hw_write_bits>
	 * n = (integer_div(in_ID / 32) * 4
	 * addr_offset = 0x100 + n
	 * value = enable << (int_ID & 0x1F) */
	n = (int_ID >> 5) << 2; 
	addr_offset = ICDISER + n;
	value = 0x1 << (int_ID & 0x1f);
    2f3c:	e204301f 	and	r3, r4, #31
    2f40:	e3a02001 	mov	r2, #1
    2f44:	e1a02312 	lsl	r2, r2, r3
    
	/* Set Interrupt Set-Enable Registers (ICDISERn). 
	 * n = (integer_div(in_ID / 32) * 4
	 * addr_offset = 0x100 + n
	 * value = enable << (int_ID & 0x1F) */
	n = (int_ID >> 5) << 2; 
    2f48:	e1a002c4 	asr	r0, r4, #5
    2f4c:	e1a00100 	lsl	r0, r0, #2
	addr_offset = ICDISER + n;
    2f50:	e2800c01 	add	r0, r0, #256	; 0x100
	value = 0x1 << (int_ID & 0x1f);
	/* Now that we know the register address and value, we need to set the correct bits in 
	 * the GIC register, without changing the other bits */
	address = MPCORE_GIC_DIST + addr_offset;
	hw_write_bits((int *) address, 0x1 << (int_ID & 0x1f), value);    
    2f54:	e2400a13 	sub	r0, r0, #77824	; 0x13000
    2f58:	e1a01002 	mov	r1, r2
    2f5c:	ebffffe1 	bl	2ee8 <hw_write_bits>
    2f60:	e8bd8010 	pop	{r4, pc}

00002f64 <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
    2f64:	e92d4008 	push	{r3, lr}
	int address;	// used to calculate register addresses

	/* enable some examples of interrupts */
  	config_interrupt (MPCORE_PRIV_TIMER_IRQ, CPU0);
    2f68:	e3a0001d 	mov	r0, #29
    2f6c:	e3a01001 	mov	r1, #1
    2f70:	ebffffe7 	bl	2f14 <config_interrupt>
  	config_interrupt (PS2_IRQ, CPU0);
    2f74:	e3a0004f 	mov	r0, #79	; 0x4f
    2f78:	e3a01001 	mov	r1, #1
    2f7c:	ebffffe4 	bl	2f14 <config_interrupt>
    
  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts for lowest priority 
	address = MPCORE_GIC_CPUIF + ICCPMR;
  	*((int *) address) = 0xFFFF;       
    2f80:	e3e02a13 	mvn	r2, #77824	; 0x13000
    2f84:	e30f3fff 	movw	r3, #65535	; 0xffff
    2f88:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
	*((int *) address) = ENABLE;
    2f8c:	e3a03001 	mov	r3, #1
    2f90:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
	*((int *) address) = ENABLE;   
    2f94:	e3e02a12 	mvn	r2, #73728	; 0x12000
    2f98:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
    2f9c:	e8bd8008 	pop	{r3, pc}

00002fa0 <config_MPcore_private_timer>:
    volatile int * MPcore_private_timer_ptr =
        (int *)MPCORE_PRIV_TIMER; // timer base address

    /* set the timer period */
    int counter = 20000000; // period = 1/(200 MHz) x 40x10^6 = 0.2 sec
    *(MPcore_private_timer_ptr) = counter; // write to timer load register
    2fa0:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2fa4:	e3a02c2d 	mov	r2, #11520	; 0x2d00
    2fa8:	e3402131 	movt	r2, #305	; 0x131
    2fac:	e50329ff 	str	r2, [r3, #-2559]	; 0xfffff601

    /* write to control register to start timer, with interrupts */
    *(MPcore_private_timer_ptr + 2) = 0x7; // int mask = 1, mode = 1, enable = 1
    2fb0:	e3a02007 	mov	r2, #7
    2fb4:	e50329f7 	str	r2, [r3, #-2551]	; 0xfffff609
    2fb8:	e12fff1e 	bx	lr

00002fbc <config_PS2>:

/* setup the PS/2 interrupts */
void config_PS2() {
    volatile int * PS2_ptr = (int *)PS2_BASE; // PS/2 port address

    *(PS2_ptr) = 0xFF; /* reset */
    2fbc:	e3a03000 	mov	r3, #0
    2fc0:	e34f3f20 	movt	r3, #65312	; 0xff20
    2fc4:	e3a020ff 	mov	r2, #255	; 0xff
    2fc8:	e5832100 	str	r2, [r3, #256]	; 0x100
    *(PS2_ptr + 1) =
    2fcc:	e3a02001 	mov	r2, #1
    2fd0:	e5832104 	str	r2, [r3, #260]	; 0x104
    2fd4:	e12fff1e 	bx	lr

00002fd8 <main>:
        0x1; /* write to the PS/2 Control register to enable interrupts */
}

int main(void)
{
    2fd8:	e92d4038 	push	{r3, r4, r5, lr}
	set_A9_IRQ_stack();            // initialize the stack pointer for IRQ mode
    2fdc:	ebffffb7 	bl	2ec0 <set_A9_IRQ_stack>
    config_GIC();                  // configure the general interrupt controller
    2fe0:	ebffffdf 	bl	2f64 <config_GIC>
    config_MPcore_private_timer(); // configure ARM A9 private timer
    2fe4:	ebffffed 	bl	2fa0 <config_MPcore_private_timer>
    config_PS2();  // configure PS/2 port to generate interrupts
    2fe8:	ebfffff3 	bl	2fbc <config_PS2>

    enable_A9_interrupts(); // enable interrupts
    2fec:	ebffffba 	bl	2edc <enable_A9_interrupts>
	/* setup the PS/2 interrupts */
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    //volatile int * keyboard_ctrl_ptr = (int *)0xFF200030;

    //set front pixel buffer to start of FPGA On-chip memory
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
    2ff0:	e3034fff 	movw	r4, #16383	; 0x3fff
    2ff4:	e34f4f20 	movt	r4, #65312	; 0xff20
    2ff8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    2ffc:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
                                        // back buffer
    //now, swap the front/back buffers, to set the front buffer location
    wait_for_vsync();
    3000:	ebffff8b 	bl	2e34 <wait_for_vsync>
    //initialize a pointer to the pixel buffer, used by drawing functions
    pixel_buffer_start = *pixel_ctrl_ptr;
    3004:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
    3008:	e3065f9c 	movw	r5, #28572	; 0x6f9c
    300c:	e3405000 	movt	r5, #0
    3010:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
    3014:	ebffff76 	bl	2df4 <clear_screen>
    //set back pixel buffer to start of SDRAM memory
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    3018:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
    301c:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    3020:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
    3024:	e5853000 	str	r3, [r5]
    
    initializeGame();
    3028:	ebfffb21 	bl	1cb4 <initializeGame>
        move();
        Visible_draw();
      
        
        wait_for_vsync();
        pixel_buffer_start = *(pixel_ctrl_ptr + 1);
    302c:	e3035fff 	movw	r5, #16383	; 0x3fff
    3030:	e34f5f20 	movt	r5, #65312	; 0xff20
    3034:	e3064f9c 	movw	r4, #28572	; 0x6f9c
    3038:	e3404000 	movt	r4, #0
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    
    initializeGame();
    while (1){
        clear_screen();
    303c:	ebffff6c 	bl	2df4 <clear_screen>
        update_objects();
    3040:	ebfffc03 	bl	2054 <update_objects>
        move();
    3044:	ebfffc92 	bl	2294 <move>
        Visible_draw();
    3048:	ebfffb86 	bl	1e68 <Visible_draw>
      
        
        wait_for_vsync();
    304c:	ebffff78 	bl	2e34 <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1);
    3050:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
    3054:	e5843000 	str	r3, [r4]
    3058:	eafffff7 	b	303c <main+0x64>

0000305c <atexit>:
    305c:	e1a01000 	mov	r1, r0
    3060:	e3a00000 	mov	r0, #0
    3064:	e92d4008 	push	{r3, lr}
    3068:	e1a02000 	mov	r2, r0
    306c:	e1a03000 	mov	r3, r0
    3070:	eb00025b 	bl	39e4 <__register_exitproc>
    3074:	e8bd4008 	pop	{r3, lr}
    3078:	e12fff1e 	bx	lr

0000307c <exit>:
    307c:	e92d4008 	push	{r3, lr}
    3080:	e3a01000 	mov	r1, #0
    3084:	e1a04000 	mov	r4, r0
    3088:	eb000292 	bl	3ad8 <__call_exitprocs>
    308c:	e59f3018 	ldr	r3, [pc, #24]	; 30ac <exit+0x30>
    3090:	e5930000 	ldr	r0, [r3]
    3094:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    3098:	e3530000 	cmp	r3, #0
    309c:	11a0e00f 	movne	lr, pc
    30a0:	112fff13 	bxne	r3
    30a4:	e1a00004 	mov	r0, r4
    30a8:	eb000b78 	bl	5e90 <_exit>
    30ac:	00006594 	.word	0x00006594

000030b0 <malloc>:
    30b0:	e92d4008 	push	{r3, lr}
    30b4:	e59f3010 	ldr	r3, [pc, #16]	; 30cc <malloc+0x1c>
    30b8:	e1a01000 	mov	r1, r0
    30bc:	e5930000 	ldr	r0, [r3]
    30c0:	eb00000a 	bl	30f0 <_malloc_r>
    30c4:	e8bd4008 	pop	{r3, lr}
    30c8:	e12fff1e 	bx	lr
    30cc:	00006600 	.word	0x00006600

000030d0 <free>:
    30d0:	e92d4008 	push	{r3, lr}
    30d4:	e59f3010 	ldr	r3, [pc, #16]	; 30ec <free+0x1c>
    30d8:	e1a01000 	mov	r1, r0
    30dc:	e5930000 	ldr	r0, [r3]
    30e0:	eb000334 	bl	3db8 <_free_r>
    30e4:	e8bd4008 	pop	{r3, lr}
    30e8:	e12fff1e 	bx	lr
    30ec:	00006600 	.word	0x00006600

000030f0 <_malloc_r>:
    30f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    30f4:	e281500b 	add	r5, r1, #11
    30f8:	e3550016 	cmp	r5, #22
    30fc:	83c55007 	bichi	r5, r5, #7
    3100:	81a03fa5 	lsrhi	r3, r5, #31
    3104:	93a03000 	movls	r3, #0
    3108:	93a05010 	movls	r5, #16
    310c:	e1550001 	cmp	r5, r1
    3110:	21a01003 	movcs	r1, r3
    3114:	33831001 	orrcc	r1, r3, #1
    3118:	e3510000 	cmp	r1, #0
    311c:	13a0300c 	movne	r3, #12
    3120:	e24dd00c 	sub	sp, sp, #12
    3124:	e1a06000 	mov	r6, r0
    3128:	15803000 	strne	r3, [r0]
    312c:	13a04000 	movne	r4, #0
    3130:	1a000015 	bne	318c <_malloc_r+0x9c>
    3134:	eb0001b4 	bl	380c <__malloc_lock>
    3138:	e3550f7e 	cmp	r5, #504	; 0x1f8
    313c:	2a000016 	bcs	319c <_malloc_r+0xac>
    3140:	e59f76b8 	ldr	r7, [pc, #1720]	; 3800 <_malloc_r+0x710>
    3144:	e1a0e1a5 	lsr	lr, r5, #3
    3148:	e087318e 	add	r3, r7, lr, lsl #3
    314c:	e593400c 	ldr	r4, [r3, #12]
    3150:	e1540003 	cmp	r4, r3
    3154:	0a00014b 	beq	3688 <_malloc_r+0x598>
    3158:	e5943004 	ldr	r3, [r4, #4]
    315c:	e3c33003 	bic	r3, r3, #3
    3160:	e0843003 	add	r3, r4, r3
    3164:	e5930004 	ldr	r0, [r3, #4]
    3168:	e2841008 	add	r1, r4, #8
    316c:	e8910006 	ldm	r1, {r1, r2}
    3170:	e3800001 	orr	r0, r0, #1
    3174:	e5830004 	str	r0, [r3, #4]
    3178:	e581200c 	str	r2, [r1, #12]
    317c:	e5821008 	str	r1, [r2, #8]
    3180:	e1a00006 	mov	r0, r6
    3184:	eb0001a1 	bl	3810 <__malloc_unlock>
    3188:	e2844008 	add	r4, r4, #8
    318c:	e1a00004 	mov	r0, r4
    3190:	e28dd00c 	add	sp, sp, #12
    3194:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3198:	e12fff1e 	bx	lr
    319c:	e1b0e4a5 	lsrs	lr, r5, #9
    31a0:	01a0e1a5 	lsreq	lr, r5, #3
    31a4:	01a0108e 	lsleq	r1, lr, #1
    31a8:	1a000061 	bne	3334 <_malloc_r+0x244>
    31ac:	e59f764c 	ldr	r7, [pc, #1612]	; 3800 <_malloc_r+0x710>
    31b0:	e0871101 	add	r1, r7, r1, lsl #2
    31b4:	e591400c 	ldr	r4, [r1, #12]
    31b8:	e1510004 	cmp	r1, r4
    31bc:	1a000005 	bne	31d8 <_malloc_r+0xe8>
    31c0:	ea00000a 	b	31f0 <_malloc_r+0x100>
    31c4:	e3530000 	cmp	r3, #0
    31c8:	aa0000d7 	bge	352c <_malloc_r+0x43c>
    31cc:	e594400c 	ldr	r4, [r4, #12]
    31d0:	e1510004 	cmp	r1, r4
    31d4:	0a000005 	beq	31f0 <_malloc_r+0x100>
    31d8:	e5942004 	ldr	r2, [r4, #4]
    31dc:	e3c22003 	bic	r2, r2, #3
    31e0:	e0653002 	rsb	r3, r5, r2
    31e4:	e353000f 	cmp	r3, #15
    31e8:	dafffff5 	ble	31c4 <_malloc_r+0xd4>
    31ec:	e24ee001 	sub	lr, lr, #1
    31f0:	e28ee001 	add	lr, lr, #1
    31f4:	e59f3604 	ldr	r3, [pc, #1540]	; 3800 <_malloc_r+0x710>
    31f8:	e5974010 	ldr	r4, [r7, #16]
    31fc:	e2838008 	add	r8, r3, #8
    3200:	e1540008 	cmp	r4, r8
    3204:	05931004 	ldreq	r1, [r3, #4]
    3208:	0a000016 	beq	3268 <_malloc_r+0x178>
    320c:	e5942004 	ldr	r2, [r4, #4]
    3210:	e3c22003 	bic	r2, r2, #3
    3214:	e0651002 	rsb	r1, r5, r2
    3218:	e351000f 	cmp	r1, #15
    321c:	ca0000f7 	bgt	3600 <_malloc_r+0x510>
    3220:	e3510000 	cmp	r1, #0
    3224:	e5838014 	str	r8, [r3, #20]
    3228:	e5838010 	str	r8, [r3, #16]
    322c:	aa000046 	bge	334c <_malloc_r+0x25c>
    3230:	e3520c02 	cmp	r2, #512	; 0x200
    3234:	2a0000d2 	bcs	3584 <_malloc_r+0x494>
    3238:	e5930004 	ldr	r0, [r3, #4]
    323c:	e1a021a2 	lsr	r2, r2, #3
    3240:	e1a01142 	asr	r1, r2, #2
    3244:	e3a0c001 	mov	r12, #1
    3248:	e180111c 	orr	r1, r0, r12, lsl r1
    324c:	e0832182 	add	r2, r3, r2, lsl #3
    3250:	e5920008 	ldr	r0, [r2, #8]
    3254:	e584200c 	str	r2, [r4, #12]
    3258:	e5840008 	str	r0, [r4, #8]
    325c:	e5831004 	str	r1, [r3, #4]
    3260:	e5824008 	str	r4, [r2, #8]
    3264:	e580400c 	str	r4, [r0, #12]
    3268:	e1a0014e 	asr	r0, lr, #2
    326c:	e3a03001 	mov	r3, #1
    3270:	e1a00013 	lsl	r0, r3, r0
    3274:	e1500001 	cmp	r0, r1
    3278:	8a00003b 	bhi	336c <_malloc_r+0x27c>
    327c:	e1110000 	tst	r1, r0
    3280:	1a000008 	bne	32a8 <_malloc_r+0x1b8>
    3284:	e1a00310 	lsl	r0, r0, r3
    3288:	e3cee003 	bic	lr, lr, #3
    328c:	e1110000 	tst	r1, r0
    3290:	e28ee004 	add	lr, lr, #4
    3294:	1a000003 	bne	32a8 <_malloc_r+0x1b8>
    3298:	e1a00080 	lsl	r0, r0, #1
    329c:	e1110000 	tst	r1, r0
    32a0:	e28ee004 	add	lr, lr, #4
    32a4:	0afffffb 	beq	3298 <_malloc_r+0x1a8>
    32a8:	e087a18e 	add	r10, r7, lr, lsl #3
    32ac:	e1a0c00a 	mov	r12, r10
    32b0:	e1a0400e 	mov	r4, lr
    32b4:	e59c300c 	ldr	r3, [r12, #12]
    32b8:	e15c0003 	cmp	r12, r3
    32bc:	1a000005 	bne	32d8 <_malloc_r+0x1e8>
    32c0:	ea0000db 	b	3634 <_malloc_r+0x544>
    32c4:	e3520000 	cmp	r2, #0
    32c8:	aa0000f4 	bge	36a0 <_malloc_r+0x5b0>
    32cc:	e593300c 	ldr	r3, [r3, #12]
    32d0:	e15c0003 	cmp	r12, r3
    32d4:	0a0000d6 	beq	3634 <_malloc_r+0x544>
    32d8:	e5931004 	ldr	r1, [r3, #4]
    32dc:	e3c11003 	bic	r1, r1, #3
    32e0:	e0652001 	rsb	r2, r5, r1
    32e4:	e352000f 	cmp	r2, #15
    32e8:	dafffff5 	ble	32c4 <_malloc_r+0x1d4>
    32ec:	e1a04003 	mov	r4, r3
    32f0:	e593000c 	ldr	r0, [r3, #12]
    32f4:	e5b4c008 	ldr	r12, [r4, #8]!
    32f8:	e0831005 	add	r1, r3, r5
    32fc:	e382e001 	orr	lr, r2, #1
    3300:	e3855001 	orr	r5, r5, #1
    3304:	e58c000c 	str	r0, [r12, #12]
    3308:	e580c008 	str	r12, [r0, #8]
    330c:	e5835004 	str	r5, [r3, #4]
    3310:	e5871014 	str	r1, [r7, #20]
    3314:	e5871010 	str	r1, [r7, #16]
    3318:	e581800c 	str	r8, [r1, #12]
    331c:	e5818008 	str	r8, [r1, #8]
    3320:	e581e004 	str	lr, [r1, #4]
    3324:	e7812002 	str	r2, [r1, r2]
    3328:	e1a00006 	mov	r0, r6
    332c:	eb000137 	bl	3810 <__malloc_unlock>
    3330:	eaffff95 	b	318c <_malloc_r+0x9c>
    3334:	e35e0004 	cmp	lr, #4
    3338:	8a000087 	bhi	355c <_malloc_r+0x46c>
    333c:	e1a0e325 	lsr	lr, r5, #6
    3340:	e28ee038 	add	lr, lr, #56	; 0x38
    3344:	e1a0108e 	lsl	r1, lr, #1
    3348:	eaffff97 	b	31ac <_malloc_r+0xbc>
    334c:	e0842002 	add	r2, r4, r2
    3350:	e5923004 	ldr	r3, [r2, #4]
    3354:	e3833001 	orr	r3, r3, #1
    3358:	e5823004 	str	r3, [r2, #4]
    335c:	e1a00006 	mov	r0, r6
    3360:	eb00012a 	bl	3810 <__malloc_unlock>
    3364:	e2844008 	add	r4, r4, #8
    3368:	eaffff87 	b	318c <_malloc_r+0x9c>
    336c:	e5974008 	ldr	r4, [r7, #8]
    3370:	e594a004 	ldr	r10, [r4, #4]
    3374:	e3caa003 	bic	r10, r10, #3
    3378:	e155000a 	cmp	r5, r10
    337c:	8a000002 	bhi	338c <_malloc_r+0x29c>
    3380:	e065300a 	rsb	r3, r5, r10
    3384:	e353000f 	cmp	r3, #15
    3388:	ca00005d 	bgt	3504 <_malloc_r+0x414>
    338c:	e59f9470 	ldr	r9, [pc, #1136]	; 3804 <_malloc_r+0x714>
    3390:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    3394:	e599b000 	ldr	r11, [r9]
    3398:	e3730001 	cmn	r3, #1
    339c:	e085b00b 	add	r11, r5, r11
    33a0:	128bba01 	addne	r11, r11, #4096	; 0x1000
    33a4:	128bb00f 	addne	r11, r11, #15
    33a8:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    33ac:	028bb010 	addeq	r11, r11, #16
    33b0:	13cbb00f 	bicne	r11, r11, #15
    33b4:	e084200a 	add	r2, r4, r10
    33b8:	e1a00006 	mov	r0, r6
    33bc:	e1a0100b 	mov	r1, r11
    33c0:	e58d2004 	str	r2, [sp, #4]
    33c4:	eb00015e 	bl	3944 <_sbrk_r>
    33c8:	e3700001 	cmn	r0, #1
    33cc:	e1a08000 	mov	r8, r0
    33d0:	e59d2004 	ldr	r2, [sp, #4]
    33d4:	0a0000e2 	beq	3764 <_malloc_r+0x674>
    33d8:	e1520000 	cmp	r2, r0
    33dc:	8a0000bf 	bhi	36e0 <_malloc_r+0x5f0>
    33e0:	e5993004 	ldr	r3, [r9, #4]
    33e4:	e1520008 	cmp	r2, r8
    33e8:	e08b3003 	add	r3, r11, r3
    33ec:	e5893004 	str	r3, [r9, #4]
    33f0:	0a0000df 	beq	3774 <_malloc_r+0x684>
    33f4:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    33f8:	e3710001 	cmn	r1, #1
    33fc:	10622008 	rsbne	r2, r2, r8
    3400:	059f33f8 	ldreq	r3, [pc, #1016]	; 3800 <_malloc_r+0x710>
    3404:	10833002 	addne	r3, r3, r2
    3408:	05838408 	streq	r8, [r3, #1032]	; 0x408
    340c:	15893004 	strne	r3, [r9, #4]
    3410:	e2183007 	ands	r3, r8, #7
    3414:	12632008 	rsbne	r2, r3, #8
    3418:	10888002 	addne	r8, r8, r2
    341c:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    3420:	12832008 	addne	r2, r3, #8
    3424:	e088300b 	add	r3, r8, r11
    3428:	03a02a01 	moveq	r2, #4096	; 0x1000
    342c:	e1a03a03 	lsl	r3, r3, #20
    3430:	e042ba23 	sub	r11, r2, r3, lsr #20
    3434:	e1a0100b 	mov	r1, r11
    3438:	e1a00006 	mov	r0, r6
    343c:	eb000140 	bl	3944 <_sbrk_r>
    3440:	e3700001 	cmn	r0, #1
    3444:	10682000 	rsbne	r2, r8, r0
    3448:	e5993004 	ldr	r3, [r9, #4]
    344c:	108b2002 	addne	r2, r11, r2
    3450:	03a0b000 	moveq	r11, #0
    3454:	13822001 	orrne	r2, r2, #1
    3458:	03a02001 	moveq	r2, #1
    345c:	e08b3003 	add	r3, r11, r3
    3460:	e1540007 	cmp	r4, r7
    3464:	e5893004 	str	r3, [r9, #4]
    3468:	e5878008 	str	r8, [r7, #8]
    346c:	e5882004 	str	r2, [r8, #4]
    3470:	0a00000d 	beq	34ac <_malloc_r+0x3bc>
    3474:	e35a000f 	cmp	r10, #15
    3478:	9a0000ac 	bls	3730 <_malloc_r+0x640>
    347c:	e594c004 	ldr	r12, [r4, #4]
    3480:	e24a200c 	sub	r2, r10, #12
    3484:	e3c22007 	bic	r2, r2, #7
    3488:	e20cc001 	and	r12, r12, #1
    348c:	e0841002 	add	r1, r4, r2
    3490:	e3a00005 	mov	r0, #5
    3494:	e182c00c 	orr	r12, r2, r12
    3498:	e352000f 	cmp	r2, #15
    349c:	e584c004 	str	r12, [r4, #4]
    34a0:	e5810004 	str	r0, [r1, #4]
    34a4:	e5810008 	str	r0, [r1, #8]
    34a8:	8a0000b8 	bhi	3790 <_malloc_r+0x6a0>
    34ac:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    34b0:	e1530002 	cmp	r3, r2
    34b4:	859f2348 	ldrhi	r2, [pc, #840]	; 3804 <_malloc_r+0x714>
    34b8:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    34bc:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    34c0:	e5974008 	ldr	r4, [r7, #8]
    34c4:	e1530002 	cmp	r3, r2
    34c8:	95943004 	ldrls	r3, [r4, #4]
    34cc:	85942004 	ldrhi	r2, [r4, #4]
    34d0:	859f132c 	ldrhi	r1, [pc, #812]	; 3804 <_malloc_r+0x714>
    34d4:	93c33003 	bicls	r3, r3, #3
    34d8:	85813030 	strhi	r3, [r1, #48]	; 0x30
    34dc:	83c23003 	bichi	r3, r2, #3
    34e0:	e1550003 	cmp	r5, r3
    34e4:	e0653003 	rsb	r3, r5, r3
    34e8:	8a000001 	bhi	34f4 <_malloc_r+0x404>
    34ec:	e353000f 	cmp	r3, #15
    34f0:	ca000003 	bgt	3504 <_malloc_r+0x414>
    34f4:	e1a00006 	mov	r0, r6
    34f8:	eb0000c4 	bl	3810 <__malloc_unlock>
    34fc:	e3a04000 	mov	r4, #0
    3500:	eaffff21 	b	318c <_malloc_r+0x9c>
    3504:	e0842005 	add	r2, r4, r5
    3508:	e3833001 	orr	r3, r3, #1
    350c:	e3855001 	orr	r5, r5, #1
    3510:	e5845004 	str	r5, [r4, #4]
    3514:	e1a00006 	mov	r0, r6
    3518:	e5823004 	str	r3, [r2, #4]
    351c:	e5872008 	str	r2, [r7, #8]
    3520:	e2844008 	add	r4, r4, #8
    3524:	eb0000b9 	bl	3810 <__malloc_unlock>
    3528:	eaffff17 	b	318c <_malloc_r+0x9c>
    352c:	e0842002 	add	r2, r4, r2
    3530:	e5920004 	ldr	r0, [r2, #4]
    3534:	e2841008 	add	r1, r4, #8
    3538:	e891000a 	ldm	r1, {r1, r3}
    353c:	e3800001 	orr	r0, r0, #1
    3540:	e5820004 	str	r0, [r2, #4]
    3544:	e581300c 	str	r3, [r1, #12]
    3548:	e5831008 	str	r1, [r3, #8]
    354c:	e1a00006 	mov	r0, r6
    3550:	eb0000ae 	bl	3810 <__malloc_unlock>
    3554:	e2844008 	add	r4, r4, #8
    3558:	eaffff0b 	b	318c <_malloc_r+0x9c>
    355c:	e35e0014 	cmp	lr, #20
    3560:	928ee05b 	addls	lr, lr, #91	; 0x5b
    3564:	91a0108e 	lslls	r1, lr, #1
    3568:	9affff0f 	bls	31ac <_malloc_r+0xbc>
    356c:	e35e0054 	cmp	lr, #84	; 0x54
    3570:	8a000061 	bhi	36fc <_malloc_r+0x60c>
    3574:	e1a0e625 	lsr	lr, r5, #12
    3578:	e28ee06e 	add	lr, lr, #110	; 0x6e
    357c:	e1a0108e 	lsl	r1, lr, #1
    3580:	eaffff09 	b	31ac <_malloc_r+0xbc>
    3584:	e1a034a2 	lsr	r3, r2, #9
    3588:	e3530004 	cmp	r3, #4
    358c:	9a00004f 	bls	36d0 <_malloc_r+0x5e0>
    3590:	e3530014 	cmp	r3, #20
    3594:	9283a05b 	addls	r10, r3, #91	; 0x5b
    3598:	91a0008a 	lslls	r0, r10, #1
    359c:	9a000004 	bls	35b4 <_malloc_r+0x4c4>
    35a0:	e3530054 	cmp	r3, #84	; 0x54
    35a4:	8a00007f 	bhi	37a8 <_malloc_r+0x6b8>
    35a8:	e1a0a622 	lsr	r10, r2, #12
    35ac:	e28aa06e 	add	r10, r10, #110	; 0x6e
    35b0:	e1a0008a 	lsl	r0, r10, #1
    35b4:	e0870100 	add	r0, r7, r0, lsl #2
    35b8:	e5903008 	ldr	r3, [r0, #8]
    35bc:	e1530000 	cmp	r3, r0
    35c0:	e59fc238 	ldr	r12, [pc, #568]	; 3800 <_malloc_r+0x710>
    35c4:	0a000052 	beq	3714 <_malloc_r+0x624>
    35c8:	e5931004 	ldr	r1, [r3, #4]
    35cc:	e3c11003 	bic	r1, r1, #3
    35d0:	e1520001 	cmp	r2, r1
    35d4:	2a000002 	bcs	35e4 <_malloc_r+0x4f4>
    35d8:	e5933008 	ldr	r3, [r3, #8]
    35dc:	e1500003 	cmp	r0, r3
    35e0:	1afffff8 	bne	35c8 <_malloc_r+0x4d8>
    35e4:	e593200c 	ldr	r2, [r3, #12]
    35e8:	e5971004 	ldr	r1, [r7, #4]
    35ec:	e584200c 	str	r2, [r4, #12]
    35f0:	e5843008 	str	r3, [r4, #8]
    35f4:	e583400c 	str	r4, [r3, #12]
    35f8:	e5824008 	str	r4, [r2, #8]
    35fc:	eaffff19 	b	3268 <_malloc_r+0x178>
    3600:	e0842005 	add	r2, r4, r5
    3604:	e3810001 	orr	r0, r1, #1
    3608:	e3855001 	orr	r5, r5, #1
    360c:	e5845004 	str	r5, [r4, #4]
    3610:	e5832014 	str	r2, [r3, #20]
    3614:	e5832010 	str	r2, [r3, #16]
    3618:	e582800c 	str	r8, [r2, #12]
    361c:	e9820101 	stmib	r2, {r0, r8}
    3620:	e7821001 	str	r1, [r2, r1]
    3624:	e1a00006 	mov	r0, r6
    3628:	eb000078 	bl	3810 <__malloc_unlock>
    362c:	e2844008 	add	r4, r4, #8
    3630:	eafffed5 	b	318c <_malloc_r+0x9c>
    3634:	e2844001 	add	r4, r4, #1
    3638:	e3140003 	tst	r4, #3
    363c:	e28cc008 	add	r12, r12, #8
    3640:	1affff1b 	bne	32b4 <_malloc_r+0x1c4>
    3644:	e31e0003 	tst	lr, #3
    3648:	e24a3008 	sub	r3, r10, #8
    364c:	0a000062 	beq	37dc <_malloc_r+0x6ec>
    3650:	e59aa000 	ldr	r10, [r10]
    3654:	e15a0003 	cmp	r10, r3
    3658:	e24ee001 	sub	lr, lr, #1
    365c:	0afffff8 	beq	3644 <_malloc_r+0x554>
    3660:	e5973004 	ldr	r3, [r7, #4]
    3664:	e1a00080 	lsl	r0, r0, #1
    3668:	e1500003 	cmp	r0, r3
    366c:	8affff3e 	bhi	336c <_malloc_r+0x27c>
    3670:	e3500000 	cmp	r0, #0
    3674:	0affff3c 	beq	336c <_malloc_r+0x27c>
    3678:	e1130000 	tst	r3, r0
    367c:	0a00005a 	beq	37ec <_malloc_r+0x6fc>
    3680:	e1a0e004 	mov	lr, r4
    3684:	eaffff07 	b	32a8 <_malloc_r+0x1b8>
    3688:	e2843008 	add	r3, r4, #8
    368c:	e5944014 	ldr	r4, [r4, #20]
    3690:	e1530004 	cmp	r3, r4
    3694:	028ee002 	addeq	lr, lr, #2
    3698:	0afffed5 	beq	31f4 <_malloc_r+0x104>
    369c:	eafffead 	b	3158 <_malloc_r+0x68>
    36a0:	e0831001 	add	r1, r3, r1
    36a4:	e5910004 	ldr	r0, [r1, #4]
    36a8:	e1a04003 	mov	r4, r3
    36ac:	e5b42008 	ldr	r2, [r4, #8]!
    36b0:	e593300c 	ldr	r3, [r3, #12]
    36b4:	e3800001 	orr	r0, r0, #1
    36b8:	e5810004 	str	r0, [r1, #4]
    36bc:	e582300c 	str	r3, [r2, #12]
    36c0:	e5832008 	str	r2, [r3, #8]
    36c4:	e1a00006 	mov	r0, r6
    36c8:	eb000050 	bl	3810 <__malloc_unlock>
    36cc:	eafffeae 	b	318c <_malloc_r+0x9c>
    36d0:	e1a0a322 	lsr	r10, r2, #6
    36d4:	e28aa038 	add	r10, r10, #56	; 0x38
    36d8:	e1a0008a 	lsl	r0, r10, #1
    36dc:	eaffffb4 	b	35b4 <_malloc_r+0x4c4>
    36e0:	e1540007 	cmp	r4, r7
    36e4:	0affff3d 	beq	33e0 <_malloc_r+0x2f0>
    36e8:	e59f3110 	ldr	r3, [pc, #272]	; 3800 <_malloc_r+0x710>
    36ec:	e5934008 	ldr	r4, [r3, #8]
    36f0:	e5943004 	ldr	r3, [r4, #4]
    36f4:	e3c33003 	bic	r3, r3, #3
    36f8:	eaffff78 	b	34e0 <_malloc_r+0x3f0>
    36fc:	e35e0f55 	cmp	lr, #340	; 0x154
    3700:	8a00000f 	bhi	3744 <_malloc_r+0x654>
    3704:	e1a0e7a5 	lsr	lr, r5, #15
    3708:	e28ee077 	add	lr, lr, #119	; 0x77
    370c:	e1a0108e 	lsl	r1, lr, #1
    3710:	eafffea5 	b	31ac <_malloc_r+0xbc>
    3714:	e59c2004 	ldr	r2, [r12, #4]
    3718:	e1a0a14a 	asr	r10, r10, #2
    371c:	e3a01001 	mov	r1, #1
    3720:	e1821a11 	orr	r1, r2, r1, lsl r10
    3724:	e1a02003 	mov	r2, r3
    3728:	e58c1004 	str	r1, [r12, #4]
    372c:	eaffffae 	b	35ec <_malloc_r+0x4fc>
    3730:	e3a03001 	mov	r3, #1
    3734:	e5883004 	str	r3, [r8, #4]
    3738:	e1a04008 	mov	r4, r8
    373c:	e3a03000 	mov	r3, #0
    3740:	eaffff66 	b	34e0 <_malloc_r+0x3f0>
    3744:	e59f30bc 	ldr	r3, [pc, #188]	; 3808 <_malloc_r+0x718>
    3748:	e15e0003 	cmp	lr, r3
    374c:	91a0e925 	lsrls	lr, r5, #18
    3750:	928ee07c 	addls	lr, lr, #124	; 0x7c
    3754:	91a0108e 	lslls	r1, lr, #1
    3758:	83a010fc 	movhi	r1, #252	; 0xfc
    375c:	83a0e07e 	movhi	lr, #126	; 0x7e
    3760:	eafffe91 	b	31ac <_malloc_r+0xbc>
    3764:	e5974008 	ldr	r4, [r7, #8]
    3768:	e5943004 	ldr	r3, [r4, #4]
    376c:	e3c33003 	bic	r3, r3, #3
    3770:	eaffff5a 	b	34e0 <_malloc_r+0x3f0>
    3774:	e1b01a02 	lsls	r1, r2, #20
    3778:	1affff1d 	bne	33f4 <_malloc_r+0x304>
    377c:	e5972008 	ldr	r2, [r7, #8]
    3780:	e08b100a 	add	r1, r11, r10
    3784:	e3811001 	orr	r1, r1, #1
    3788:	e5821004 	str	r1, [r2, #4]
    378c:	eaffff46 	b	34ac <_malloc_r+0x3bc>
    3790:	e1a00006 	mov	r0, r6
    3794:	e2841008 	add	r1, r4, #8
    3798:	eb000186 	bl	3db8 <_free_r>
    379c:	e59f3060 	ldr	r3, [pc, #96]	; 3804 <_malloc_r+0x714>
    37a0:	e5933004 	ldr	r3, [r3, #4]
    37a4:	eaffff40 	b	34ac <_malloc_r+0x3bc>
    37a8:	e3530f55 	cmp	r3, #340	; 0x154
    37ac:	91a0a7a2 	lsrls	r10, r2, #15
    37b0:	928aa077 	addls	r10, r10, #119	; 0x77
    37b4:	91a0008a 	lslls	r0, r10, #1
    37b8:	9affff7d 	bls	35b4 <_malloc_r+0x4c4>
    37bc:	e59f1044 	ldr	r1, [pc, #68]	; 3808 <_malloc_r+0x718>
    37c0:	e1530001 	cmp	r3, r1
    37c4:	91a0a922 	lsrls	r10, r2, #18
    37c8:	928aa07c 	addls	r10, r10, #124	; 0x7c
    37cc:	91a0008a 	lslls	r0, r10, #1
    37d0:	83a000fc 	movhi	r0, #252	; 0xfc
    37d4:	83a0a07e 	movhi	r10, #126	; 0x7e
    37d8:	eaffff75 	b	35b4 <_malloc_r+0x4c4>
    37dc:	e5973004 	ldr	r3, [r7, #4]
    37e0:	e1c33000 	bic	r3, r3, r0
    37e4:	e5873004 	str	r3, [r7, #4]
    37e8:	eaffff9d 	b	3664 <_malloc_r+0x574>
    37ec:	e1a00080 	lsl	r0, r0, #1
    37f0:	e1130000 	tst	r3, r0
    37f4:	e2844004 	add	r4, r4, #4
    37f8:	1affffa0 	bne	3680 <_malloc_r+0x590>
    37fc:	eafffffa 	b	37ec <_malloc_r+0x6fc>
    3800:	00006a30 	.word	0x00006a30
    3804:	00006fa8 	.word	0x00006fa8
    3808:	00000554 	.word	0x00000554

0000380c <__malloc_lock>:
    380c:	e12fff1e 	bx	lr

00003810 <__malloc_unlock>:
    3810:	e12fff1e 	bx	lr

00003814 <_puts_r>:
    3814:	e92d4030 	push	{r4, r5, lr}
    3818:	e1a05000 	mov	r5, r0
    381c:	e24dd024 	sub	sp, sp, #36	; 0x24
    3820:	e1a00001 	mov	r0, r1
    3824:	e1a04001 	mov	r4, r1
    3828:	eb000055 	bl	3984 <strlen>
    382c:	e59f307c 	ldr	r3, [pc, #124]	; 38b0 <_puts_r+0x9c>
    3830:	e5933000 	ldr	r3, [r3]
    3834:	e1a02000 	mov	r2, r0
    3838:	e5933008 	ldr	r3, [r3, #8]
    383c:	e58d2014 	str	r2, [sp, #20]
    3840:	e59f206c 	ldr	r2, [pc, #108]	; 38b4 <_puts_r+0xa0>
    3844:	e1d310bc 	ldrh	r1, [r3, #12]
    3848:	e58d2018 	str	r2, [sp, #24]
    384c:	e3a02001 	mov	r2, #1
    3850:	e58d201c 	str	r2, [sp, #28]
    3854:	e28d2010 	add	r2, sp, #16
    3858:	e3110a02 	tst	r1, #8192	; 0x2000
    385c:	e58d2004 	str	r2, [sp, #4]
    3860:	e3a02002 	mov	r2, #2
    3864:	e58d2008 	str	r2, [sp, #8]
    3868:	05932064 	ldreq	r2, [r3, #100]	; 0x64
    386c:	03811a02 	orreq	r1, r1, #8192	; 0x2000
    3870:	03c22a02 	biceq	r2, r2, #8192	; 0x2000
    3874:	e2800001 	add	r0, r0, #1
    3878:	01c310bc 	strheq	r1, [r3, #12]
    387c:	05832064 	streq	r2, [r3, #100]	; 0x64
    3880:	e58d000c 	str	r0, [sp, #12]
    3884:	e5951008 	ldr	r1, [r5, #8]
    3888:	e1a00005 	mov	r0, r5
    388c:	e28d2004 	add	r2, sp, #4
    3890:	e58d4010 	str	r4, [sp, #16]
    3894:	eb0001e2 	bl	4024 <__sfvwrite_r>
    3898:	e3500000 	cmp	r0, #0
    389c:	03a0000a 	moveq	r0, #10
    38a0:	13e00000 	mvnne	r0, #0
    38a4:	e28dd024 	add	sp, sp, #36	; 0x24
    38a8:	e8bd4030 	pop	{r4, r5, lr}
    38ac:	e12fff1e 	bx	lr
    38b0:	00006600 	.word	0x00006600
    38b4:	0000659c 	.word	0x0000659c

000038b8 <puts>:
    38b8:	e59f3008 	ldr	r3, [pc, #8]	; 38c8 <puts+0x10>
    38bc:	e1a01000 	mov	r1, r0
    38c0:	e5930000 	ldr	r0, [r3]
    38c4:	eaffffd2 	b	3814 <_puts_r>
    38c8:	00006600 	.word	0x00006600

000038cc <srand>:
    38cc:	e59f3010 	ldr	r3, [pc, #16]	; 38e4 <srand+0x18>
    38d0:	e5933000 	ldr	r3, [r3]
    38d4:	e3a02000 	mov	r2, #0
    38d8:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    38dc:	e58320ac 	str	r2, [r3, #172]	; 0xac
    38e0:	e12fff1e 	bx	lr
    38e4:	00006600 	.word	0x00006600

000038e8 <rand>:
    38e8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    38ec:	e59f3044 	ldr	r3, [pc, #68]	; 3938 <rand+0x50>
    38f0:	e593c000 	ldr	r12, [r3]
    38f4:	e59f4040 	ldr	r4, [pc, #64]	; 393c <rand+0x54>
    38f8:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    38fc:	e0040492 	mul	r4, r2, r4
    3900:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    3904:	e59f3034 	ldr	r3, [pc, #52]	; 3940 <rand+0x58>
    3908:	e0244193 	mla	r4, r3, r1, r4
    390c:	e0810392 	umull	r0, r1, r2, r3
    3910:	e3a02001 	mov	r2, #1
    3914:	e0922000 	adds	r2, r2, r0
    3918:	e0841001 	add	r1, r4, r1
    391c:	e3a03000 	mov	r3, #0
    3920:	e0a33001 	adc	r3, r3, r1
    3924:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    3928:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    392c:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    3930:	e8bd0010 	ldmfd	sp!, {r4}
    3934:	e12fff1e 	bx	lr
    3938:	00006600 	.word	0x00006600
    393c:	5851f42d 	.word	0x5851f42d
    3940:	4c957f2d 	.word	0x4c957f2d

00003944 <_sbrk_r>:
    3944:	e92d4038 	push	{r3, r4, r5, lr}
    3948:	e59f4030 	ldr	r4, [pc, #48]	; 3980 <_sbrk_r+0x3c>
    394c:	e3a03000 	mov	r3, #0
    3950:	e1a05000 	mov	r5, r0
    3954:	e1a00001 	mov	r0, r1
    3958:	e5843000 	str	r3, [r4]
    395c:	eb0009cf 	bl	60a0 <_sbrk>
    3960:	e3700001 	cmn	r0, #1
    3964:	0a000001 	beq	3970 <_sbrk_r+0x2c>
    3968:	e8bd4038 	pop	{r3, r4, r5, lr}
    396c:	e12fff1e 	bx	lr
    3970:	e5943000 	ldr	r3, [r4]
    3974:	e3530000 	cmp	r3, #0
    3978:	15853000 	strne	r3, [r5]
    397c:	eafffff9 	b	3968 <_sbrk_r+0x24>
    3980:	00006fdc 	.word	0x00006fdc

00003984 <strlen>:
    3984:	e3c01003 	bic	r1, r0, #3
    3988:	e2100003 	ands	r0, r0, #3
    398c:	e2600000 	rsb	r0, r0, #0
    3990:	e4913004 	ldr	r3, [r1], #4
    3994:	e280c004 	add	r12, r0, #4
    3998:	e1a0c18c 	lsl	r12, r12, #3
    399c:	e3e02000 	mvn	r2, #0
    39a0:	11833c32 	orrne	r3, r3, r2, lsr r12
    39a4:	e3a0c001 	mov	r12, #1
    39a8:	e18cc40c 	orr	r12, r12, r12, lsl #8
    39ac:	e18cc80c 	orr	r12, r12, r12, lsl #16
    39b0:	e043200c 	sub	r2, r3, r12
    39b4:	e1c22003 	bic	r2, r2, r3
    39b8:	e012238c 	ands	r2, r2, r12, lsl #7
    39bc:	04913004 	ldreq	r3, [r1], #4
    39c0:	02800004 	addeq	r0, r0, #4
    39c4:	0afffff9 	beq	39b0 <strlen+0x2c>
    39c8:	e31300ff 	tst	r3, #255	; 0xff
    39cc:	12800001 	addne	r0, r0, #1
    39d0:	13130cff 	tstne	r3, #65280	; 0xff00
    39d4:	12800001 	addne	r0, r0, #1
    39d8:	131308ff 	tstne	r3, #16711680	; 0xff0000
    39dc:	12800001 	addne	r0, r0, #1
    39e0:	e12fff1e 	bx	lr

000039e4 <__register_exitproc>:
    39e4:	e59fc0e4 	ldr	r12, [pc, #228]	; 3ad0 <__register_exitproc+0xec>
    39e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    39ec:	e59c4000 	ldr	r4, [r12]
    39f0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    39f4:	e35c0000 	cmp	r12, #0
    39f8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    39fc:	e59c5004 	ldr	r5, [r12, #4]
    3a00:	0584c148 	streq	r12, [r4, #328]	; 0x148
    3a04:	e355001f 	cmp	r5, #31
    3a08:	e24dd010 	sub	sp, sp, #16
    3a0c:	e1a06000 	mov	r6, r0
    3a10:	da000015 	ble	3a6c <__register_exitproc+0x88>
    3a14:	e59f00b8 	ldr	r0, [pc, #184]	; 3ad4 <__register_exitproc+0xf0>
    3a18:	e3500000 	cmp	r0, #0
    3a1c:	1a000001 	bne	3a28 <__register_exitproc+0x44>
    3a20:	e3e00000 	mvn	r0, #0
    3a24:	ea000018 	b	3a8c <__register_exitproc+0xa8>
    3a28:	e3a00e19 	mov	r0, #400	; 0x190
    3a2c:	e58d100c 	str	r1, [sp, #12]
    3a30:	e58d2008 	str	r2, [sp, #8]
    3a34:	e58d3004 	str	r3, [sp, #4]
    3a38:	ebfffd9c 	bl	30b0 <malloc>
    3a3c:	e250c000 	subs	r12, r0, #0
    3a40:	e59d100c 	ldr	r1, [sp, #12]
    3a44:	e59d2008 	ldr	r2, [sp, #8]
    3a48:	e59d3004 	ldr	r3, [sp, #4]
    3a4c:	0afffff3 	beq	3a20 <__register_exitproc+0x3c>
    3a50:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    3a54:	e3a00000 	mov	r0, #0
    3a58:	e58c0004 	str	r0, [r12, #4]
    3a5c:	e58c5000 	str	r5, [r12]
    3a60:	e584c148 	str	r12, [r4, #328]	; 0x148
    3a64:	e58c0188 	str	r0, [r12, #392]	; 0x188
    3a68:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3a6c:	e3560000 	cmp	r6, #0
    3a70:	e59c4004 	ldr	r4, [r12, #4]
    3a74:	1a000007 	bne	3a98 <__register_exitproc+0xb4>
    3a78:	e2843002 	add	r3, r4, #2
    3a7c:	e2844001 	add	r4, r4, #1
    3a80:	e78c1103 	str	r1, [r12, r3, lsl #2]
    3a84:	e58c4004 	str	r4, [r12, #4]
    3a88:	e3a00000 	mov	r0, #0
    3a8c:	e28dd010 	add	sp, sp, #16
    3a90:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3a94:	e12fff1e 	bx	lr
    3a98:	e3a00001 	mov	r0, #1
    3a9c:	e1a00410 	lsl	r0, r0, r4
    3aa0:	e08c8104 	add	r8, r12, r4, lsl #2
    3aa4:	e3560002 	cmp	r6, #2
    3aa8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    3aac:	e5883108 	str	r3, [r8, #264]	; 0x108
    3ab0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    3ab4:	e1877000 	orr	r7, r7, r0
    3ab8:	01830000 	orreq	r0, r3, r0
    3abc:	e1a05008 	mov	r5, r8
    3ac0:	e5882088 	str	r2, [r8, #136]	; 0x88
    3ac4:	e58c7188 	str	r7, [r12, #392]	; 0x188
    3ac8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    3acc:	eaffffe9 	b	3a78 <__register_exitproc+0x94>
    3ad0:	00006594 	.word	0x00006594
    3ad4:	000030b0 	.word	0x000030b0

00003ad8 <__call_exitprocs>:
    3ad8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3adc:	e59f3168 	ldr	r3, [pc, #360]	; 3c4c <__call_exitprocs+0x174>
    3ae0:	e5933000 	ldr	r3, [r3]
    3ae4:	e24dd014 	sub	sp, sp, #20
    3ae8:	e58d3004 	str	r3, [sp, #4]
    3aec:	e2833f52 	add	r3, r3, #328	; 0x148
    3af0:	e58d0008 	str	r0, [sp, #8]
    3af4:	e58d300c 	str	r3, [sp, #12]
    3af8:	e1a07001 	mov	r7, r1
    3afc:	e3a08001 	mov	r8, #1
    3b00:	e59d3004 	ldr	r3, [sp, #4]
    3b04:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    3b08:	e3560000 	cmp	r6, #0
    3b0c:	e59db00c 	ldr	r11, [sp, #12]
    3b10:	0a000033 	beq	3be4 <__call_exitprocs+0x10c>
    3b14:	e5965004 	ldr	r5, [r6, #4]
    3b18:	e2554001 	subs	r4, r5, #1
    3b1c:	5286a088 	addpl	r10, r6, #136	; 0x88
    3b20:	5285501f 	addpl	r5, r5, #31
    3b24:	508a5105 	addpl	r5, r10, r5, lsl #2
    3b28:	5a000007 	bpl	3b4c <__call_exitprocs+0x74>
    3b2c:	ea000029 	b	3bd8 <__call_exitprocs+0x100>
    3b30:	e5953000 	ldr	r3, [r5]
    3b34:	e1530007 	cmp	r3, r7
    3b38:	0a000005 	beq	3b54 <__call_exitprocs+0x7c>
    3b3c:	e2444001 	sub	r4, r4, #1
    3b40:	e3740001 	cmn	r4, #1
    3b44:	e2455004 	sub	r5, r5, #4
    3b48:	0a000022 	beq	3bd8 <__call_exitprocs+0x100>
    3b4c:	e3570000 	cmp	r7, #0
    3b50:	1afffff6 	bne	3b30 <__call_exitprocs+0x58>
    3b54:	e5963004 	ldr	r3, [r6, #4]
    3b58:	e06a2005 	rsb	r2, r10, r5
    3b5c:	e2433001 	sub	r3, r3, #1
    3b60:	e0862002 	add	r2, r6, r2
    3b64:	e1530004 	cmp	r3, r4
    3b68:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3b6c:	13a01000 	movne	r1, #0
    3b70:	05864004 	streq	r4, [r6, #4]
    3b74:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    3b78:	e3530000 	cmp	r3, #0
    3b7c:	0affffee 	beq	3b3c <__call_exitprocs+0x64>
    3b80:	e1a02418 	lsl	r2, r8, r4
    3b84:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    3b88:	e1120001 	tst	r2, r1
    3b8c:	e5969004 	ldr	r9, [r6, #4]
    3b90:	0a000016 	beq	3bf0 <__call_exitprocs+0x118>
    3b94:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    3b98:	e1120001 	tst	r2, r1
    3b9c:	1a000016 	bne	3bfc <__call_exitprocs+0x124>
    3ba0:	e59d0008 	ldr	r0, [sp, #8]
    3ba4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    3ba8:	e1a0e00f 	mov	lr, pc
    3bac:	e12fff13 	bx	r3
    3bb0:	e5963004 	ldr	r3, [r6, #4]
    3bb4:	e1530009 	cmp	r3, r9
    3bb8:	1affffd0 	bne	3b00 <__call_exitprocs+0x28>
    3bbc:	e59b3000 	ldr	r3, [r11]
    3bc0:	e1530006 	cmp	r3, r6
    3bc4:	1affffcd 	bne	3b00 <__call_exitprocs+0x28>
    3bc8:	e2444001 	sub	r4, r4, #1
    3bcc:	e3740001 	cmn	r4, #1
    3bd0:	e2455004 	sub	r5, r5, #4
    3bd4:	1affffdc 	bne	3b4c <__call_exitprocs+0x74>
    3bd8:	e59f1070 	ldr	r1, [pc, #112]	; 3c50 <__call_exitprocs+0x178>
    3bdc:	e3510000 	cmp	r1, #0
    3be0:	1a000009 	bne	3c0c <__call_exitprocs+0x134>
    3be4:	e28dd014 	add	sp, sp, #20
    3be8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3bec:	e12fff1e 	bx	lr
    3bf0:	e1a0e00f 	mov	lr, pc
    3bf4:	e12fff13 	bx	r3
    3bf8:	eaffffec 	b	3bb0 <__call_exitprocs+0xd8>
    3bfc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    3c00:	e1a0e00f 	mov	lr, pc
    3c04:	e12fff13 	bx	r3
    3c08:	eaffffe8 	b	3bb0 <__call_exitprocs+0xd8>
    3c0c:	e5963004 	ldr	r3, [r6, #4]
    3c10:	e3530000 	cmp	r3, #0
    3c14:	e5963000 	ldr	r3, [r6]
    3c18:	1a000008 	bne	3c40 <__call_exitprocs+0x168>
    3c1c:	e3530000 	cmp	r3, #0
    3c20:	0a000006 	beq	3c40 <__call_exitprocs+0x168>
    3c24:	e1a00006 	mov	r0, r6
    3c28:	e58b3000 	str	r3, [r11]
    3c2c:	ebfffd27 	bl	30d0 <free>
    3c30:	e59b6000 	ldr	r6, [r11]
    3c34:	e3560000 	cmp	r6, #0
    3c38:	1affffb5 	bne	3b14 <__call_exitprocs+0x3c>
    3c3c:	eaffffe8 	b	3be4 <__call_exitprocs+0x10c>
    3c40:	e1a0b006 	mov	r11, r6
    3c44:	e1a06003 	mov	r6, r3
    3c48:	eafffff9 	b	3c34 <__call_exitprocs+0x15c>
    3c4c:	00006594 	.word	0x00006594
    3c50:	000030d0 	.word	0x000030d0

00003c54 <register_fini>:
    3c54:	e92d4008 	push	{r3, lr}
    3c58:	e59f3010 	ldr	r3, [pc, #16]	; 3c70 <register_fini+0x1c>
    3c5c:	e3530000 	cmp	r3, #0
    3c60:	159f000c 	ldrne	r0, [pc, #12]	; 3c74 <register_fini+0x20>
    3c64:	1bfffcfc 	blne	305c <atexit>
    3c68:	e8bd4008 	pop	{r3, lr}
    3c6c:	e12fff1e 	bx	lr
    3c70:	000065c8 	.word	0x000065c8
    3c74:	00003c78 	.word	0x00003c78

00003c78 <__libc_fini_array>:
    3c78:	e92d4038 	push	{r3, r4, r5, lr}
    3c7c:	e59f5030 	ldr	r5, [pc, #48]	; 3cb4 <__libc_fini_array+0x3c>
    3c80:	e59f4030 	ldr	r4, [pc, #48]	; 3cb8 <__libc_fini_array+0x40>
    3c84:	e0654004 	rsb	r4, r5, r4
    3c88:	e1b04144 	asrs	r4, r4, #2
    3c8c:	10855104 	addne	r5, r5, r4, lsl #2
    3c90:	0a000004 	beq	3ca8 <__libc_fini_array+0x30>
    3c94:	e5353004 	ldr	r3, [r5, #-4]!
    3c98:	e1a0e00f 	mov	lr, pc
    3c9c:	e12fff13 	bx	r3
    3ca0:	e2544001 	subs	r4, r4, #1
    3ca4:	1afffffa 	bne	3c94 <__libc_fini_array+0x1c>
    3ca8:	eb000a46 	bl	65c8 <__libc_fini>
    3cac:	e8bd4038 	pop	{r3, r4, r5, lr}
    3cb0:	e12fff1e 	bx	lr
    3cb4:	000065e0 	.word	0x000065e0
    3cb8:	000065e4 	.word	0x000065e4

00003cbc <_malloc_trim_r>:
    3cbc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3cc0:	e59f50e4 	ldr	r5, [pc, #228]	; 3dac <_malloc_trim_r+0xf0>
    3cc4:	e1a07001 	mov	r7, r1
    3cc8:	e1a04000 	mov	r4, r0
    3ccc:	ebfffece 	bl	380c <__malloc_lock>
    3cd0:	e5953008 	ldr	r3, [r5, #8]
    3cd4:	e5936004 	ldr	r6, [r3, #4]
    3cd8:	e3c66003 	bic	r6, r6, #3
    3cdc:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    3ce0:	e283300f 	add	r3, r3, #15
    3ce4:	e0677003 	rsb	r7, r7, r3
    3ce8:	e1a07627 	lsr	r7, r7, #12
    3cec:	e2477001 	sub	r7, r7, #1
    3cf0:	e1a07607 	lsl	r7, r7, #12
    3cf4:	e3570a01 	cmp	r7, #4096	; 0x1000
    3cf8:	ba000006 	blt	3d18 <_malloc_trim_r+0x5c>
    3cfc:	e1a00004 	mov	r0, r4
    3d00:	e3a01000 	mov	r1, #0
    3d04:	ebffff0e 	bl	3944 <_sbrk_r>
    3d08:	e5953008 	ldr	r3, [r5, #8]
    3d0c:	e0833006 	add	r3, r3, r6
    3d10:	e1500003 	cmp	r0, r3
    3d14:	0a000004 	beq	3d2c <_malloc_trim_r+0x70>
    3d18:	e1a00004 	mov	r0, r4
    3d1c:	ebfffebb 	bl	3810 <__malloc_unlock>
    3d20:	e3a00000 	mov	r0, #0
    3d24:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3d28:	e12fff1e 	bx	lr
    3d2c:	e1a00004 	mov	r0, r4
    3d30:	e2671000 	rsb	r1, r7, #0
    3d34:	ebffff02 	bl	3944 <_sbrk_r>
    3d38:	e3700001 	cmn	r0, #1
    3d3c:	0a00000b 	beq	3d70 <_malloc_trim_r+0xb4>
    3d40:	e59f3068 	ldr	r3, [pc, #104]	; 3db0 <_malloc_trim_r+0xf4>
    3d44:	e5952008 	ldr	r2, [r5, #8]
    3d48:	e5931000 	ldr	r1, [r3]
    3d4c:	e0676006 	rsb	r6, r7, r6
    3d50:	e3866001 	orr	r6, r6, #1
    3d54:	e0677001 	rsb	r7, r7, r1
    3d58:	e1a00004 	mov	r0, r4
    3d5c:	e5826004 	str	r6, [r2, #4]
    3d60:	e5837000 	str	r7, [r3]
    3d64:	ebfffea9 	bl	3810 <__malloc_unlock>
    3d68:	e3a00001 	mov	r0, #1
    3d6c:	eaffffec 	b	3d24 <_malloc_trim_r+0x68>
    3d70:	e1a00004 	mov	r0, r4
    3d74:	e3a01000 	mov	r1, #0
    3d78:	ebfffef1 	bl	3944 <_sbrk_r>
    3d7c:	e5953008 	ldr	r3, [r5, #8]
    3d80:	e0632000 	rsb	r2, r3, r0
    3d84:	e352000f 	cmp	r2, #15
    3d88:	daffffe2 	ble	3d18 <_malloc_trim_r+0x5c>
    3d8c:	e59f1020 	ldr	r1, [pc, #32]	; 3db4 <_malloc_trim_r+0xf8>
    3d90:	e5911000 	ldr	r1, [r1]
    3d94:	e0610000 	rsb	r0, r1, r0
    3d98:	e59f1010 	ldr	r1, [pc, #16]	; 3db0 <_malloc_trim_r+0xf4>
    3d9c:	e3822001 	orr	r2, r2, #1
    3da0:	e5810000 	str	r0, [r1]
    3da4:	e5832004 	str	r2, [r3, #4]
    3da8:	eaffffda 	b	3d18 <_malloc_trim_r+0x5c>
    3dac:	00006a30 	.word	0x00006a30
    3db0:	00006fac 	.word	0x00006fac
    3db4:	00006e38 	.word	0x00006e38

00003db8 <_free_r>:
    3db8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3dbc:	e2514000 	subs	r4, r1, #0
    3dc0:	e1a06000 	mov	r6, r0
    3dc4:	0a000046 	beq	3ee4 <_free_r+0x12c>
    3dc8:	ebfffe8f 	bl	380c <__malloc_lock>
    3dcc:	e514e004 	ldr	lr, [r4, #-4]
    3dd0:	e59f1238 	ldr	r1, [pc, #568]	; 4010 <_free_r+0x258>
    3dd4:	e244c008 	sub	r12, r4, #8
    3dd8:	e3ce3001 	bic	r3, lr, #1
    3ddc:	e08c2003 	add	r2, r12, r3
    3de0:	e5910008 	ldr	r0, [r1, #8]
    3de4:	e5925004 	ldr	r5, [r2, #4]
    3de8:	e1500002 	cmp	r0, r2
    3dec:	e3c55003 	bic	r5, r5, #3
    3df0:	0a00004a 	beq	3f20 <_free_r+0x168>
    3df4:	e21ee001 	ands	lr, lr, #1
    3df8:	e5825004 	str	r5, [r2, #4]
    3dfc:	13a0e000 	movne	lr, #0
    3e00:	1a000009 	bne	3e2c <_free_r+0x74>
    3e04:	e5144008 	ldr	r4, [r4, #-8]
    3e08:	e064c00c 	rsb	r12, r4, r12
    3e0c:	e59c0008 	ldr	r0, [r12, #8]
    3e10:	e2817008 	add	r7, r1, #8
    3e14:	e1500007 	cmp	r0, r7
    3e18:	e0833004 	add	r3, r3, r4
    3e1c:	159c400c 	ldrne	r4, [r12, #12]
    3e20:	1580400c 	strne	r4, [r0, #12]
    3e24:	15840008 	strne	r0, [r4, #8]
    3e28:	03a0e001 	moveq	lr, #1
    3e2c:	e0820005 	add	r0, r2, r5
    3e30:	e5900004 	ldr	r0, [r0, #4]
    3e34:	e3100001 	tst	r0, #1
    3e38:	1a000009 	bne	3e64 <_free_r+0xac>
    3e3c:	e35e0000 	cmp	lr, #0
    3e40:	e5920008 	ldr	r0, [r2, #8]
    3e44:	e0833005 	add	r3, r3, r5
    3e48:	1a000002 	bne	3e58 <_free_r+0xa0>
    3e4c:	e59f41c0 	ldr	r4, [pc, #448]	; 4014 <_free_r+0x25c>
    3e50:	e1500004 	cmp	r0, r4
    3e54:	0a000047 	beq	3f78 <_free_r+0x1c0>
    3e58:	e592200c 	ldr	r2, [r2, #12]
    3e5c:	e580200c 	str	r2, [r0, #12]
    3e60:	e5820008 	str	r0, [r2, #8]
    3e64:	e3832001 	orr	r2, r3, #1
    3e68:	e35e0000 	cmp	lr, #0
    3e6c:	e58c2004 	str	r2, [r12, #4]
    3e70:	e78c3003 	str	r3, [r12, r3]
    3e74:	1a000018 	bne	3edc <_free_r+0x124>
    3e78:	e3530c02 	cmp	r3, #512	; 0x200
    3e7c:	3a00001a 	bcc	3eec <_free_r+0x134>
    3e80:	e1a024a3 	lsr	r2, r3, #9
    3e84:	e3520004 	cmp	r2, #4
    3e88:	8a000042 	bhi	3f98 <_free_r+0x1e0>
    3e8c:	e1a0e323 	lsr	lr, r3, #6
    3e90:	e28ee038 	add	lr, lr, #56	; 0x38
    3e94:	e1a0008e 	lsl	r0, lr, #1
    3e98:	e0810100 	add	r0, r1, r0, lsl #2
    3e9c:	e5902008 	ldr	r2, [r0, #8]
    3ea0:	e1520000 	cmp	r2, r0
    3ea4:	e59f1164 	ldr	r1, [pc, #356]	; 4010 <_free_r+0x258>
    3ea8:	0a000044 	beq	3fc0 <_free_r+0x208>
    3eac:	e5921004 	ldr	r1, [r2, #4]
    3eb0:	e3c11003 	bic	r1, r1, #3
    3eb4:	e1530001 	cmp	r3, r1
    3eb8:	2a000002 	bcs	3ec8 <_free_r+0x110>
    3ebc:	e5922008 	ldr	r2, [r2, #8]
    3ec0:	e1500002 	cmp	r0, r2
    3ec4:	1afffff8 	bne	3eac <_free_r+0xf4>
    3ec8:	e592300c 	ldr	r3, [r2, #12]
    3ecc:	e58c300c 	str	r3, [r12, #12]
    3ed0:	e58c2008 	str	r2, [r12, #8]
    3ed4:	e582c00c 	str	r12, [r2, #12]
    3ed8:	e583c008 	str	r12, [r3, #8]
    3edc:	e1a00006 	mov	r0, r6
    3ee0:	ebfffe4a 	bl	3810 <__malloc_unlock>
    3ee4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3ee8:	e12fff1e 	bx	lr
    3eec:	e5912004 	ldr	r2, [r1, #4]
    3ef0:	e1a031a3 	lsr	r3, r3, #3
    3ef4:	e1a00143 	asr	r0, r3, #2
    3ef8:	e3a0e001 	mov	lr, #1
    3efc:	e182001e 	orr	r0, r2, lr, lsl r0
    3f00:	e0813183 	add	r3, r1, r3, lsl #3
    3f04:	e5932008 	ldr	r2, [r3, #8]
    3f08:	e58c300c 	str	r3, [r12, #12]
    3f0c:	e58c2008 	str	r2, [r12, #8]
    3f10:	e5810004 	str	r0, [r1, #4]
    3f14:	e583c008 	str	r12, [r3, #8]
    3f18:	e582c00c 	str	r12, [r2, #12]
    3f1c:	eaffffee 	b	3edc <_free_r+0x124>
    3f20:	e31e0001 	tst	lr, #1
    3f24:	e0853003 	add	r3, r5, r3
    3f28:	1a000006 	bne	3f48 <_free_r+0x190>
    3f2c:	e5142008 	ldr	r2, [r4, #-8]
    3f30:	e062c00c 	rsb	r12, r2, r12
    3f34:	e59c000c 	ldr	r0, [r12, #12]
    3f38:	e59ce008 	ldr	lr, [r12, #8]
    3f3c:	e58e000c 	str	r0, [lr, #12]
    3f40:	e580e008 	str	lr, [r0, #8]
    3f44:	e0833002 	add	r3, r3, r2
    3f48:	e59f20c8 	ldr	r2, [pc, #200]	; 4018 <_free_r+0x260>
    3f4c:	e5920000 	ldr	r0, [r2]
    3f50:	e3832001 	orr	r2, r3, #1
    3f54:	e1530000 	cmp	r3, r0
    3f58:	e58c2004 	str	r2, [r12, #4]
    3f5c:	e581c008 	str	r12, [r1, #8]
    3f60:	3affffdd 	bcc	3edc <_free_r+0x124>
    3f64:	e59f30b0 	ldr	r3, [pc, #176]	; 401c <_free_r+0x264>
    3f68:	e1a00006 	mov	r0, r6
    3f6c:	e5931000 	ldr	r1, [r3]
    3f70:	ebffff51 	bl	3cbc <_malloc_trim_r>
    3f74:	eaffffd8 	b	3edc <_free_r+0x124>
    3f78:	e3832001 	orr	r2, r3, #1
    3f7c:	e581c014 	str	r12, [r1, #20]
    3f80:	e581c010 	str	r12, [r1, #16]
    3f84:	e58c000c 	str	r0, [r12, #12]
    3f88:	e58c0008 	str	r0, [r12, #8]
    3f8c:	e58c2004 	str	r2, [r12, #4]
    3f90:	e78c3003 	str	r3, [r12, r3]
    3f94:	eaffffd0 	b	3edc <_free_r+0x124>
    3f98:	e3520014 	cmp	r2, #20
    3f9c:	9282e05b 	addls	lr, r2, #91	; 0x5b
    3fa0:	91a0008e 	lslls	r0, lr, #1
    3fa4:	9affffbb 	bls	3e98 <_free_r+0xe0>
    3fa8:	e3520054 	cmp	r2, #84	; 0x54
    3fac:	8a00000a 	bhi	3fdc <_free_r+0x224>
    3fb0:	e1a0e623 	lsr	lr, r3, #12
    3fb4:	e28ee06e 	add	lr, lr, #110	; 0x6e
    3fb8:	e1a0008e 	lsl	r0, lr, #1
    3fbc:	eaffffb5 	b	3e98 <_free_r+0xe0>
    3fc0:	e5913004 	ldr	r3, [r1, #4]
    3fc4:	e1a0e14e 	asr	lr, lr, #2
    3fc8:	e3a00001 	mov	r0, #1
    3fcc:	e1830e10 	orr	r0, r3, r0, lsl lr
    3fd0:	e1a03002 	mov	r3, r2
    3fd4:	e5810004 	str	r0, [r1, #4]
    3fd8:	eaffffbb 	b	3ecc <_free_r+0x114>
    3fdc:	e3520f55 	cmp	r2, #340	; 0x154
    3fe0:	91a0e7a3 	lsrls	lr, r3, #15
    3fe4:	928ee077 	addls	lr, lr, #119	; 0x77
    3fe8:	91a0008e 	lslls	r0, lr, #1
    3fec:	9affffa9 	bls	3e98 <_free_r+0xe0>
    3ff0:	e59f0028 	ldr	r0, [pc, #40]	; 4020 <_free_r+0x268>
    3ff4:	e1520000 	cmp	r2, r0
    3ff8:	91a0e923 	lsrls	lr, r3, #18
    3ffc:	928ee07c 	addls	lr, lr, #124	; 0x7c
    4000:	91a0008e 	lslls	r0, lr, #1
    4004:	83a000fc 	movhi	r0, #252	; 0xfc
    4008:	83a0e07e 	movhi	lr, #126	; 0x7e
    400c:	eaffffa1 	b	3e98 <_free_r+0xe0>
    4010:	00006a30 	.word	0x00006a30
    4014:	00006a38 	.word	0x00006a38
    4018:	00006e3c 	.word	0x00006e3c
    401c:	00006fa8 	.word	0x00006fa8
    4020:	00000554 	.word	0x00000554

00004024 <__sfvwrite_r>:
    4024:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4028:	e5923008 	ldr	r3, [r2, #8]
    402c:	e3530000 	cmp	r3, #0
    4030:	e24dd00c 	sub	sp, sp, #12
    4034:	e1a07002 	mov	r7, r2
    4038:	e1a0a000 	mov	r10, r0
    403c:	e1a04001 	mov	r4, r1
    4040:	0a00001e 	beq	40c0 <__sfvwrite_r+0x9c>
    4044:	e1d130bc 	ldrh	r3, [r1, #12]
    4048:	e3130008 	tst	r3, #8
    404c:	0a00001f 	beq	40d0 <__sfvwrite_r+0xac>
    4050:	e5912010 	ldr	r2, [r1, #16]
    4054:	e3520000 	cmp	r2, #0
    4058:	0a00001c 	beq	40d0 <__sfvwrite_r+0xac>
    405c:	e2132002 	ands	r2, r3, #2
    4060:	e5975000 	ldr	r5, [r7]
    4064:	0a000029 	beq	4110 <__sfvwrite_r+0xec>
    4068:	e3a08000 	mov	r8, #0
    406c:	e1a06008 	mov	r6, r8
    4070:	e3560000 	cmp	r6, #0
    4074:	e1a02008 	mov	r2, r8
    4078:	e1a0000a 	mov	r0, r10
    407c:	0a00001f 	beq	4100 <__sfvwrite_r+0xdc>
    4080:	e3560b01 	cmp	r6, #1024	; 0x400
    4084:	31a03006 	movcc	r3, r6
    4088:	23a03b01 	movcs	r3, #1024	; 0x400
    408c:	e594101c 	ldr	r1, [r4, #28]
    4090:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    4094:	e1a0e00f 	mov	lr, pc
    4098:	e12fff1c 	bx	r12
    409c:	e3500000 	cmp	r0, #0
    40a0:	da000050 	ble	41e8 <__sfvwrite_r+0x1c4>
    40a4:	e5973008 	ldr	r3, [r7, #8]
    40a8:	e0603003 	rsb	r3, r0, r3
    40ac:	e3530000 	cmp	r3, #0
    40b0:	e0888000 	add	r8, r8, r0
    40b4:	e0606006 	rsb	r6, r0, r6
    40b8:	e5873008 	str	r3, [r7, #8]
    40bc:	1affffeb 	bne	4070 <__sfvwrite_r+0x4c>
    40c0:	e3a00000 	mov	r0, #0
    40c4:	e28dd00c 	add	sp, sp, #12
    40c8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    40cc:	e12fff1e 	bx	lr
    40d0:	e1a0000a 	mov	r0, r10
    40d4:	e1a01004 	mov	r1, r4
    40d8:	eb0003dd 	bl	5054 <__swsetup_r>
    40dc:	e3500000 	cmp	r0, #0
    40e0:	e1d430bc 	ldrh	r3, [r4, #12]
    40e4:	0affffdc 	beq	405c <__sfvwrite_r+0x38>
    40e8:	e3833040 	orr	r3, r3, #64	; 0x40
    40ec:	e1c430bc 	strh	r3, [r4, #12]
    40f0:	e3a03009 	mov	r3, #9
    40f4:	e3e00000 	mvn	r0, #0
    40f8:	e58a3000 	str	r3, [r10]
    40fc:	eafffff0 	b	40c4 <__sfvwrite_r+0xa0>
    4100:	e5958000 	ldr	r8, [r5]
    4104:	e5956004 	ldr	r6, [r5, #4]
    4108:	e2855008 	add	r5, r5, #8
    410c:	eaffffd7 	b	4070 <__sfvwrite_r+0x4c>
    4110:	e2139001 	ands	r9, r3, #1
    4114:	1a000038 	bne	41fc <__sfvwrite_r+0x1d8>
    4118:	e1a06009 	mov	r6, r9
    411c:	e3560000 	cmp	r6, #0
    4120:	0a000024 	beq	41b8 <__sfvwrite_r+0x194>
    4124:	e3130c02 	tst	r3, #512	; 0x200
    4128:	e5948008 	ldr	r8, [r4, #8]
    412c:	e1a02003 	mov	r2, r3
    4130:	0a000062 	beq	42c0 <__sfvwrite_r+0x29c>
    4134:	e1560008 	cmp	r6, r8
    4138:	e1a0c008 	mov	r12, r8
    413c:	3a000089 	bcc	4368 <__sfvwrite_r+0x344>
    4140:	e2022d12 	and	r2, r2, #1152	; 0x480
    4144:	e3520000 	cmp	r2, #0
    4148:	1a0000a2 	bne	43d8 <__sfvwrite_r+0x3b4>
    414c:	e5940000 	ldr	r0, [r4]
    4150:	e1a0b008 	mov	r11, r8
    4154:	e1a03006 	mov	r3, r6
    4158:	e1a08006 	mov	r8, r6
    415c:	e1a0200c 	mov	r2, r12
    4160:	e1a01009 	mov	r1, r9
    4164:	e58d3004 	str	r3, [sp, #4]
    4168:	e58dc000 	str	r12, [sp]
    416c:	eb0001a7 	bl	4810 <memmove>
    4170:	e59dc000 	ldr	r12, [sp]
    4174:	e5941008 	ldr	r1, [r4, #8]
    4178:	e5942000 	ldr	r2, [r4]
    417c:	e06bb001 	rsb	r11, r11, r1
    4180:	e082c00c 	add	r12, r2, r12
    4184:	e584b008 	str	r11, [r4, #8]
    4188:	e584c000 	str	r12, [r4]
    418c:	e59d3004 	ldr	r3, [sp, #4]
    4190:	e5972008 	ldr	r2, [r7, #8]
    4194:	e0688002 	rsb	r8, r8, r2
    4198:	e3580000 	cmp	r8, #0
    419c:	e0899003 	add	r9, r9, r3
    41a0:	e0636006 	rsb	r6, r3, r6
    41a4:	e5878008 	str	r8, [r7, #8]
    41a8:	0affffc4 	beq	40c0 <__sfvwrite_r+0x9c>
    41ac:	e3560000 	cmp	r6, #0
    41b0:	e1d430bc 	ldrh	r3, [r4, #12]
    41b4:	1affffda 	bne	4124 <__sfvwrite_r+0x100>
    41b8:	e5959000 	ldr	r9, [r5]
    41bc:	e5956004 	ldr	r6, [r5, #4]
    41c0:	e2855008 	add	r5, r5, #8
    41c4:	eaffffd4 	b	411c <__sfvwrite_r+0xf8>
    41c8:	eb0001dd 	bl	4944 <_realloc_r>
    41cc:	e2503000 	subs	r3, r0, #0
    41d0:	1a00009d 	bne	444c <__sfvwrite_r+0x428>
    41d4:	e1a0000a 	mov	r0, r10
    41d8:	e5941010 	ldr	r1, [r4, #16]
    41dc:	ebfffef5 	bl	3db8 <_free_r>
    41e0:	e3a0300c 	mov	r3, #12
    41e4:	e58a3000 	str	r3, [r10]
    41e8:	e1d430bc 	ldrh	r3, [r4, #12]
    41ec:	e3833040 	orr	r3, r3, #64	; 0x40
    41f0:	e1c430bc 	strh	r3, [r4, #12]
    41f4:	e3e00000 	mvn	r0, #0
    41f8:	eaffffb1 	b	40c4 <__sfvwrite_r+0xa0>
    41fc:	e1a09002 	mov	r9, r2
    4200:	e1a0c002 	mov	r12, r2
    4204:	e1a0b002 	mov	r11, r2
    4208:	e1a08002 	mov	r8, r2
    420c:	e3580000 	cmp	r8, #0
    4210:	0a000025 	beq	42ac <__sfvwrite_r+0x288>
    4214:	e35c0000 	cmp	r12, #0
    4218:	0a000064 	beq	43b0 <__sfvwrite_r+0x38c>
    421c:	e5940000 	ldr	r0, [r4]
    4220:	e5942010 	ldr	r2, [r4, #16]
    4224:	e1590008 	cmp	r9, r8
    4228:	31a03009 	movcc	r3, r9
    422c:	21a03008 	movcs	r3, r8
    4230:	e1500002 	cmp	r0, r2
    4234:	e5946008 	ldr	r6, [r4, #8]
    4238:	e594e014 	ldr	lr, [r4, #20]
    423c:	9a000002 	bls	424c <__sfvwrite_r+0x228>
    4240:	e086600e 	add	r6, r6, lr
    4244:	e1530006 	cmp	r3, r6
    4248:	ca00008a 	bgt	4478 <__sfvwrite_r+0x454>
    424c:	e153000e 	cmp	r3, lr
    4250:	ba00002d 	blt	430c <__sfvwrite_r+0x2e8>
    4254:	e594101c 	ldr	r1, [r4, #28]
    4258:	e1a0000a 	mov	r0, r10
    425c:	e58dc000 	str	r12, [sp]
    4260:	e1a0200b 	mov	r2, r11
    4264:	e1a0300e 	mov	r3, lr
    4268:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    426c:	e1a0e00f 	mov	lr, pc
    4270:	e12fff1c 	bx	r12
    4274:	e2506000 	subs	r6, r0, #0
    4278:	e59dc000 	ldr	r12, [sp]
    427c:	daffffd9 	ble	41e8 <__sfvwrite_r+0x1c4>
    4280:	e0599006 	subs	r9, r9, r6
    4284:	0a000030 	beq	434c <__sfvwrite_r+0x328>
    4288:	e5973008 	ldr	r3, [r7, #8]
    428c:	e0663003 	rsb	r3, r6, r3
    4290:	e3530000 	cmp	r3, #0
    4294:	e08bb006 	add	r11, r11, r6
    4298:	e0668008 	rsb	r8, r6, r8
    429c:	e5873008 	str	r3, [r7, #8]
    42a0:	0affff86 	beq	40c0 <__sfvwrite_r+0x9c>
    42a4:	e3580000 	cmp	r8, #0
    42a8:	1affffd9 	bne	4214 <__sfvwrite_r+0x1f0>
    42ac:	e595b000 	ldr	r11, [r5]
    42b0:	e5958004 	ldr	r8, [r5, #4]
    42b4:	e3a0c000 	mov	r12, #0
    42b8:	e2855008 	add	r5, r5, #8
    42bc:	eaffffd2 	b	420c <__sfvwrite_r+0x1e8>
    42c0:	e5940000 	ldr	r0, [r4]
    42c4:	e5943010 	ldr	r3, [r4, #16]
    42c8:	e1500003 	cmp	r0, r3
    42cc:	9a000001 	bls	42d8 <__sfvwrite_r+0x2b4>
    42d0:	e1560008 	cmp	r6, r8
    42d4:	8a000075 	bhi	44b0 <__sfvwrite_r+0x48c>
    42d8:	e5943014 	ldr	r3, [r4, #20]
    42dc:	e1560003 	cmp	r6, r3
    42e0:	3a000026 	bcc	4380 <__sfvwrite_r+0x35c>
    42e4:	e1a0000a 	mov	r0, r10
    42e8:	e594101c 	ldr	r1, [r4, #28]
    42ec:	e1a02009 	mov	r2, r9
    42f0:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    42f4:	e1a0e00f 	mov	lr, pc
    42f8:	e12fff1c 	bx	r12
    42fc:	e2508000 	subs	r8, r0, #0
    4300:	daffffb8 	ble	41e8 <__sfvwrite_r+0x1c4>
    4304:	e1a03008 	mov	r3, r8
    4308:	eaffffa0 	b	4190 <__sfvwrite_r+0x16c>
    430c:	e1a02003 	mov	r2, r3
    4310:	e1a0100b 	mov	r1, r11
    4314:	e58d3004 	str	r3, [sp, #4]
    4318:	e58dc000 	str	r12, [sp]
    431c:	eb00013b 	bl	4810 <memmove>
    4320:	e59d3004 	ldr	r3, [sp, #4]
    4324:	e5941008 	ldr	r1, [r4, #8]
    4328:	e5942000 	ldr	r2, [r4]
    432c:	e1a06003 	mov	r6, r3
    4330:	e0631001 	rsb	r1, r3, r1
    4334:	e0822003 	add	r2, r2, r3
    4338:	e0599006 	subs	r9, r9, r6
    433c:	e5841008 	str	r1, [r4, #8]
    4340:	e5842000 	str	r2, [r4]
    4344:	e59dc000 	ldr	r12, [sp]
    4348:	1affffce 	bne	4288 <__sfvwrite_r+0x264>
    434c:	e1a0000a 	mov	r0, r10
    4350:	e1a01004 	mov	r1, r4
    4354:	eb00038c 	bl	518c <_fflush_r>
    4358:	e3500000 	cmp	r0, #0
    435c:	1affffa1 	bne	41e8 <__sfvwrite_r+0x1c4>
    4360:	e1a0c009 	mov	r12, r9
    4364:	eaffffc7 	b	4288 <__sfvwrite_r+0x264>
    4368:	e5940000 	ldr	r0, [r4]
    436c:	e1a0b006 	mov	r11, r6
    4370:	e1a03006 	mov	r3, r6
    4374:	e1a08006 	mov	r8, r6
    4378:	e1a0c006 	mov	r12, r6
    437c:	eaffff76 	b	415c <__sfvwrite_r+0x138>
    4380:	e1a02006 	mov	r2, r6
    4384:	e1a01009 	mov	r1, r9
    4388:	eb000120 	bl	4810 <memmove>
    438c:	e5942008 	ldr	r2, [r4, #8]
    4390:	e5943000 	ldr	r3, [r4]
    4394:	e0662002 	rsb	r2, r6, r2
    4398:	e0833006 	add	r3, r3, r6
    439c:	e5843000 	str	r3, [r4]
    43a0:	e5842008 	str	r2, [r4, #8]
    43a4:	e1a08006 	mov	r8, r6
    43a8:	e1a03006 	mov	r3, r6
    43ac:	eaffff77 	b	4190 <__sfvwrite_r+0x16c>
    43b0:	e1a0000b 	mov	r0, r11
    43b4:	e3a0100a 	mov	r1, #10
    43b8:	e1a02008 	mov	r2, r8
    43bc:	eb000049 	bl	44e8 <memchr>
    43c0:	e3500000 	cmp	r0, #0
    43c4:	12809001 	addne	r9, r0, #1
    43c8:	106b9009 	rsbne	r9, r11, r9
    43cc:	02889001 	addeq	r9, r8, #1
    43d0:	e3a0c001 	mov	r12, #1
    43d4:	eaffff90 	b	421c <__sfvwrite_r+0x1f8>
    43d8:	e5941010 	ldr	r1, [r4, #16]
    43dc:	e594b000 	ldr	r11, [r4]
    43e0:	e5948014 	ldr	r8, [r4, #20]
    43e4:	e061b00b 	rsb	r11, r1, r11
    43e8:	e0888088 	add	r8, r8, r8, lsl #1
    43ec:	e0888fa8 	add	r8, r8, r8, lsr #31
    43f0:	e28b0001 	add	r0, r11, #1
    43f4:	e1a080c8 	asr	r8, r8, #1
    43f8:	e0800006 	add	r0, r0, r6
    43fc:	e1580000 	cmp	r8, r0
    4400:	e1a02008 	mov	r2, r8
    4404:	31a08000 	movcc	r8, r0
    4408:	31a02008 	movcc	r2, r8
    440c:	e3130b01 	tst	r3, #1024	; 0x400
    4410:	e1a0000a 	mov	r0, r10
    4414:	0affff6b 	beq	41c8 <__sfvwrite_r+0x1a4>
    4418:	e1a01002 	mov	r1, r2
    441c:	ebfffb33 	bl	30f0 <_malloc_r>
    4420:	e2503000 	subs	r3, r0, #0
    4424:	0affff6d 	beq	41e0 <__sfvwrite_r+0x1bc>
    4428:	e5941010 	ldr	r1, [r4, #16]
    442c:	e1a0200b 	mov	r2, r11
    4430:	e58d3004 	str	r3, [sp, #4]
    4434:	eb000072 	bl	4604 <memcpy>
    4438:	e1d420bc 	ldrh	r2, [r4, #12]
    443c:	e3c22d12 	bic	r2, r2, #1152	; 0x480
    4440:	e3822080 	orr	r2, r2, #128	; 0x80
    4444:	e1c420bc 	strh	r2, [r4, #12]
    4448:	e59d3004 	ldr	r3, [sp, #4]
    444c:	e083000b 	add	r0, r3, r11
    4450:	e06b2008 	rsb	r2, r11, r8
    4454:	e5843010 	str	r3, [r4, #16]
    4458:	e5848014 	str	r8, [r4, #20]
    445c:	e5840000 	str	r0, [r4]
    4460:	e1a0b006 	mov	r11, r6
    4464:	e5842008 	str	r2, [r4, #8]
    4468:	e1a03006 	mov	r3, r6
    446c:	e1a08006 	mov	r8, r6
    4470:	e1a0c006 	mov	r12, r6
    4474:	eaffff38 	b	415c <__sfvwrite_r+0x138>
    4478:	e1a0100b 	mov	r1, r11
    447c:	e1a02006 	mov	r2, r6
    4480:	e58dc000 	str	r12, [sp]
    4484:	eb0000e1 	bl	4810 <memmove>
    4488:	e5943000 	ldr	r3, [r4]
    448c:	e0833006 	add	r3, r3, r6
    4490:	e5843000 	str	r3, [r4]
    4494:	e1a0000a 	mov	r0, r10
    4498:	e1a01004 	mov	r1, r4
    449c:	eb00033a 	bl	518c <_fflush_r>
    44a0:	e3500000 	cmp	r0, #0
    44a4:	e59dc000 	ldr	r12, [sp]
    44a8:	0affff74 	beq	4280 <__sfvwrite_r+0x25c>
    44ac:	eaffff4d 	b	41e8 <__sfvwrite_r+0x1c4>
    44b0:	e1a01009 	mov	r1, r9
    44b4:	e1a02008 	mov	r2, r8
    44b8:	e58d8004 	str	r8, [sp, #4]
    44bc:	eb0000d3 	bl	4810 <memmove>
    44c0:	e5942000 	ldr	r2, [r4]
    44c4:	e0822008 	add	r2, r2, r8
    44c8:	e5842000 	str	r2, [r4]
    44cc:	e1a0000a 	mov	r0, r10
    44d0:	e1a01004 	mov	r1, r4
    44d4:	eb00032c 	bl	518c <_fflush_r>
    44d8:	e3500000 	cmp	r0, #0
    44dc:	e59d3004 	ldr	r3, [sp, #4]
    44e0:	0affff2a 	beq	4190 <__sfvwrite_r+0x16c>
    44e4:	eaffff3f 	b	41e8 <__sfvwrite_r+0x1c4>

000044e8 <memchr>:
    44e8:	e3100003 	tst	r0, #3
    44ec:	e92d0070 	push	{r4, r5, r6}
    44f0:	e20110ff 	and	r1, r1, #255	; 0xff
    44f4:	0a00003c 	beq	45ec <memchr+0x104>
    44f8:	e3520000 	cmp	r2, #0
    44fc:	e242c001 	sub	r12, r2, #1
    4500:	0a00003b 	beq	45f4 <memchr+0x10c>
    4504:	e5d03000 	ldrb	r3, [r0]
    4508:	e1530001 	cmp	r3, r1
    450c:	0a00001f 	beq	4590 <memchr+0xa8>
    4510:	e2803001 	add	r3, r0, #1
    4514:	ea000006 	b	4534 <memchr+0x4c>
    4518:	e35c0000 	cmp	r12, #0
    451c:	0a00001d 	beq	4598 <memchr+0xb0>
    4520:	e5d02000 	ldrb	r2, [r0]
    4524:	e1520001 	cmp	r2, r1
    4528:	e2833001 	add	r3, r3, #1
    452c:	e24cc001 	sub	r12, r12, #1
    4530:	0a000016 	beq	4590 <memchr+0xa8>
    4534:	e3130003 	tst	r3, #3
    4538:	e1a00003 	mov	r0, r3
    453c:	1afffff5 	bne	4518 <memchr+0x30>
    4540:	e35c0003 	cmp	r12, #3
    4544:	8a000015 	bhi	45a0 <memchr+0xb8>
    4548:	e35c0000 	cmp	r12, #0
    454c:	e24c4001 	sub	r4, r12, #1
    4550:	0a000010 	beq	4598 <memchr+0xb0>
    4554:	e5d03000 	ldrb	r3, [r0]
    4558:	e1530001 	cmp	r3, r1
    455c:	0a00000b 	beq	4590 <memchr+0xa8>
    4560:	e2802001 	add	r2, r0, #1
    4564:	e3a03000 	mov	r3, #0
    4568:	ea000004 	b	4580 <memchr+0x98>
    456c:	e5d0c000 	ldrb	r12, [r0]
    4570:	e15c0001 	cmp	r12, r1
    4574:	e2822001 	add	r2, r2, #1
    4578:	e2833001 	add	r3, r3, #1
    457c:	0a000003 	beq	4590 <memchr+0xa8>
    4580:	e1540003 	cmp	r4, r3
    4584:	e1a00002 	mov	r0, r2
    4588:	1afffff7 	bne	456c <memchr+0x84>
    458c:	e3a00000 	mov	r0, #0
    4590:	e8bd0070 	pop	{r4, r5, r6}
    4594:	e12fff1e 	bx	lr
    4598:	e1a0000c 	mov	r0, r12
    459c:	eafffffb 	b	4590 <memchr+0xa8>
    45a0:	e1816401 	orr	r6, r1, r1, lsl #8
    45a4:	e1866806 	orr	r6, r6, r6, lsl #16
    45a8:	e5903000 	ldr	r3, [r0]
    45ac:	e59f4048 	ldr	r4, [pc, #72]	; 45fc <memchr+0x114>
    45b0:	e0263003 	eor	r3, r6, r3
    45b4:	e0834004 	add	r4, r3, r4
    45b8:	e59f2040 	ldr	r2, [pc, #64]	; 4600 <memchr+0x118>
    45bc:	e1c44003 	bic	r4, r4, r3
    45c0:	e0042002 	and	r2, r4, r2
    45c4:	e3520000 	cmp	r2, #0
    45c8:	e1a05000 	mov	r5, r0
    45cc:	e2800004 	add	r0, r0, #4
    45d0:	1a000003 	bne	45e4 <memchr+0xfc>
    45d4:	e24cc004 	sub	r12, r12, #4
    45d8:	e35c0003 	cmp	r12, #3
    45dc:	8afffff1 	bhi	45a8 <memchr+0xc0>
    45e0:	eaffffd8 	b	4548 <memchr+0x60>
    45e4:	e1a00005 	mov	r0, r5
    45e8:	eaffffd6 	b	4548 <memchr+0x60>
    45ec:	e1a0c002 	mov	r12, r2
    45f0:	eaffffd2 	b	4540 <memchr+0x58>
    45f4:	e1a00002 	mov	r0, r2
    45f8:	eaffffe4 	b	4590 <memchr+0xa8>
    45fc:	fefefeff 	.word	0xfefefeff
    4600:	80808080 	.word	0x80808080

00004604 <memcpy>:
    4604:	e3520003 	cmp	r2, #3
    4608:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    460c:	8a000009 	bhi	4638 <memcpy+0x34>
    4610:	e3520000 	cmp	r2, #0
    4614:	0a000005 	beq	4630 <memcpy+0x2c>
    4618:	e3a03000 	mov	r3, #0
    461c:	e7d1c003 	ldrb	r12, [r1, r3]
    4620:	e7c0c003 	strb	r12, [r0, r3]
    4624:	e2833001 	add	r3, r3, #1
    4628:	e1530002 	cmp	r3, r2
    462c:	1afffffa 	bne	461c <memcpy+0x18>
    4630:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    4634:	e12fff1e 	bx	lr
    4638:	e3100003 	tst	r0, #3
    463c:	e0802002 	add	r2, r0, r2
    4640:	0a00000b 	beq	4674 <memcpy+0x70>
    4644:	e280c001 	add	r12, r0, #1
    4648:	e2814001 	add	r4, r1, #1
    464c:	e20c3003 	and	r3, r12, #3
    4650:	e5545001 	ldrb	r5, [r4, #-1]
    4654:	e3530000 	cmp	r3, #0
    4658:	e1a01004 	mov	r1, r4
    465c:	e1a0300c 	mov	r3, r12
    4660:	e54c5001 	strb	r5, [r12, #-1]
    4664:	e2844001 	add	r4, r4, #1
    4668:	e28cc001 	add	r12, r12, #1
    466c:	1afffff6 	bne	464c <memcpy+0x48>
    4670:	ea000000 	b	4678 <memcpy+0x74>
    4674:	e1a03000 	mov	r3, r0
    4678:	e211c003 	ands	r12, r1, #3
    467c:	1a00004f 	bne	47c0 <memcpy+0x1bc>
    4680:	e063c002 	rsb	r12, r3, r2
    4684:	e35c003f 	cmp	r12, #63	; 0x3f
    4688:	da000024 	ble	4720 <memcpy+0x11c>
    468c:	e591c000 	ldr	r12, [r1]
    4690:	e583c000 	str	r12, [r3]
    4694:	e591c004 	ldr	r12, [r1, #4]
    4698:	e583c004 	str	r12, [r3, #4]
    469c:	e591c008 	ldr	r12, [r1, #8]
    46a0:	e583c008 	str	r12, [r3, #8]
    46a4:	e591c00c 	ldr	r12, [r1, #12]
    46a8:	e583c00c 	str	r12, [r3, #12]
    46ac:	e591c010 	ldr	r12, [r1, #16]
    46b0:	e583c010 	str	r12, [r3, #16]
    46b4:	e591c014 	ldr	r12, [r1, #20]
    46b8:	e583c014 	str	r12, [r3, #20]
    46bc:	e591c018 	ldr	r12, [r1, #24]
    46c0:	e583c018 	str	r12, [r3, #24]
    46c4:	e591c01c 	ldr	r12, [r1, #28]
    46c8:	e583c01c 	str	r12, [r3, #28]
    46cc:	e591c020 	ldr	r12, [r1, #32]
    46d0:	e583c020 	str	r12, [r3, #32]
    46d4:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    46d8:	e583c024 	str	r12, [r3, #36]	; 0x24
    46dc:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    46e0:	e583c028 	str	r12, [r3, #40]	; 0x28
    46e4:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    46e8:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    46ec:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    46f0:	e583c030 	str	r12, [r3, #48]	; 0x30
    46f4:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    46f8:	e583c034 	str	r12, [r3, #52]	; 0x34
    46fc:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    4700:	e583c038 	str	r12, [r3, #56]	; 0x38
    4704:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    4708:	e2833040 	add	r3, r3, #64	; 0x40
    470c:	e503c004 	str	r12, [r3, #-4]
    4710:	e063c002 	rsb	r12, r3, r2
    4714:	e35c003f 	cmp	r12, #63	; 0x3f
    4718:	e2811040 	add	r1, r1, #64	; 0x40
    471c:	caffffda 	bgt	468c <memcpy+0x88>
    4720:	e35c000f 	cmp	r12, #15
    4724:	da00000c 	ble	475c <memcpy+0x158>
    4728:	e591c000 	ldr	r12, [r1]
    472c:	e583c000 	str	r12, [r3]
    4730:	e591c004 	ldr	r12, [r1, #4]
    4734:	e583c004 	str	r12, [r3, #4]
    4738:	e591c008 	ldr	r12, [r1, #8]
    473c:	e583c008 	str	r12, [r3, #8]
    4740:	e591c00c 	ldr	r12, [r1, #12]
    4744:	e2833010 	add	r3, r3, #16
    4748:	e503c004 	str	r12, [r3, #-4]
    474c:	e063c002 	rsb	r12, r3, r2
    4750:	e35c000f 	cmp	r12, #15
    4754:	e2811010 	add	r1, r1, #16
    4758:	cafffff2 	bgt	4728 <memcpy+0x124>
    475c:	e35c0003 	cmp	r12, #3
    4760:	da00000a 	ble	4790 <memcpy+0x18c>
    4764:	e283c004 	add	r12, r3, #4
    4768:	e2814004 	add	r4, r1, #4
    476c:	e06c3002 	rsb	r3, r12, r2
    4770:	e5145004 	ldr	r5, [r4, #-4]
    4774:	e3530003 	cmp	r3, #3
    4778:	e1a01004 	mov	r1, r4
    477c:	e1a0300c 	mov	r3, r12
    4780:	e50c5004 	str	r5, [r12, #-4]
    4784:	e2844004 	add	r4, r4, #4
    4788:	e28cc004 	add	r12, r12, #4
    478c:	cafffff6 	bgt	476c <memcpy+0x168>
    4790:	e1520003 	cmp	r2, r3
    4794:	82833001 	addhi	r3, r3, #1
    4798:	82811001 	addhi	r1, r1, #1
    479c:	82822001 	addhi	r2, r2, #1
    47a0:	9affffa2 	bls	4630 <memcpy+0x2c>
    47a4:	e551c001 	ldrb	r12, [r1, #-1]
    47a8:	e2833001 	add	r3, r3, #1
    47ac:	e1530002 	cmp	r3, r2
    47b0:	e543c002 	strb	r12, [r3, #-2]
    47b4:	e2811001 	add	r1, r1, #1
    47b8:	1afffff9 	bne	47a4 <memcpy+0x1a0>
    47bc:	eaffff9b 	b	4630 <memcpy+0x2c>
    47c0:	e0635002 	rsb	r5, r3, r2
    47c4:	e06c4001 	rsb	r4, r12, r1
    47c8:	e3550003 	cmp	r5, #3
    47cc:	e5945000 	ldr	r5, [r4]
    47d0:	daffffee 	ble	4790 <memcpy+0x18c>
    47d4:	e26c6004 	rsb	r6, r12, #4
    47d8:	e1a0718c 	lsl	r7, r12, #3
    47dc:	e1a06186 	lsl	r6, r6, #3
    47e0:	e283c004 	add	r12, r3, #4
    47e4:	e1a08735 	lsr	r8, r5, r7
    47e8:	e5b45004 	ldr	r5, [r4, #4]!
    47ec:	e1888615 	orr	r8, r8, r5, lsl r6
    47f0:	e06c3002 	rsb	r3, r12, r2
    47f4:	e3530003 	cmp	r3, #3
    47f8:	e50c8004 	str	r8, [r12, #-4]
    47fc:	e1a0300c 	mov	r3, r12
    4800:	e2811004 	add	r1, r1, #4
    4804:	e28cc004 	add	r12, r12, #4
    4808:	cafffff5 	bgt	47e4 <memcpy+0x1e0>
    480c:	eaffffdf 	b	4790 <memcpy+0x18c>

00004810 <memmove>:
    4810:	e1500001 	cmp	r0, r1
    4814:	e92d00f0 	push	{r4, r5, r6, r7}
    4818:	9a00000e 	bls	4858 <memmove+0x48>
    481c:	e081c002 	add	r12, r1, r2
    4820:	e150000c 	cmp	r0, r12
    4824:	2a00000b 	bcs	4858 <memmove+0x48>
    4828:	e3520000 	cmp	r2, #0
    482c:	e0803002 	add	r3, r0, r2
    4830:	e2422001 	sub	r2, r2, #1
    4834:	0a000005 	beq	4850 <memmove+0x40>
    4838:	e1a0100c 	mov	r1, r12
    483c:	e571c001 	ldrb	r12, [r1, #-1]!
    4840:	e2422001 	sub	r2, r2, #1
    4844:	e3720001 	cmn	r2, #1
    4848:	e563c001 	strb	r12, [r3, #-1]!
    484c:	1afffffa 	bne	483c <memmove+0x2c>
    4850:	e8bd00f0 	pop	{r4, r5, r6, r7}
    4854:	e12fff1e 	bx	lr
    4858:	e352000f 	cmp	r2, #15
    485c:	8a000009 	bhi	4888 <memmove+0x78>
    4860:	e1a03000 	mov	r3, r0
    4864:	e3520000 	cmp	r2, #0
    4868:	0afffff8 	beq	4850 <memmove+0x40>
    486c:	e2411001 	sub	r1, r1, #1
    4870:	e0832002 	add	r2, r3, r2
    4874:	e5f1c001 	ldrb	r12, [r1, #1]!
    4878:	e4c3c001 	strb	r12, [r3], #1
    487c:	e1530002 	cmp	r3, r2
    4880:	1afffffb 	bne	4874 <memmove+0x64>
    4884:	eafffff1 	b	4850 <memmove+0x40>
    4888:	e1813000 	orr	r3, r1, r0
    488c:	e3130003 	tst	r3, #3
    4890:	1a000027 	bne	4934 <memmove+0x124>
    4894:	e1a0c001 	mov	r12, r1
    4898:	e1a03000 	mov	r3, r0
    489c:	e1a04002 	mov	r4, r2
    48a0:	e59c5000 	ldr	r5, [r12]
    48a4:	e5835000 	str	r5, [r3]
    48a8:	e59c5004 	ldr	r5, [r12, #4]
    48ac:	e5835004 	str	r5, [r3, #4]
    48b0:	e59c5008 	ldr	r5, [r12, #8]
    48b4:	e5835008 	str	r5, [r3, #8]
    48b8:	e2444010 	sub	r4, r4, #16
    48bc:	e59c500c 	ldr	r5, [r12, #12]
    48c0:	e354000f 	cmp	r4, #15
    48c4:	e583500c 	str	r5, [r3, #12]
    48c8:	e28cc010 	add	r12, r12, #16
    48cc:	e2833010 	add	r3, r3, #16
    48d0:	8afffff2 	bhi	48a0 <memmove+0x90>
    48d4:	e2424010 	sub	r4, r2, #16
    48d8:	e3c4400f 	bic	r4, r4, #15
    48dc:	e202c00f 	and	r12, r2, #15
    48e0:	e2844010 	add	r4, r4, #16
    48e4:	e35c0003 	cmp	r12, #3
    48e8:	e0803004 	add	r3, r0, r4
    48ec:	e0811004 	add	r1, r1, r4
    48f0:	9a000011 	bls	493c <memmove+0x12c>
    48f4:	e24cc004 	sub	r12, r12, #4
    48f8:	e1a0712c 	lsr	r7, r12, #2
    48fc:	e0816107 	add	r6, r1, r7, lsl #2
    4900:	e1a0c001 	mov	r12, r1
    4904:	e2866004 	add	r6, r6, #4
    4908:	e1a04003 	mov	r4, r3
    490c:	e49c5004 	ldr	r5, [r12], #4
    4910:	e15c0006 	cmp	r12, r6
    4914:	e4845004 	str	r5, [r4], #4
    4918:	1afffffb 	bne	490c <memmove+0xfc>
    491c:	e287c001 	add	r12, r7, #1
    4920:	e1a0c10c 	lsl	r12, r12, #2
    4924:	e2022003 	and	r2, r2, #3
    4928:	e081100c 	add	r1, r1, r12
    492c:	e083300c 	add	r3, r3, r12
    4930:	eaffffcb 	b	4864 <memmove+0x54>
    4934:	e1a03000 	mov	r3, r0
    4938:	eaffffcb 	b	486c <memmove+0x5c>
    493c:	e1a0200c 	mov	r2, r12
    4940:	eaffffc7 	b	4864 <memmove+0x54>

00004944 <_realloc_r>:
    4944:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4948:	e2514000 	subs	r4, r1, #0
    494c:	e24dd00c 	sub	sp, sp, #12
    4950:	e1a08000 	mov	r8, r0
    4954:	e1a0b002 	mov	r11, r2
    4958:	0a0000d1 	beq	4ca4 <_realloc_r+0x360>
    495c:	ebfffbaa 	bl	380c <__malloc_lock>
    4960:	e28b500b 	add	r5, r11, #11
    4964:	e3550016 	cmp	r5, #22
    4968:	83c55007 	bichi	r5, r5, #7
    496c:	93a01010 	movls	r1, #16
    4970:	81a06fa5 	lsrhi	r6, r5, #31
    4974:	93a06000 	movls	r6, #0
    4978:	91a05001 	movls	r5, r1
    497c:	e5143004 	ldr	r3, [r4, #-4]
    4980:	81a01005 	movhi	r1, r5
    4984:	e155000b 	cmp	r5, r11
    4988:	33866001 	orrcc	r6, r6, #1
    498c:	e3560000 	cmp	r6, #0
    4990:	e3c37003 	bic	r7, r3, #3
    4994:	13a0300c 	movne	r3, #12
    4998:	e244a008 	sub	r10, r4, #8
    499c:	15883000 	strne	r3, [r8]
    49a0:	13a06000 	movne	r6, #0
    49a4:	1a00000f 	bne	49e8 <_realloc_r+0xa4>
    49a8:	e1570001 	cmp	r7, r1
    49ac:	ba000011 	blt	49f8 <_realloc_r+0xb4>
    49b0:	e1a06007 	mov	r6, r7
    49b4:	e0652006 	rsb	r2, r5, r6
    49b8:	e352000f 	cmp	r2, #15
    49bc:	e2033001 	and	r3, r3, #1
    49c0:	8a00005e 	bhi	4b40 <_realloc_r+0x1fc>
    49c4:	e1833006 	orr	r3, r3, r6
    49c8:	e58a3004 	str	r3, [r10, #4]
    49cc:	e08aa006 	add	r10, r10, r6
    49d0:	e59a3004 	ldr	r3, [r10, #4]
    49d4:	e3833001 	orr	r3, r3, #1
    49d8:	e58a3004 	str	r3, [r10, #4]
    49dc:	e1a00008 	mov	r0, r8
    49e0:	ebfffb8a 	bl	3810 <__malloc_unlock>
    49e4:	e1a06004 	mov	r6, r4
    49e8:	e1a00006 	mov	r0, r6
    49ec:	e28dd00c 	add	sp, sp, #12
    49f0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    49f4:	e12fff1e 	bx	lr
    49f8:	e59f24b4 	ldr	r2, [pc, #1204]	; 4eb4 <_realloc_r+0x570>
    49fc:	e592c008 	ldr	r12, [r2, #8]
    4a00:	e08a0007 	add	r0, r10, r7
    4a04:	e15c0000 	cmp	r12, r0
    4a08:	0a0000a9 	beq	4cb4 <_realloc_r+0x370>
    4a0c:	e590e004 	ldr	lr, [r0, #4]
    4a10:	e3ce9001 	bic	r9, lr, #1
    4a14:	e0809009 	add	r9, r0, r9
    4a18:	e5999004 	ldr	r9, [r9, #4]
    4a1c:	e3190001 	tst	r9, #1
    4a20:	11a0e006 	movne	lr, r6
    4a24:	11a0000e 	movne	r0, lr
    4a28:	0a00003b 	beq	4b1c <_realloc_r+0x1d8>
    4a2c:	e3130001 	tst	r3, #1
    4a30:	1a00004f 	bne	4b74 <_realloc_r+0x230>
    4a34:	e5149008 	ldr	r9, [r4, #-8]
    4a38:	e069900a 	rsb	r9, r9, r10
    4a3c:	e5993004 	ldr	r3, [r9, #4]
    4a40:	e3500000 	cmp	r0, #0
    4a44:	e3c33003 	bic	r3, r3, #3
    4a48:	0a000067 	beq	4bec <_realloc_r+0x2a8>
    4a4c:	e150000c 	cmp	r0, r12
    4a50:	e083c007 	add	r12, r3, r7
    4a54:	0a0000ce 	beq	4d94 <_realloc_r+0x450>
    4a58:	e08e600c 	add	r6, lr, r12
    4a5c:	e1560001 	cmp	r6, r1
    4a60:	ba000062 	blt	4bf0 <_realloc_r+0x2ac>
    4a64:	e2802008 	add	r2, r0, #8
    4a68:	e892000c 	ldm	r2, {r2, r3}
    4a6c:	e5832008 	str	r2, [r3, #8]
    4a70:	e582300c 	str	r3, [r2, #12]
    4a74:	e1a0a009 	mov	r10, r9
    4a78:	e599300c 	ldr	r3, [r9, #12]
    4a7c:	e5ba1008 	ldr	r1, [r10, #8]!
    4a80:	e2472004 	sub	r2, r7, #4
    4a84:	e3520024 	cmp	r2, #36	; 0x24
    4a88:	e581300c 	str	r3, [r1, #12]
    4a8c:	e5831008 	str	r1, [r3, #8]
    4a90:	8a0000fa 	bhi	4e80 <_realloc_r+0x53c>
    4a94:	e3520013 	cmp	r2, #19
    4a98:	91a0300a 	movls	r3, r10
    4a9c:	9a000014 	bls	4af4 <_realloc_r+0x1b0>
    4aa0:	e5943000 	ldr	r3, [r4]
    4aa4:	e5893008 	str	r3, [r9, #8]
    4aa8:	e5943004 	ldr	r3, [r4, #4]
    4aac:	e352001b 	cmp	r2, #27
    4ab0:	e589300c 	str	r3, [r9, #12]
    4ab4:	92844008 	addls	r4, r4, #8
    4ab8:	92893010 	addls	r3, r9, #16
    4abc:	9a00000c 	bls	4af4 <_realloc_r+0x1b0>
    4ac0:	e5943008 	ldr	r3, [r4, #8]
    4ac4:	e5893010 	str	r3, [r9, #16]
    4ac8:	e594300c 	ldr	r3, [r4, #12]
    4acc:	e5893014 	str	r3, [r9, #20]
    4ad0:	e3520024 	cmp	r2, #36	; 0x24
    4ad4:	05943010 	ldreq	r3, [r4, #16]
    4ad8:	05893018 	streq	r3, [r9, #24]
    4adc:	05942014 	ldreq	r2, [r4, #20]
    4ae0:	0589201c 	streq	r2, [r9, #28]
    4ae4:	12893018 	addne	r3, r9, #24
    4ae8:	12844010 	addne	r4, r4, #16
    4aec:	02893020 	addeq	r3, r9, #32
    4af0:	02844018 	addeq	r4, r4, #24
    4af4:	e5942000 	ldr	r2, [r4]
    4af8:	e5832000 	str	r2, [r3]
    4afc:	e5942004 	ldr	r2, [r4, #4]
    4b00:	e5832004 	str	r2, [r3, #4]
    4b04:	e5942008 	ldr	r2, [r4, #8]
    4b08:	e5832008 	str	r2, [r3, #8]
    4b0c:	e1a0400a 	mov	r4, r10
    4b10:	e5993004 	ldr	r3, [r9, #4]
    4b14:	e1a0a009 	mov	r10, r9
    4b18:	eaffffa5 	b	49b4 <_realloc_r+0x70>
    4b1c:	e3cee003 	bic	lr, lr, #3
    4b20:	e08e6007 	add	r6, lr, r7
    4b24:	e1560001 	cmp	r6, r1
    4b28:	baffffbf 	blt	4a2c <_realloc_r+0xe8>
    4b2c:	e2801008 	add	r1, r0, #8
    4b30:	e8910006 	ldm	r1, {r1, r2}
    4b34:	e581200c 	str	r2, [r1, #12]
    4b38:	e5821008 	str	r1, [r2, #8]
    4b3c:	eaffff9c 	b	49b4 <_realloc_r+0x70>
    4b40:	e08a1005 	add	r1, r10, r5
    4b44:	e3820001 	orr	r0, r2, #1
    4b48:	e1835005 	orr	r5, r3, r5
    4b4c:	e58a5004 	str	r5, [r10, #4]
    4b50:	e5810004 	str	r0, [r1, #4]
    4b54:	e0812002 	add	r2, r1, r2
    4b58:	e5923004 	ldr	r3, [r2, #4]
    4b5c:	e3833001 	orr	r3, r3, #1
    4b60:	e5823004 	str	r3, [r2, #4]
    4b64:	e1a00008 	mov	r0, r8
    4b68:	e2811008 	add	r1, r1, #8
    4b6c:	ebfffc91 	bl	3db8 <_free_r>
    4b70:	eaffff99 	b	49dc <_realloc_r+0x98>
    4b74:	e1a00008 	mov	r0, r8
    4b78:	e1a0100b 	mov	r1, r11
    4b7c:	ebfff95b 	bl	30f0 <_malloc_r>
    4b80:	e2506000 	subs	r6, r0, #0
    4b84:	0a000015 	beq	4be0 <_realloc_r+0x29c>
    4b88:	e5143004 	ldr	r3, [r4, #-4]
    4b8c:	e3c32001 	bic	r2, r3, #1
    4b90:	e2461008 	sub	r1, r6, #8
    4b94:	e08a2002 	add	r2, r10, r2
    4b98:	e1510002 	cmp	r1, r2
    4b9c:	0a0000b3 	beq	4e70 <_realloc_r+0x52c>
    4ba0:	e2472004 	sub	r2, r7, #4
    4ba4:	e3520024 	cmp	r2, #36	; 0x24
    4ba8:	8a000076 	bhi	4d88 <_realloc_r+0x444>
    4bac:	e3520013 	cmp	r2, #19
    4bb0:	91a03006 	movls	r3, r6
    4bb4:	91a02004 	movls	r2, r4
    4bb8:	8a000052 	bhi	4d08 <_realloc_r+0x3c4>
    4bbc:	e5921000 	ldr	r1, [r2]
    4bc0:	e5831000 	str	r1, [r3]
    4bc4:	e5921004 	ldr	r1, [r2, #4]
    4bc8:	e5831004 	str	r1, [r3, #4]
    4bcc:	e5922008 	ldr	r2, [r2, #8]
    4bd0:	e5832008 	str	r2, [r3, #8]
    4bd4:	e1a00008 	mov	r0, r8
    4bd8:	e1a01004 	mov	r1, r4
    4bdc:	ebfffc75 	bl	3db8 <_free_r>
    4be0:	e1a00008 	mov	r0, r8
    4be4:	ebfffb09 	bl	3810 <__malloc_unlock>
    4be8:	eaffff7e 	b	49e8 <_realloc_r+0xa4>
    4bec:	e083c007 	add	r12, r3, r7
    4bf0:	e15c0001 	cmp	r12, r1
    4bf4:	baffffde 	blt	4b74 <_realloc_r+0x230>
    4bf8:	e1a06009 	mov	r6, r9
    4bfc:	e599300c 	ldr	r3, [r9, #12]
    4c00:	e5b61008 	ldr	r1, [r6, #8]!
    4c04:	e2472004 	sub	r2, r7, #4
    4c08:	e3520024 	cmp	r2, #36	; 0x24
    4c0c:	e581300c 	str	r3, [r1, #12]
    4c10:	e5831008 	str	r1, [r3, #8]
    4c14:	8a000051 	bhi	4d60 <_realloc_r+0x41c>
    4c18:	e3520013 	cmp	r2, #19
    4c1c:	91a03006 	movls	r3, r6
    4c20:	9a000014 	bls	4c78 <_realloc_r+0x334>
    4c24:	e5943000 	ldr	r3, [r4]
    4c28:	e5893008 	str	r3, [r9, #8]
    4c2c:	e5943004 	ldr	r3, [r4, #4]
    4c30:	e352001b 	cmp	r2, #27
    4c34:	e589300c 	str	r3, [r9, #12]
    4c38:	92844008 	addls	r4, r4, #8
    4c3c:	92893010 	addls	r3, r9, #16
    4c40:	9a00000c 	bls	4c78 <_realloc_r+0x334>
    4c44:	e5943008 	ldr	r3, [r4, #8]
    4c48:	e5893010 	str	r3, [r9, #16]
    4c4c:	e594300c 	ldr	r3, [r4, #12]
    4c50:	e5893014 	str	r3, [r9, #20]
    4c54:	e3520024 	cmp	r2, #36	; 0x24
    4c58:	05943010 	ldreq	r3, [r4, #16]
    4c5c:	05893018 	streq	r3, [r9, #24]
    4c60:	05942014 	ldreq	r2, [r4, #20]
    4c64:	0589201c 	streq	r2, [r9, #28]
    4c68:	12893018 	addne	r3, r9, #24
    4c6c:	12844010 	addne	r4, r4, #16
    4c70:	02893020 	addeq	r3, r9, #32
    4c74:	02844018 	addeq	r4, r4, #24
    4c78:	e5942000 	ldr	r2, [r4]
    4c7c:	e5832000 	str	r2, [r3]
    4c80:	e5942004 	ldr	r2, [r4, #4]
    4c84:	e5832004 	str	r2, [r3, #4]
    4c88:	e5942008 	ldr	r2, [r4, #8]
    4c8c:	e5832008 	str	r2, [r3, #8]
    4c90:	e1a04006 	mov	r4, r6
    4c94:	e5993004 	ldr	r3, [r9, #4]
    4c98:	e1a0600c 	mov	r6, r12
    4c9c:	e1a0a009 	mov	r10, r9
    4ca0:	eaffff43 	b	49b4 <_realloc_r+0x70>
    4ca4:	e1a01002 	mov	r1, r2
    4ca8:	ebfff910 	bl	30f0 <_malloc_r>
    4cac:	e1a06000 	mov	r6, r0
    4cb0:	eaffff4c 	b	49e8 <_realloc_r+0xa4>
    4cb4:	e59ce004 	ldr	lr, [r12, #4]
    4cb8:	e3cee003 	bic	lr, lr, #3
    4cbc:	e08e0007 	add	r0, lr, r7
    4cc0:	e2856010 	add	r6, r5, #16
    4cc4:	e1500006 	cmp	r0, r6
    4cc8:	b1a0000c 	movlt	r0, r12
    4ccc:	baffff56 	blt	4a2c <_realloc_r+0xe8>
    4cd0:	e0653000 	rsb	r3, r5, r0
    4cd4:	e08aa005 	add	r10, r10, r5
    4cd8:	e3833001 	orr	r3, r3, #1
    4cdc:	e58a3004 	str	r3, [r10, #4]
    4ce0:	e5143004 	ldr	r3, [r4, #-4]
    4ce4:	e2033001 	and	r3, r3, #1
    4ce8:	e1855003 	orr	r5, r5, r3
    4cec:	e59f31c0 	ldr	r3, [pc, #448]	; 4eb4 <_realloc_r+0x570>
    4cf0:	e5045004 	str	r5, [r4, #-4]
    4cf4:	e1a00008 	mov	r0, r8
    4cf8:	e583a008 	str	r10, [r3, #8]
    4cfc:	e1a06004 	mov	r6, r4
    4d00:	ebfffac2 	bl	3810 <__malloc_unlock>
    4d04:	eaffff37 	b	49e8 <_realloc_r+0xa4>
    4d08:	e5943000 	ldr	r3, [r4]
    4d0c:	e5863000 	str	r3, [r6]
    4d10:	e5943004 	ldr	r3, [r4, #4]
    4d14:	e352001b 	cmp	r2, #27
    4d18:	e5863004 	str	r3, [r6, #4]
    4d1c:	92842008 	addls	r2, r4, #8
    4d20:	92863008 	addls	r3, r6, #8
    4d24:	9affffa4 	bls	4bbc <_realloc_r+0x278>
    4d28:	e5943008 	ldr	r3, [r4, #8]
    4d2c:	e5863008 	str	r3, [r6, #8]
    4d30:	e594300c 	ldr	r3, [r4, #12]
    4d34:	e586300c 	str	r3, [r6, #12]
    4d38:	e3520024 	cmp	r2, #36	; 0x24
    4d3c:	05943010 	ldreq	r3, [r4, #16]
    4d40:	05863010 	streq	r3, [r6, #16]
    4d44:	05942014 	ldreq	r2, [r4, #20]
    4d48:	12863010 	addne	r3, r6, #16
    4d4c:	05862014 	streq	r2, [r6, #20]
    4d50:	12842010 	addne	r2, r4, #16
    4d54:	02863018 	addeq	r3, r6, #24
    4d58:	02842018 	addeq	r2, r4, #24
    4d5c:	eaffff96 	b	4bbc <_realloc_r+0x278>
    4d60:	e1a01004 	mov	r1, r4
    4d64:	e1a00006 	mov	r0, r6
    4d68:	e58dc004 	str	r12, [sp, #4]
    4d6c:	ebfffea7 	bl	4810 <memmove>
    4d70:	e59dc004 	ldr	r12, [sp, #4]
    4d74:	e1a04006 	mov	r4, r6
    4d78:	e5993004 	ldr	r3, [r9, #4]
    4d7c:	e1a0600c 	mov	r6, r12
    4d80:	e1a0a009 	mov	r10, r9
    4d84:	eaffff0a 	b	49b4 <_realloc_r+0x70>
    4d88:	e1a01004 	mov	r1, r4
    4d8c:	ebfffe9f 	bl	4810 <memmove>
    4d90:	eaffff8f 	b	4bd4 <_realloc_r+0x290>
    4d94:	e08e300c 	add	r3, lr, r12
    4d98:	e2850010 	add	r0, r5, #16
    4d9c:	e1530000 	cmp	r3, r0
    4da0:	baffff92 	blt	4bf0 <_realloc_r+0x2ac>
    4da4:	e1a06009 	mov	r6, r9
    4da8:	e599100c 	ldr	r1, [r9, #12]
    4dac:	e5b60008 	ldr	r0, [r6, #8]!
    4db0:	e2472004 	sub	r2, r7, #4
    4db4:	e3520024 	cmp	r2, #36	; 0x24
    4db8:	e580100c 	str	r1, [r0, #12]
    4dbc:	e5810008 	str	r0, [r1, #8]
    4dc0:	8a000035 	bhi	4e9c <_realloc_r+0x558>
    4dc4:	e3520013 	cmp	r2, #19
    4dc8:	91a02006 	movls	r2, r6
    4dcc:	9a000014 	bls	4e24 <_realloc_r+0x4e0>
    4dd0:	e5941000 	ldr	r1, [r4]
    4dd4:	e5891008 	str	r1, [r9, #8]
    4dd8:	e5941004 	ldr	r1, [r4, #4]
    4ddc:	e352001b 	cmp	r2, #27
    4de0:	e589100c 	str	r1, [r9, #12]
    4de4:	92892010 	addls	r2, r9, #16
    4de8:	92844008 	addls	r4, r4, #8
    4dec:	9a00000c 	bls	4e24 <_realloc_r+0x4e0>
    4df0:	e5941008 	ldr	r1, [r4, #8]
    4df4:	e5891010 	str	r1, [r9, #16]
    4df8:	e594100c 	ldr	r1, [r4, #12]
    4dfc:	e5891014 	str	r1, [r9, #20]
    4e00:	e3520024 	cmp	r2, #36	; 0x24
    4e04:	05942010 	ldreq	r2, [r4, #16]
    4e08:	05892018 	streq	r2, [r9, #24]
    4e0c:	05941014 	ldreq	r1, [r4, #20]
    4e10:	0589101c 	streq	r1, [r9, #28]
    4e14:	12892018 	addne	r2, r9, #24
    4e18:	12844010 	addne	r4, r4, #16
    4e1c:	02892020 	addeq	r2, r9, #32
    4e20:	02844018 	addeq	r4, r4, #24
    4e24:	e5941000 	ldr	r1, [r4]
    4e28:	e5821000 	str	r1, [r2]
    4e2c:	e5941004 	ldr	r1, [r4, #4]
    4e30:	e5821004 	str	r1, [r2, #4]
    4e34:	e5941008 	ldr	r1, [r4, #8]
    4e38:	e5821008 	str	r1, [r2, #8]
    4e3c:	e0653003 	rsb	r3, r5, r3
    4e40:	e0892005 	add	r2, r9, r5
    4e44:	e3833001 	orr	r3, r3, #1
    4e48:	e5823004 	str	r3, [r2, #4]
    4e4c:	e5993004 	ldr	r3, [r9, #4]
    4e50:	e2033001 	and	r3, r3, #1
    4e54:	e1855003 	orr	r5, r5, r3
    4e58:	e59f3054 	ldr	r3, [pc, #84]	; 4eb4 <_realloc_r+0x570>
    4e5c:	e5895004 	str	r5, [r9, #4]
    4e60:	e1a00008 	mov	r0, r8
    4e64:	e5832008 	str	r2, [r3, #8]
    4e68:	ebfffa68 	bl	3810 <__malloc_unlock>
    4e6c:	eafffedd 	b	49e8 <_realloc_r+0xa4>
    4e70:	e5166004 	ldr	r6, [r6, #-4]
    4e74:	e3c66003 	bic	r6, r6, #3
    4e78:	e0866007 	add	r6, r6, r7
    4e7c:	eafffecc 	b	49b4 <_realloc_r+0x70>
    4e80:	e1a01004 	mov	r1, r4
    4e84:	e1a0000a 	mov	r0, r10
    4e88:	ebfffe60 	bl	4810 <memmove>
    4e8c:	e1a0400a 	mov	r4, r10
    4e90:	e5993004 	ldr	r3, [r9, #4]
    4e94:	e1a0a009 	mov	r10, r9
    4e98:	eafffec5 	b	49b4 <_realloc_r+0x70>
    4e9c:	e1a00006 	mov	r0, r6
    4ea0:	e1a01004 	mov	r1, r4
    4ea4:	e58d3004 	str	r3, [sp, #4]
    4ea8:	ebfffe58 	bl	4810 <memmove>
    4eac:	e59d3004 	ldr	r3, [sp, #4]
    4eb0:	eaffffe1 	b	4e3c <_realloc_r+0x4f8>
    4eb4:	00006a30 	.word	0x00006a30

00004eb8 <cleanup_glue>:
    4eb8:	e92d4038 	push	{r3, r4, r5, lr}
    4ebc:	e1a04001 	mov	r4, r1
    4ec0:	e5911000 	ldr	r1, [r1]
    4ec4:	e3510000 	cmp	r1, #0
    4ec8:	e1a05000 	mov	r5, r0
    4ecc:	1bfffff9 	blne	4eb8 <cleanup_glue>
    4ed0:	e1a00005 	mov	r0, r5
    4ed4:	e1a01004 	mov	r1, r4
    4ed8:	ebfffbb6 	bl	3db8 <_free_r>
    4edc:	e8bd4038 	pop	{r3, r4, r5, lr}
    4ee0:	e12fff1e 	bx	lr

00004ee4 <_reclaim_reent>:
    4ee4:	e59f30f0 	ldr	r3, [pc, #240]	; 4fdc <_reclaim_reent+0xf8>
    4ee8:	e5933000 	ldr	r3, [r3]
    4eec:	e1500003 	cmp	r0, r3
    4ef0:	e92d4070 	push	{r4, r5, r6, lr}
    4ef4:	e1a05000 	mov	r5, r0
    4ef8:	0a00002b 	beq	4fac <_reclaim_reent+0xc8>
    4efc:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    4f00:	e3520000 	cmp	r2, #0
    4f04:	0a000011 	beq	4f50 <_reclaim_reent+0x6c>
    4f08:	e3a03000 	mov	r3, #0
    4f0c:	e1a06003 	mov	r6, r3
    4f10:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    4f14:	e3510000 	cmp	r1, #0
    4f18:	0a000005 	beq	4f34 <_reclaim_reent+0x50>
    4f1c:	e5914000 	ldr	r4, [r1]
    4f20:	e1a00005 	mov	r0, r5
    4f24:	ebfffba3 	bl	3db8 <_free_r>
    4f28:	e2541000 	subs	r1, r4, #0
    4f2c:	1afffffa 	bne	4f1c <_reclaim_reent+0x38>
    4f30:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    4f34:	e2866001 	add	r6, r6, #1
    4f38:	e3560020 	cmp	r6, #32
    4f3c:	e1a03006 	mov	r3, r6
    4f40:	1afffff2 	bne	4f10 <_reclaim_reent+0x2c>
    4f44:	e1a00005 	mov	r0, r5
    4f48:	e1a01002 	mov	r1, r2
    4f4c:	ebfffb99 	bl	3db8 <_free_r>
    4f50:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    4f54:	e3510000 	cmp	r1, #0
    4f58:	11a00005 	movne	r0, r5
    4f5c:	1bfffb95 	blne	3db8 <_free_r>
    4f60:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    4f64:	e3510000 	cmp	r1, #0
    4f68:	0a000008 	beq	4f90 <_reclaim_reent+0xac>
    4f6c:	e2856f53 	add	r6, r5, #332	; 0x14c
    4f70:	e1510006 	cmp	r1, r6
    4f74:	0a000005 	beq	4f90 <_reclaim_reent+0xac>
    4f78:	e5914000 	ldr	r4, [r1]
    4f7c:	e1a00005 	mov	r0, r5
    4f80:	ebfffb8c 	bl	3db8 <_free_r>
    4f84:	e1560004 	cmp	r6, r4
    4f88:	e1a01004 	mov	r1, r4
    4f8c:	1afffff9 	bne	4f78 <_reclaim_reent+0x94>
    4f90:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    4f94:	e3510000 	cmp	r1, #0
    4f98:	11a00005 	movne	r0, r5
    4f9c:	1bfffb85 	blne	3db8 <_free_r>
    4fa0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    4fa4:	e3530000 	cmp	r3, #0
    4fa8:	1a000001 	bne	4fb4 <_reclaim_reent+0xd0>
    4fac:	e8bd4070 	pop	{r4, r5, r6, lr}
    4fb0:	e12fff1e 	bx	lr
    4fb4:	e1a00005 	mov	r0, r5
    4fb8:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    4fbc:	e1a0e00f 	mov	lr, pc
    4fc0:	e12fff1c 	bx	r12
    4fc4:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    4fc8:	e3510000 	cmp	r1, #0
    4fcc:	0afffff6 	beq	4fac <_reclaim_reent+0xc8>
    4fd0:	e1a00005 	mov	r0, r5
    4fd4:	e8bd4070 	pop	{r4, r5, r6, lr}
    4fd8:	eaffffb6 	b	4eb8 <cleanup_glue>
    4fdc:	00006600 	.word	0x00006600

00004fe0 <_wrapup_reent>:
    4fe0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    4fe4:	e2507000 	subs	r7, r0, #0
    4fe8:	059f3060 	ldreq	r3, [pc, #96]	; 5050 <_wrapup_reent+0x70>
    4fec:	05937000 	ldreq	r7, [r3]
    4ff0:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    4ff4:	e3560000 	cmp	r6, #0
    4ff8:	0a00000d 	beq	5034 <_wrapup_reent+0x54>
    4ffc:	e5965004 	ldr	r5, [r6, #4]
    5000:	e2554001 	subs	r4, r5, #1
    5004:	52855002 	addpl	r5, r5, #2
    5008:	50865105 	addpl	r5, r6, r5, lsl #2
    500c:	4a000005 	bmi	5028 <_wrapup_reent+0x48>
    5010:	e5353004 	ldr	r3, [r5, #-4]!
    5014:	e2444001 	sub	r4, r4, #1
    5018:	e1a0e00f 	mov	lr, pc
    501c:	e12fff13 	bx	r3
    5020:	e3740001 	cmn	r4, #1
    5024:	1afffff9 	bne	5010 <_wrapup_reent+0x30>
    5028:	e5966000 	ldr	r6, [r6]
    502c:	e3560000 	cmp	r6, #0
    5030:	1afffff1 	bne	4ffc <_wrapup_reent+0x1c>
    5034:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    5038:	e3530000 	cmp	r3, #0
    503c:	11a00007 	movne	r0, r7
    5040:	11a0e00f 	movne	lr, pc
    5044:	112fff13 	bxne	r3
    5048:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    504c:	e12fff1e 	bx	lr
    5050:	00006600 	.word	0x00006600

00005054 <__swsetup_r>:
    5054:	e92d4038 	push	{r3, r4, r5, lr}
    5058:	e59f3128 	ldr	r3, [pc, #296]	; 5188 <__swsetup_r+0x134>
    505c:	e5933000 	ldr	r3, [r3]
    5060:	e3530000 	cmp	r3, #0
    5064:	e1a05000 	mov	r5, r0
    5068:	e1a04001 	mov	r4, r1
    506c:	0a000002 	beq	507c <__swsetup_r+0x28>
    5070:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    5074:	e3520000 	cmp	r2, #0
    5078:	0a00002e 	beq	5138 <__swsetup_r+0xe4>
    507c:	e1d430bc 	ldrh	r3, [r4, #12]
    5080:	e3130008 	tst	r3, #8
    5084:	e1a02003 	mov	r2, r3
    5088:	0a00000c 	beq	50c0 <__swsetup_r+0x6c>
    508c:	e5942010 	ldr	r2, [r4, #16]
    5090:	e3520000 	cmp	r2, #0
    5094:	0a000012 	beq	50e4 <__swsetup_r+0x90>
    5098:	e2131001 	ands	r1, r3, #1
    509c:	1a000019 	bne	5108 <__swsetup_r+0xb4>
    50a0:	e3130002 	tst	r3, #2
    50a4:	05941014 	ldreq	r1, [r4, #20]
    50a8:	e3520000 	cmp	r2, #0
    50ac:	e5841008 	str	r1, [r4, #8]
    50b0:	0a00001b 	beq	5124 <__swsetup_r+0xd0>
    50b4:	e3a00000 	mov	r0, #0
    50b8:	e8bd4038 	pop	{r3, r4, r5, lr}
    50bc:	e12fff1e 	bx	lr
    50c0:	e3130010 	tst	r3, #16
    50c4:	0a000019 	beq	5130 <__swsetup_r+0xdc>
    50c8:	e3120004 	tst	r2, #4
    50cc:	1a00001c 	bne	5144 <__swsetup_r+0xf0>
    50d0:	e5942010 	ldr	r2, [r4, #16]
    50d4:	e3833008 	orr	r3, r3, #8
    50d8:	e3520000 	cmp	r2, #0
    50dc:	e1c430bc 	strh	r3, [r4, #12]
    50e0:	1affffec 	bne	5098 <__swsetup_r+0x44>
    50e4:	e2031d0a 	and	r1, r3, #640	; 0x280
    50e8:	e3510c02 	cmp	r1, #512	; 0x200
    50ec:	0affffe9 	beq	5098 <__swsetup_r+0x44>
    50f0:	e1a00005 	mov	r0, r5
    50f4:	e1a01004 	mov	r1, r4
    50f8:	eb0001b4 	bl	57d0 <__smakebuf_r>
    50fc:	e1d430bc 	ldrh	r3, [r4, #12]
    5100:	e5942010 	ldr	r2, [r4, #16]
    5104:	eaffffe3 	b	5098 <__swsetup_r+0x44>
    5108:	e5943014 	ldr	r3, [r4, #20]
    510c:	e3a01000 	mov	r1, #0
    5110:	e2633000 	rsb	r3, r3, #0
    5114:	e3520000 	cmp	r2, #0
    5118:	e5841008 	str	r1, [r4, #8]
    511c:	e5843018 	str	r3, [r4, #24]
    5120:	1affffe3 	bne	50b4 <__swsetup_r+0x60>
    5124:	e1d430bc 	ldrh	r3, [r4, #12]
    5128:	e3130080 	tst	r3, #128	; 0x80
    512c:	0affffe0 	beq	50b4 <__swsetup_r+0x60>
    5130:	e3e00000 	mvn	r0, #0
    5134:	eaffffdf 	b	50b8 <__swsetup_r+0x64>
    5138:	e1a00003 	mov	r0, r3
    513c:	eb0000ec 	bl	54f4 <__sinit>
    5140:	eaffffcd 	b	507c <__swsetup_r+0x28>
    5144:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    5148:	e3510000 	cmp	r1, #0
    514c:	0a000007 	beq	5170 <__swsetup_r+0x11c>
    5150:	e2842040 	add	r2, r4, #64	; 0x40
    5154:	e1510002 	cmp	r1, r2
    5158:	0a000002 	beq	5168 <__swsetup_r+0x114>
    515c:	e1a00005 	mov	r0, r5
    5160:	ebfffb14 	bl	3db8 <_free_r>
    5164:	e1d430bc 	ldrh	r3, [r4, #12]
    5168:	e3a02000 	mov	r2, #0
    516c:	e5842030 	str	r2, [r4, #48]	; 0x30
    5170:	e5942010 	ldr	r2, [r4, #16]
    5174:	e3a01000 	mov	r1, #0
    5178:	e3c33024 	bic	r3, r3, #36	; 0x24
    517c:	e5841004 	str	r1, [r4, #4]
    5180:	e5842000 	str	r2, [r4]
    5184:	eaffffd2 	b	50d4 <__swsetup_r+0x80>
    5188:	00006600 	.word	0x00006600

0000518c <_fflush_r>:
    518c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    5190:	e2507000 	subs	r7, r0, #0
    5194:	e1a04001 	mov	r4, r1
    5198:	0a000002 	beq	51a8 <_fflush_r+0x1c>
    519c:	e5973038 	ldr	r3, [r7, #56]	; 0x38
    51a0:	e3530000 	cmp	r3, #0
    51a4:	0a000059 	beq	5310 <_fflush_r+0x184>
    51a8:	e1d420bc 	ldrh	r2, [r4, #12]
    51ac:	e3520000 	cmp	r2, #0
    51b0:	0a000023 	beq	5244 <_fflush_r+0xb8>
    51b4:	e3120008 	tst	r2, #8
    51b8:	0a000024 	beq	5250 <_fflush_r+0xc4>
    51bc:	e5946010 	ldr	r6, [r4, #16]
    51c0:	e3560000 	cmp	r6, #0
    51c4:	0a00001e 	beq	5244 <_fflush_r+0xb8>
    51c8:	e5945000 	ldr	r5, [r4]
    51cc:	e3120003 	tst	r2, #3
    51d0:	05943014 	ldreq	r3, [r4, #20]
    51d4:	e0665005 	rsb	r5, r6, r5
    51d8:	13a03000 	movne	r3, #0
    51dc:	e3550000 	cmp	r5, #0
    51e0:	e5846000 	str	r6, [r4]
    51e4:	e5843008 	str	r3, [r4, #8]
    51e8:	ca000003 	bgt	51fc <_fflush_r+0x70>
    51ec:	ea000014 	b	5244 <_fflush_r+0xb8>
    51f0:	e3550000 	cmp	r5, #0
    51f4:	e0866000 	add	r6, r6, r0
    51f8:	da000011 	ble	5244 <_fflush_r+0xb8>
    51fc:	e1a03005 	mov	r3, r5
    5200:	e1a02006 	mov	r2, r6
    5204:	e1a00007 	mov	r0, r7
    5208:	e594101c 	ldr	r1, [r4, #28]
    520c:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    5210:	e1a0e00f 	mov	lr, pc
    5214:	e12fff1c 	bx	r12
    5218:	e3500000 	cmp	r0, #0
    521c:	e0605005 	rsb	r5, r0, r5
    5220:	cafffff2 	bgt	51f0 <_fflush_r+0x64>
    5224:	e1d430bc 	ldrh	r3, [r4, #12]
    5228:	e3833040 	orr	r3, r3, #64	; 0x40
    522c:	e1c430bc 	strh	r3, [r4, #12]
    5230:	e3e00000 	mvn	r0, #0
    5234:	ea000003 	b	5248 <_fflush_r+0xbc>
    5238:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
    523c:	e3510000 	cmp	r1, #0
    5240:	ca000007 	bgt	5264 <_fflush_r+0xd8>
    5244:	e3a00000 	mov	r0, #0
    5248:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    524c:	e12fff1e 	bx	lr
    5250:	e5941004 	ldr	r1, [r4, #4]
    5254:	e3823b02 	orr	r3, r2, #2048	; 0x800
    5258:	e3510000 	cmp	r1, #0
    525c:	e1c430bc 	strh	r3, [r4, #12]
    5260:	dafffff4 	ble	5238 <_fflush_r+0xac>
    5264:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    5268:	e35c0000 	cmp	r12, #0
    526c:	0afffff4 	beq	5244 <_fflush_r+0xb8>
    5270:	e3a01000 	mov	r1, #0
    5274:	e2126a01 	ands	r6, r2, #4096	; 0x1000
    5278:	e5975000 	ldr	r5, [r7]
    527c:	e5871000 	str	r1, [r7]
    5280:	0a000024 	beq	5318 <_fflush_r+0x18c>
    5284:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    5288:	e3130004 	tst	r3, #4
    528c:	0a000005 	beq	52a8 <_fflush_r+0x11c>
    5290:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    5294:	e5943004 	ldr	r3, [r4, #4]
    5298:	e3510000 	cmp	r1, #0
    529c:	e0632002 	rsb	r2, r3, r2
    52a0:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
    52a4:	10632002 	rsbne	r2, r3, r2
    52a8:	e1a00007 	mov	r0, r7
    52ac:	e594101c 	ldr	r1, [r4, #28]
    52b0:	e3a03000 	mov	r3, #0
    52b4:	e1a0e00f 	mov	lr, pc
    52b8:	e12fff1c 	bx	r12
    52bc:	e3700001 	cmn	r0, #1
    52c0:	0a000020 	beq	5348 <_fflush_r+0x1bc>
    52c4:	e1d430bc 	ldrh	r3, [r4, #12]
    52c8:	e5942010 	ldr	r2, [r4, #16]
    52cc:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    52d0:	e3130a01 	tst	r3, #4096	; 0x1000
    52d4:	e3a03000 	mov	r3, #0
    52d8:	e1c410bc 	strh	r1, [r4, #12]
    52dc:	e884000c 	stm	r4, {r2, r3}
    52e0:	1a000028 	bne	5388 <_fflush_r+0x1fc>
    52e4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    52e8:	e3510000 	cmp	r1, #0
    52ec:	e5875000 	str	r5, [r7]
    52f0:	0affffd3 	beq	5244 <_fflush_r+0xb8>
    52f4:	e2843040 	add	r3, r4, #64	; 0x40
    52f8:	e1510003 	cmp	r1, r3
    52fc:	11a00007 	movne	r0, r7
    5300:	1bfffaac 	blne	3db8 <_free_r>
    5304:	e3a00000 	mov	r0, #0
    5308:	e5840030 	str	r0, [r4, #48]	; 0x30
    530c:	eaffffcd 	b	5248 <_fflush_r+0xbc>
    5310:	eb000077 	bl	54f4 <__sinit>
    5314:	eaffffa3 	b	51a8 <_fflush_r+0x1c>
    5318:	e1a02006 	mov	r2, r6
    531c:	e1a00007 	mov	r0, r7
    5320:	e594101c 	ldr	r1, [r4, #28]
    5324:	e3a03001 	mov	r3, #1
    5328:	e1a0e00f 	mov	lr, pc
    532c:	e12fff1c 	bx	r12
    5330:	e3700001 	cmn	r0, #1
    5334:	e1a02000 	mov	r2, r0
    5338:	0a000014 	beq	5390 <_fflush_r+0x204>
    533c:	e1d430bc 	ldrh	r3, [r4, #12]
    5340:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    5344:	eaffffcf 	b	5288 <_fflush_r+0xfc>
    5348:	e597c000 	ldr	r12, [r7]
    534c:	e35c001d 	cmp	r12, #29
    5350:	8affffb3 	bhi	5224 <_fflush_r+0x98>
    5354:	e59f3058 	ldr	r3, [pc, #88]	; 53b4 <_fflush_r+0x228>
    5358:	e1b03c13 	lsls	r3, r3, r12
    535c:	5affffb0 	bpl	5224 <_fflush_r+0x98>
    5360:	e1d430bc 	ldrh	r3, [r4, #12]
    5364:	e5942010 	ldr	r2, [r4, #16]
    5368:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    536c:	e3130a01 	tst	r3, #4096	; 0x1000
    5370:	e3a03000 	mov	r3, #0
    5374:	e1c410bc 	strh	r1, [r4, #12]
    5378:	e884000c 	stm	r4, {r2, r3}
    537c:	0affffd8 	beq	52e4 <_fflush_r+0x158>
    5380:	e35c0000 	cmp	r12, #0
    5384:	1affffd6 	bne	52e4 <_fflush_r+0x158>
    5388:	e5840050 	str	r0, [r4, #80]	; 0x50
    538c:	eaffffd4 	b	52e4 <_fflush_r+0x158>
    5390:	e5973000 	ldr	r3, [r7]
    5394:	e3530000 	cmp	r3, #0
    5398:	0affffe7 	beq	533c <_fflush_r+0x1b0>
    539c:	e353001d 	cmp	r3, #29
    53a0:	13530016 	cmpne	r3, #22
    53a4:	05875000 	streq	r5, [r7]
    53a8:	01a00006 	moveq	r0, r6
    53ac:	0affffa5 	beq	5248 <_fflush_r+0xbc>
    53b0:	eaffff9b 	b	5224 <_fflush_r+0x98>
    53b4:	80000204 	.word	0x80000204

000053b8 <fflush>:
    53b8:	e2501000 	subs	r1, r0, #0
    53bc:	e92d4008 	push	{r3, lr}
    53c0:	0a000003 	beq	53d4 <fflush+0x1c>
    53c4:	e59f3020 	ldr	r3, [pc, #32]	; 53ec <fflush+0x34>
    53c8:	e5930000 	ldr	r0, [r3]
    53cc:	e8bd4008 	pop	{r3, lr}
    53d0:	eaffff6d 	b	518c <_fflush_r>
    53d4:	e59f3014 	ldr	r3, [pc, #20]	; 53f0 <fflush+0x38>
    53d8:	e59f1014 	ldr	r1, [pc, #20]	; 53f4 <fflush+0x3c>
    53dc:	e5930000 	ldr	r0, [r3]
    53e0:	eb0000d7 	bl	5744 <_fwalk_reent>
    53e4:	e8bd4008 	pop	{r3, lr}
    53e8:	e12fff1e 	bx	lr
    53ec:	00006600 	.word	0x00006600
    53f0:	00006594 	.word	0x00006594
    53f4:	0000518c 	.word	0x0000518c

000053f8 <__fp_lock>:
    53f8:	e3a00000 	mov	r0, #0
    53fc:	e12fff1e 	bx	lr

00005400 <__fp_unlock>:
    5400:	e3a00000 	mov	r0, #0
    5404:	e12fff1e 	bx	lr

00005408 <_cleanup_r>:
    5408:	e92d4008 	push	{r3, lr}
    540c:	e59f1008 	ldr	r1, [pc, #8]	; 541c <_cleanup_r+0x14>
    5410:	eb0000a9 	bl	56bc <_fwalk>
    5414:	e8bd4008 	pop	{r3, lr}
    5418:	e12fff1e 	bx	lr
    541c:	00005cb4 	.word	0x00005cb4

00005420 <std.isra.0>:
    5420:	e3a03000 	mov	r3, #0
    5424:	e92d4010 	push	{r4, lr}
    5428:	e1a04000 	mov	r4, r0
    542c:	e1c010bc 	strh	r1, [r0, #12]
    5430:	e1c020be 	strh	r2, [r0, #14]
    5434:	e5803000 	str	r3, [r0]
    5438:	e5803004 	str	r3, [r0, #4]
    543c:	e5803008 	str	r3, [r0, #8]
    5440:	e5803064 	str	r3, [r0, #100]	; 0x64
    5444:	e5803010 	str	r3, [r0, #16]
    5448:	e5803014 	str	r3, [r0, #20]
    544c:	e5803018 	str	r3, [r0, #24]
    5450:	e1a01003 	mov	r1, r3
    5454:	e280005c 	add	r0, r0, #92	; 0x5c
    5458:	e3a02008 	mov	r2, #8
    545c:	eb000132 	bl	592c <memset>
    5460:	e59f3024 	ldr	r3, [pc, #36]	; 548c <std.isra.0+0x6c>
    5464:	e5843020 	str	r3, [r4, #32]
    5468:	e59f3020 	ldr	r3, [pc, #32]	; 5490 <std.isra.0+0x70>
    546c:	e5843024 	str	r3, [r4, #36]	; 0x24
    5470:	e59f301c 	ldr	r3, [pc, #28]	; 5494 <std.isra.0+0x74>
    5474:	e5843028 	str	r3, [r4, #40]	; 0x28
    5478:	e59f3018 	ldr	r3, [pc, #24]	; 5498 <std.isra.0+0x78>
    547c:	e584401c 	str	r4, [r4, #28]
    5480:	e584302c 	str	r3, [r4, #44]	; 0x2c
    5484:	e8bd4010 	pop	{r4, lr}
    5488:	e12fff1e 	bx	lr
    548c:	00005a60 	.word	0x00005a60
    5490:	00005a9c 	.word	0x00005a9c
    5494:	00005af4 	.word	0x00005af4
    5498:	00005b28 	.word	0x00005b28

0000549c <__sfmoreglue>:
    549c:	e92d4070 	push	{r4, r5, r6, lr}
    54a0:	e0816081 	add	r6, r1, r1, lsl #1
    54a4:	e0816106 	add	r6, r1, r6, lsl #2
    54a8:	e1a06186 	lsl	r6, r6, #3
    54ac:	e1a05001 	mov	r5, r1
    54b0:	e286100c 	add	r1, r6, #12
    54b4:	ebfff70d 	bl	30f0 <_malloc_r>
    54b8:	e2504000 	subs	r4, r0, #0
    54bc:	0a000005 	beq	54d8 <__sfmoreglue+0x3c>
    54c0:	e284000c 	add	r0, r4, #12
    54c4:	e3a01000 	mov	r1, #0
    54c8:	e8840022 	stm	r4, {r1, r5}
    54cc:	e5840008 	str	r0, [r4, #8]
    54d0:	e1a02006 	mov	r2, r6
    54d4:	eb000114 	bl	592c <memset>
    54d8:	e1a00004 	mov	r0, r4
    54dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    54e0:	e12fff1e 	bx	lr

000054e4 <_cleanup>:
    54e4:	e59f3004 	ldr	r3, [pc, #4]	; 54f0 <_cleanup+0xc>
    54e8:	e5930000 	ldr	r0, [r3]
    54ec:	eaffffc5 	b	5408 <_cleanup_r>
    54f0:	00006594 	.word	0x00006594

000054f4 <__sinit>:
    54f4:	e92d4038 	push	{r3, r4, r5, lr}
    54f8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    54fc:	e3530000 	cmp	r3, #0
    5500:	e1a04000 	mov	r4, r0
    5504:	0a000001 	beq	5510 <__sinit+0x1c>
    5508:	e8bd4038 	pop	{r3, r4, r5, lr}
    550c:	e12fff1e 	bx	lr
    5510:	e59fe050 	ldr	lr, [pc, #80]	; 5568 <__sinit+0x74>
    5514:	e280cfbb 	add	r12, r0, #748	; 0x2ec
    5518:	e3a05001 	mov	r5, #1
    551c:	e1a02003 	mov	r2, r3
    5520:	e58432e0 	str	r3, [r4, #736]	; 0x2e0
    5524:	e3a03003 	mov	r3, #3
    5528:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    552c:	e58432e4 	str	r3, [r4, #740]	; 0x2e4
    5530:	e584c2e8 	str	r12, [r4, #744]	; 0x2e8
    5534:	e5900004 	ldr	r0, [r0, #4]
    5538:	e3a01004 	mov	r1, #4
    553c:	e5845038 	str	r5, [r4, #56]	; 0x38
    5540:	ebffffb6 	bl	5420 <std.isra.0>
    5544:	e5940008 	ldr	r0, [r4, #8]
    5548:	e1a02005 	mov	r2, r5
    554c:	e3a01009 	mov	r1, #9
    5550:	ebffffb2 	bl	5420 <std.isra.0>
    5554:	e594000c 	ldr	r0, [r4, #12]
    5558:	e3a01012 	mov	r1, #18
    555c:	e3a02002 	mov	r2, #2
    5560:	e8bd4038 	pop	{r3, r4, r5, lr}
    5564:	eaffffad 	b	5420 <std.isra.0>
    5568:	00005408 	.word	0x00005408

0000556c <__sfp>:
    556c:	e59f30ec 	ldr	r3, [pc, #236]	; 5660 <__sfp+0xf4>
    5570:	e92d4070 	push	{r4, r5, r6, lr}
    5574:	e5935000 	ldr	r5, [r3]
    5578:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    557c:	e3530000 	cmp	r3, #0
    5580:	e1a06000 	mov	r6, r0
    5584:	0a000028 	beq	562c <__sfp+0xc0>
    5588:	e2855e2e 	add	r5, r5, #736	; 0x2e0
    558c:	e5953004 	ldr	r3, [r5, #4]
    5590:	e2533001 	subs	r3, r3, #1
    5594:	e5954008 	ldr	r4, [r5, #8]
    5598:	5a000004 	bpl	55b0 <__sfp+0x44>
    559c:	ea00001d 	b	5618 <__sfp+0xac>
    55a0:	e2433001 	sub	r3, r3, #1
    55a4:	e3730001 	cmn	r3, #1
    55a8:	e2844068 	add	r4, r4, #104	; 0x68
    55ac:	0a000019 	beq	5618 <__sfp+0xac>
    55b0:	e1d420fc 	ldrsh	r2, [r4, #12]
    55b4:	e3520000 	cmp	r2, #0
    55b8:	1afffff8 	bne	55a0 <__sfp+0x34>
    55bc:	e3e03000 	mvn	r3, #0
    55c0:	e3a05000 	mov	r5, #0
    55c4:	e1c430be 	strh	r3, [r4, #14]
    55c8:	e3a03001 	mov	r3, #1
    55cc:	e1c430bc 	strh	r3, [r4, #12]
    55d0:	e5845064 	str	r5, [r4, #100]	; 0x64
    55d4:	e5845000 	str	r5, [r4]
    55d8:	e5845008 	str	r5, [r4, #8]
    55dc:	e5845004 	str	r5, [r4, #4]
    55e0:	e5845010 	str	r5, [r4, #16]
    55e4:	e5845014 	str	r5, [r4, #20]
    55e8:	e5845018 	str	r5, [r4, #24]
    55ec:	e284005c 	add	r0, r4, #92	; 0x5c
    55f0:	e1a01005 	mov	r1, r5
    55f4:	e3a02008 	mov	r2, #8
    55f8:	eb0000cb 	bl	592c <memset>
    55fc:	e5845030 	str	r5, [r4, #48]	; 0x30
    5600:	e5845034 	str	r5, [r4, #52]	; 0x34
    5604:	e5845044 	str	r5, [r4, #68]	; 0x44
    5608:	e5845048 	str	r5, [r4, #72]	; 0x48
    560c:	e1a00004 	mov	r0, r4
    5610:	e8bd4070 	pop	{r4, r5, r6, lr}
    5614:	e12fff1e 	bx	lr
    5618:	e5950000 	ldr	r0, [r5]
    561c:	e3500000 	cmp	r0, #0
    5620:	0a000004 	beq	5638 <__sfp+0xcc>
    5624:	e1a05000 	mov	r5, r0
    5628:	eaffffd7 	b	558c <__sfp+0x20>
    562c:	e1a00005 	mov	r0, r5
    5630:	ebffffaf 	bl	54f4 <__sinit>
    5634:	eaffffd3 	b	5588 <__sfp+0x1c>
    5638:	e1a00006 	mov	r0, r6
    563c:	e3a01004 	mov	r1, #4
    5640:	ebffff95 	bl	549c <__sfmoreglue>
    5644:	e3500000 	cmp	r0, #0
    5648:	e5850000 	str	r0, [r5]
    564c:	1afffff4 	bne	5624 <__sfp+0xb8>
    5650:	e3a0300c 	mov	r3, #12
    5654:	e5863000 	str	r3, [r6]
    5658:	e1a04000 	mov	r4, r0
    565c:	eaffffea 	b	560c <__sfp+0xa0>
    5660:	00006594 	.word	0x00006594

00005664 <__sfp_lock_acquire>:
    5664:	e12fff1e 	bx	lr

00005668 <__sfp_lock_release>:
    5668:	e12fff1e 	bx	lr

0000566c <__sinit_lock_acquire>:
    566c:	e12fff1e 	bx	lr

00005670 <__sinit_lock_release>:
    5670:	e12fff1e 	bx	lr

00005674 <__fp_lock_all>:
    5674:	e92d4008 	push	{r3, lr}
    5678:	e59f3010 	ldr	r3, [pc, #16]	; 5690 <__fp_lock_all+0x1c>
    567c:	e59f1010 	ldr	r1, [pc, #16]	; 5694 <__fp_lock_all+0x20>
    5680:	e5930000 	ldr	r0, [r3]
    5684:	eb00000c 	bl	56bc <_fwalk>
    5688:	e8bd4008 	pop	{r3, lr}
    568c:	e12fff1e 	bx	lr
    5690:	00006600 	.word	0x00006600
    5694:	000053f8 	.word	0x000053f8

00005698 <__fp_unlock_all>:
    5698:	e92d4008 	push	{r3, lr}
    569c:	e59f3010 	ldr	r3, [pc, #16]	; 56b4 <__fp_unlock_all+0x1c>
    56a0:	e59f1010 	ldr	r1, [pc, #16]	; 56b8 <__fp_unlock_all+0x20>
    56a4:	e5930000 	ldr	r0, [r3]
    56a8:	eb000003 	bl	56bc <_fwalk>
    56ac:	e8bd4008 	pop	{r3, lr}
    56b0:	e12fff1e 	bx	lr
    56b4:	00006600 	.word	0x00006600
    56b8:	00005400 	.word	0x00005400

000056bc <_fwalk>:
    56bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    56c0:	e1a06000 	mov	r6, r0
    56c4:	e1a08001 	mov	r8, r1
    56c8:	ebffffe5 	bl	5664 <__sfp_lock_acquire>
    56cc:	e2966e2e 	adds	r6, r6, #736	; 0x2e0
    56d0:	0a000019 	beq	573c <_fwalk+0x80>
    56d4:	e3a07000 	mov	r7, #0
    56d8:	e5965004 	ldr	r5, [r6, #4]
    56dc:	e2555001 	subs	r5, r5, #1
    56e0:	e5964008 	ldr	r4, [r6, #8]
    56e4:	4a00000d 	bmi	5720 <_fwalk+0x64>
    56e8:	e1d430fc 	ldrsh	r3, [r4, #12]
    56ec:	e3530000 	cmp	r3, #0
    56f0:	e2455001 	sub	r5, r5, #1
    56f4:	0a000006 	beq	5714 <_fwalk+0x58>
    56f8:	e1d430fe 	ldrsh	r3, [r4, #14]
    56fc:	e3730001 	cmn	r3, #1
    5700:	e1a00004 	mov	r0, r4
    5704:	0a000002 	beq	5714 <_fwalk+0x58>
    5708:	e1a0e00f 	mov	lr, pc
    570c:	e12fff18 	bx	r8
    5710:	e1877000 	orr	r7, r7, r0
    5714:	e3750001 	cmn	r5, #1
    5718:	e2844068 	add	r4, r4, #104	; 0x68
    571c:	1afffff1 	bne	56e8 <_fwalk+0x2c>
    5720:	e5966000 	ldr	r6, [r6]
    5724:	e3560000 	cmp	r6, #0
    5728:	1affffea 	bne	56d8 <_fwalk+0x1c>
    572c:	ebffffcd 	bl	5668 <__sfp_lock_release>
    5730:	e1a00007 	mov	r0, r7
    5734:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    5738:	e12fff1e 	bx	lr
    573c:	e1a07006 	mov	r7, r6
    5740:	eafffff9 	b	572c <_fwalk+0x70>

00005744 <_fwalk_reent>:
    5744:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    5748:	e1a07000 	mov	r7, r0
    574c:	e1a08001 	mov	r8, r1
    5750:	ebffffc3 	bl	5664 <__sfp_lock_acquire>
    5754:	e2976e2e 	adds	r6, r7, #736	; 0x2e0
    5758:	0a00001a 	beq	57c8 <_fwalk_reent+0x84>
    575c:	e3a0a000 	mov	r10, #0
    5760:	e5965004 	ldr	r5, [r6, #4]
    5764:	e2555001 	subs	r5, r5, #1
    5768:	e5964008 	ldr	r4, [r6, #8]
    576c:	4a00000e 	bmi	57ac <_fwalk_reent+0x68>
    5770:	e1d430fc 	ldrsh	r3, [r4, #12]
    5774:	e3530000 	cmp	r3, #0
    5778:	e2455001 	sub	r5, r5, #1
    577c:	0a000007 	beq	57a0 <_fwalk_reent+0x5c>
    5780:	e1d430fe 	ldrsh	r3, [r4, #14]
    5784:	e3730001 	cmn	r3, #1
    5788:	e1a01004 	mov	r1, r4
    578c:	e1a00007 	mov	r0, r7
    5790:	0a000002 	beq	57a0 <_fwalk_reent+0x5c>
    5794:	e1a0e00f 	mov	lr, pc
    5798:	e12fff18 	bx	r8
    579c:	e18aa000 	orr	r10, r10, r0
    57a0:	e3750001 	cmn	r5, #1
    57a4:	e2844068 	add	r4, r4, #104	; 0x68
    57a8:	1afffff0 	bne	5770 <_fwalk_reent+0x2c>
    57ac:	e5966000 	ldr	r6, [r6]
    57b0:	e3560000 	cmp	r6, #0
    57b4:	1affffe9 	bne	5760 <_fwalk_reent+0x1c>
    57b8:	ebffffaa 	bl	5668 <__sfp_lock_release>
    57bc:	e1a0000a 	mov	r0, r10
    57c0:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    57c4:	e12fff1e 	bx	lr
    57c8:	e1a0a006 	mov	r10, r6
    57cc:	eafffff9 	b	57b8 <_fwalk_reent+0x74>

000057d0 <__smakebuf_r>:
    57d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    57d4:	e1d130bc 	ldrh	r3, [r1, #12]
    57d8:	e3130002 	tst	r3, #2
    57dc:	e24dd044 	sub	sp, sp, #68	; 0x44
    57e0:	e1a04001 	mov	r4, r1
    57e4:	e1a05000 	mov	r5, r0
    57e8:	1a00002b 	bne	589c <__smakebuf_r+0xcc>
    57ec:	e1d110fe 	ldrsh	r1, [r1, #14]
    57f0:	e3510000 	cmp	r1, #0
    57f4:	ba000010 	blt	583c <__smakebuf_r+0x6c>
    57f8:	e28d2004 	add	r2, sp, #4
    57fc:	eb000131 	bl	5cc8 <_fstat_r>
    5800:	e3500000 	cmp	r0, #0
    5804:	ba00000b 	blt	5838 <__smakebuf_r+0x68>
    5808:	e59d3008 	ldr	r3, [sp, #8]
    580c:	e2033a0f 	and	r3, r3, #61440	; 0xf000
    5810:	e2532a02 	subs	r2, r3, #8192	; 0x2000
    5814:	e2727000 	rsbs	r7, r2, #0
    5818:	e0b77002 	adcs	r7, r7, r2
    581c:	e3530902 	cmp	r3, #32768	; 0x8000
    5820:	0a000023 	beq	58b4 <__smakebuf_r+0xe4>
    5824:	e1d430bc 	ldrh	r3, [r4, #12]
    5828:	e3833b02 	orr	r3, r3, #2048	; 0x800
    582c:	e1c430bc 	strh	r3, [r4, #12]
    5830:	e3a06b01 	mov	r6, #1024	; 0x400
    5834:	ea000006 	b	5854 <__smakebuf_r+0x84>
    5838:	e1d430bc 	ldrh	r3, [r4, #12]
    583c:	e3130080 	tst	r3, #128	; 0x80
    5840:	e3833b02 	orr	r3, r3, #2048	; 0x800
    5844:	e1c430bc 	strh	r3, [r4, #12]
    5848:	03a06b01 	moveq	r6, #1024	; 0x400
    584c:	13a06040 	movne	r6, #64	; 0x40
    5850:	e3a07000 	mov	r7, #0
    5854:	e1a00005 	mov	r0, r5
    5858:	e1a01006 	mov	r1, r6
    585c:	ebfff623 	bl	30f0 <_malloc_r>
    5860:	e3500000 	cmp	r0, #0
    5864:	e1d430bc 	ldrh	r3, [r4, #12]
    5868:	0a000023 	beq	58fc <__smakebuf_r+0x12c>
    586c:	e59f20b0 	ldr	r2, [pc, #176]	; 5924 <__smakebuf_r+0x154>
    5870:	e3833080 	orr	r3, r3, #128	; 0x80
    5874:	e3570000 	cmp	r7, #0
    5878:	e585203c 	str	r2, [r5, #60]	; 0x3c
    587c:	e1c430bc 	strh	r3, [r4, #12]
    5880:	e5840000 	str	r0, [r4]
    5884:	e5840010 	str	r0, [r4, #16]
    5888:	e5846014 	str	r6, [r4, #20]
    588c:	1a000012 	bne	58dc <__smakebuf_r+0x10c>
    5890:	e28dd044 	add	sp, sp, #68	; 0x44
    5894:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    5898:	e12fff1e 	bx	lr
    589c:	e2813043 	add	r3, r1, #67	; 0x43
    58a0:	e5813000 	str	r3, [r1]
    58a4:	e5813010 	str	r3, [r1, #16]
    58a8:	e3a03001 	mov	r3, #1
    58ac:	e5813014 	str	r3, [r1, #20]
    58b0:	eafffff6 	b	5890 <__smakebuf_r+0xc0>
    58b4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    58b8:	e59f3068 	ldr	r3, [pc, #104]	; 5928 <__smakebuf_r+0x158>
    58bc:	e1520003 	cmp	r2, r3
    58c0:	1affffd7 	bne	5824 <__smakebuf_r+0x54>
    58c4:	e1d430bc 	ldrh	r3, [r4, #12]
    58c8:	e3a06b01 	mov	r6, #1024	; 0x400
    58cc:	e1833006 	orr	r3, r3, r6
    58d0:	e1c430bc 	strh	r3, [r4, #12]
    58d4:	e584604c 	str	r6, [r4, #76]	; 0x4c
    58d8:	eaffffdd 	b	5854 <__smakebuf_r+0x84>
    58dc:	e1a00005 	mov	r0, r5
    58e0:	e1d410fe 	ldrsh	r1, [r4, #14]
    58e4:	eb000107 	bl	5d08 <_isatty_r>
    58e8:	e3500000 	cmp	r0, #0
    58ec:	11d430bc 	ldrhne	r3, [r4, #12]
    58f0:	13833001 	orrne	r3, r3, #1
    58f4:	11c430bc 	strhne	r3, [r4, #12]
    58f8:	eaffffe4 	b	5890 <__smakebuf_r+0xc0>
    58fc:	e3130c02 	tst	r3, #512	; 0x200
    5900:	1affffe2 	bne	5890 <__smakebuf_r+0xc0>
    5904:	e3833002 	orr	r3, r3, #2
    5908:	e2842043 	add	r2, r4, #67	; 0x43
    590c:	e1c430bc 	strh	r3, [r4, #12]
    5910:	e3a03001 	mov	r3, #1
    5914:	e5842000 	str	r2, [r4]
    5918:	e5842010 	str	r2, [r4, #16]
    591c:	e5843014 	str	r3, [r4, #20]
    5920:	eaffffda 	b	5890 <__smakebuf_r+0xc0>
    5924:	00005408 	.word	0x00005408
    5928:	00005af4 	.word	0x00005af4

0000592c <memset>:
    592c:	e3520003 	cmp	r2, #3
    5930:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    5934:	e20110ff 	and	r1, r1, #255	; 0xff
    5938:	8a000008 	bhi	5960 <memset+0x34>
    593c:	e3520000 	cmp	r2, #0
    5940:	0a000004 	beq	5958 <memset+0x2c>
    5944:	e1a03000 	mov	r3, r0
    5948:	e0822000 	add	r2, r2, r0
    594c:	e4c31001 	strb	r1, [r3], #1
    5950:	e1530002 	cmp	r3, r2
    5954:	1afffffc 	bne	594c <memset+0x20>
    5958:	e8bd0010 	ldmfd	sp!, {r4}
    595c:	e12fff1e 	bx	lr
    5960:	e3100003 	tst	r0, #3
    5964:	e0802002 	add	r2, r0, r2
    5968:	0a000007 	beq	598c <memset+0x60>
    596c:	e280c001 	add	r12, r0, #1
    5970:	e20c3003 	and	r3, r12, #3
    5974:	e3530000 	cmp	r3, #0
    5978:	e54c1001 	strb	r1, [r12, #-1]
    597c:	e1a0300c 	mov	r3, r12
    5980:	e28cc001 	add	r12, r12, #1
    5984:	1afffff9 	bne	5970 <memset+0x44>
    5988:	ea000000 	b	5990 <memset+0x64>
    598c:	e1a03000 	mov	r3, r0
    5990:	e0634002 	rsb	r4, r3, r2
    5994:	e081c401 	add	r12, r1, r1, lsl #8
    5998:	e354003f 	cmp	r4, #63	; 0x3f
    599c:	e08cc80c 	add	r12, r12, r12, lsl #16
    59a0:	da00001a 	ble	5a10 <memset+0xe4>
    59a4:	e583c000 	str	r12, [r3]
    59a8:	e583c004 	str	r12, [r3, #4]
    59ac:	e583c008 	str	r12, [r3, #8]
    59b0:	e583c00c 	str	r12, [r3, #12]
    59b4:	e583c010 	str	r12, [r3, #16]
    59b8:	e583c014 	str	r12, [r3, #20]
    59bc:	e583c018 	str	r12, [r3, #24]
    59c0:	e583c01c 	str	r12, [r3, #28]
    59c4:	e583c020 	str	r12, [r3, #32]
    59c8:	e583c024 	str	r12, [r3, #36]	; 0x24
    59cc:	e583c028 	str	r12, [r3, #40]	; 0x28
    59d0:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    59d4:	e583c030 	str	r12, [r3, #48]	; 0x30
    59d8:	e583c034 	str	r12, [r3, #52]	; 0x34
    59dc:	e583c038 	str	r12, [r3, #56]	; 0x38
    59e0:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    59e4:	e2833040 	add	r3, r3, #64	; 0x40
    59e8:	e0634002 	rsb	r4, r3, r2
    59ec:	e354003f 	cmp	r4, #63	; 0x3f
    59f0:	caffffeb 	bgt	59a4 <memset+0x78>
    59f4:	ea000005 	b	5a10 <memset+0xe4>
    59f8:	e583c000 	str	r12, [r3]
    59fc:	e583c004 	str	r12, [r3, #4]
    5a00:	e583c008 	str	r12, [r3, #8]
    5a04:	e583c00c 	str	r12, [r3, #12]
    5a08:	e2833010 	add	r3, r3, #16
    5a0c:	e0634002 	rsb	r4, r3, r2
    5a10:	e354000f 	cmp	r4, #15
    5a14:	cafffff7 	bgt	59f8 <memset+0xcc>
    5a18:	e3540003 	cmp	r4, #3
    5a1c:	da000006 	ble	5a3c <memset+0x110>
    5a20:	e2834004 	add	r4, r3, #4
    5a24:	e0643002 	rsb	r3, r4, r2
    5a28:	e3530003 	cmp	r3, #3
    5a2c:	e504c004 	str	r12, [r4, #-4]
    5a30:	e1a03004 	mov	r3, r4
    5a34:	e2844004 	add	r4, r4, #4
    5a38:	cafffff9 	bgt	5a24 <memset+0xf8>
    5a3c:	e1520003 	cmp	r2, r3
    5a40:	9affffc4 	bls	5958 <memset+0x2c>
    5a44:	e2833001 	add	r3, r3, #1
    5a48:	e2822001 	add	r2, r2, #1
    5a4c:	e5431001 	strb	r1, [r3, #-1]
    5a50:	e2833001 	add	r3, r3, #1
    5a54:	e1530002 	cmp	r3, r2
    5a58:	1afffffb 	bne	5a4c <memset+0x120>
    5a5c:	eaffffbd 	b	5958 <memset+0x2c>

00005a60 <__sread>:
    5a60:	e92d4010 	push	{r4, lr}
    5a64:	e1a04001 	mov	r4, r1
    5a68:	e1d110fe 	ldrsh	r1, [r1, #14]
    5a6c:	eb0000c5 	bl	5d88 <_read_r>
    5a70:	e3500000 	cmp	r0, #0
    5a74:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
    5a78:	b1d430bc 	ldrhlt	r3, [r4, #12]
    5a7c:	a0833000 	addge	r3, r3, r0
    5a80:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    5a84:	a5843050 	strge	r3, [r4, #80]	; 0x50
    5a88:	b1c430bc 	strhlt	r3, [r4, #12]
    5a8c:	e8bd4010 	pop	{r4, lr}
    5a90:	e12fff1e 	bx	lr

00005a94 <__seofread>:
    5a94:	e3a00000 	mov	r0, #0
    5a98:	e12fff1e 	bx	lr

00005a9c <__swrite>:
    5a9c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    5aa0:	e1a04001 	mov	r4, r1
    5aa4:	e1d110bc 	ldrh	r1, [r1, #12]
    5aa8:	e3110c01 	tst	r1, #256	; 0x100
    5aac:	e1a07000 	mov	r7, r0
    5ab0:	e1a06002 	mov	r6, r2
    5ab4:	e1a05003 	mov	r5, r3
    5ab8:	0a000004 	beq	5ad0 <__swrite+0x34>
    5abc:	e1d410fe 	ldrsh	r1, [r4, #14]
    5ac0:	e3a02000 	mov	r2, #0
    5ac4:	e3a03002 	mov	r3, #2
    5ac8:	eb00009d 	bl	5d44 <_lseek_r>
    5acc:	e1d410bc 	ldrh	r1, [r4, #12]
    5ad0:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
    5ad4:	e1c410bc 	strh	r1, [r4, #12]
    5ad8:	e1a00007 	mov	r0, r7
    5adc:	e1d410fe 	ldrsh	r1, [r4, #14]
    5ae0:	e1a02006 	mov	r2, r6
    5ae4:	e1a03005 	mov	r3, r5
    5ae8:	eb000013 	bl	5b3c <_write_r>
    5aec:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    5af0:	e12fff1e 	bx	lr

00005af4 <__sseek>:
    5af4:	e92d4010 	push	{r4, lr}
    5af8:	e1a04001 	mov	r4, r1
    5afc:	e1d110fe 	ldrsh	r1, [r1, #14]
    5b00:	eb00008f 	bl	5d44 <_lseek_r>
    5b04:	e1d430bc 	ldrh	r3, [r4, #12]
    5b08:	e3700001 	cmn	r0, #1
    5b0c:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    5b10:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    5b14:	01c430bc 	strheq	r3, [r4, #12]
    5b18:	11c430bc 	strhne	r3, [r4, #12]
    5b1c:	15840050 	strne	r0, [r4, #80]	; 0x50
    5b20:	e8bd4010 	pop	{r4, lr}
    5b24:	e12fff1e 	bx	lr

00005b28 <__sclose>:
    5b28:	e92d4008 	push	{r3, lr}
    5b2c:	e1d110fe 	ldrsh	r1, [r1, #14]
    5b30:	eb000012 	bl	5b80 <_close_r>
    5b34:	e8bd4008 	pop	{r3, lr}
    5b38:	e12fff1e 	bx	lr

00005b3c <_write_r>:
    5b3c:	e92d4038 	push	{r3, r4, r5, lr}
    5b40:	e59f4034 	ldr	r4, [pc, #52]	; 5b7c <_write_r+0x40>
    5b44:	e1a05000 	mov	r5, r0
    5b48:	e1a00001 	mov	r0, r1
    5b4c:	e1a01002 	mov	r1, r2
    5b50:	e1a02003 	mov	r2, r3
    5b54:	e3a03000 	mov	r3, #0
    5b58:	e5843000 	str	r3, [r4]
    5b5c:	eb000137 	bl	6040 <_write>
    5b60:	e3700001 	cmn	r0, #1
    5b64:	1a000002 	bne	5b74 <_write_r+0x38>
    5b68:	e5943000 	ldr	r3, [r4]
    5b6c:	e3530000 	cmp	r3, #0
    5b70:	15853000 	strne	r3, [r5]
    5b74:	e8bd4038 	pop	{r3, r4, r5, lr}
    5b78:	e12fff1e 	bx	lr
    5b7c:	00006fdc 	.word	0x00006fdc

00005b80 <_close_r>:
    5b80:	e92d4038 	push	{r3, r4, r5, lr}
    5b84:	e59f402c 	ldr	r4, [pc, #44]	; 5bb8 <_close_r+0x38>
    5b88:	e3a03000 	mov	r3, #0
    5b8c:	e1a05000 	mov	r5, r0
    5b90:	e1a00001 	mov	r0, r1
    5b94:	e5843000 	str	r3, [r4]
    5b98:	eb00009e 	bl	5e18 <_close>
    5b9c:	e3700001 	cmn	r0, #1
    5ba0:	1a000002 	bne	5bb0 <_close_r+0x30>
    5ba4:	e5943000 	ldr	r3, [r4]
    5ba8:	e3530000 	cmp	r3, #0
    5bac:	15853000 	strne	r3, [r5]
    5bb0:	e8bd4038 	pop	{r3, r4, r5, lr}
    5bb4:	e12fff1e 	bx	lr
    5bb8:	00006fdc 	.word	0x00006fdc

00005bbc <_fclose_r>:
    5bbc:	e92d4070 	push	{r4, r5, r6, lr}
    5bc0:	e2514000 	subs	r4, r1, #0
    5bc4:	e1a05000 	mov	r5, r0
    5bc8:	01a06004 	moveq	r6, r4
    5bcc:	0a00002b 	beq	5c80 <_fclose_r+0xc4>
    5bd0:	ebfffea3 	bl	5664 <__sfp_lock_acquire>
    5bd4:	e3550000 	cmp	r5, #0
    5bd8:	0a000002 	beq	5be8 <_fclose_r+0x2c>
    5bdc:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    5be0:	e3530000 	cmp	r3, #0
    5be4:	0a000028 	beq	5c8c <_fclose_r+0xd0>
    5be8:	e1d460fc 	ldrsh	r6, [r4, #12]
    5bec:	e3560000 	cmp	r6, #0
    5bf0:	0a000021 	beq	5c7c <_fclose_r+0xc0>
    5bf4:	e1a00005 	mov	r0, r5
    5bf8:	e1a01004 	mov	r1, r4
    5bfc:	ebfffd62 	bl	518c <_fflush_r>
    5c00:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    5c04:	e3530000 	cmp	r3, #0
    5c08:	e1a06000 	mov	r6, r0
    5c0c:	0a000005 	beq	5c28 <_fclose_r+0x6c>
    5c10:	e1a00005 	mov	r0, r5
    5c14:	e594101c 	ldr	r1, [r4, #28]
    5c18:	e1a0e00f 	mov	lr, pc
    5c1c:	e12fff13 	bx	r3
    5c20:	e3500000 	cmp	r0, #0
    5c24:	b3e06000 	mvnlt	r6, #0
    5c28:	e1d430bc 	ldrh	r3, [r4, #12]
    5c2c:	e3130080 	tst	r3, #128	; 0x80
    5c30:	1a00001b 	bne	5ca4 <_fclose_r+0xe8>
    5c34:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    5c38:	e3510000 	cmp	r1, #0
    5c3c:	0a000005 	beq	5c58 <_fclose_r+0x9c>
    5c40:	e2843040 	add	r3, r4, #64	; 0x40
    5c44:	e1510003 	cmp	r1, r3
    5c48:	11a00005 	movne	r0, r5
    5c4c:	1bfff859 	blne	3db8 <_free_r>
    5c50:	e3a03000 	mov	r3, #0
    5c54:	e5843030 	str	r3, [r4, #48]	; 0x30
    5c58:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    5c5c:	e3510000 	cmp	r1, #0
    5c60:	0a000003 	beq	5c74 <_fclose_r+0xb8>
    5c64:	e1a00005 	mov	r0, r5
    5c68:	ebfff852 	bl	3db8 <_free_r>
    5c6c:	e3a03000 	mov	r3, #0
    5c70:	e5843044 	str	r3, [r4, #68]	; 0x44
    5c74:	e3a03000 	mov	r3, #0
    5c78:	e1c430bc 	strh	r3, [r4, #12]
    5c7c:	ebfffe79 	bl	5668 <__sfp_lock_release>
    5c80:	e1a00006 	mov	r0, r6
    5c84:	e8bd4070 	pop	{r4, r5, r6, lr}
    5c88:	e12fff1e 	bx	lr
    5c8c:	e1a00005 	mov	r0, r5
    5c90:	ebfffe17 	bl	54f4 <__sinit>
    5c94:	e1d460fc 	ldrsh	r6, [r4, #12]
    5c98:	e3560000 	cmp	r6, #0
    5c9c:	1affffd4 	bne	5bf4 <_fclose_r+0x38>
    5ca0:	eafffff5 	b	5c7c <_fclose_r+0xc0>
    5ca4:	e1a00005 	mov	r0, r5
    5ca8:	e5941010 	ldr	r1, [r4, #16]
    5cac:	ebfff841 	bl	3db8 <_free_r>
    5cb0:	eaffffdf 	b	5c34 <_fclose_r+0x78>

00005cb4 <fclose>:
    5cb4:	e59f3008 	ldr	r3, [pc, #8]	; 5cc4 <fclose+0x10>
    5cb8:	e1a01000 	mov	r1, r0
    5cbc:	e5930000 	ldr	r0, [r3]
    5cc0:	eaffffbd 	b	5bbc <_fclose_r>
    5cc4:	00006600 	.word	0x00006600

00005cc8 <_fstat_r>:
    5cc8:	e92d4038 	push	{r3, r4, r5, lr}
    5ccc:	e59f4030 	ldr	r4, [pc, #48]	; 5d04 <_fstat_r+0x3c>
    5cd0:	e3a03000 	mov	r3, #0
    5cd4:	e1a05000 	mov	r5, r0
    5cd8:	e1a00001 	mov	r0, r1
    5cdc:	e1a01002 	mov	r1, r2
    5ce0:	e5843000 	str	r3, [r4]
    5ce4:	eb00006f 	bl	5ea8 <_fstat>
    5ce8:	e3700001 	cmn	r0, #1
    5cec:	1a000002 	bne	5cfc <_fstat_r+0x34>
    5cf0:	e5943000 	ldr	r3, [r4]
    5cf4:	e3530000 	cmp	r3, #0
    5cf8:	15853000 	strne	r3, [r5]
    5cfc:	e8bd4038 	pop	{r3, r4, r5, lr}
    5d00:	e12fff1e 	bx	lr
    5d04:	00006fdc 	.word	0x00006fdc

00005d08 <_isatty_r>:
    5d08:	e92d4038 	push	{r3, r4, r5, lr}
    5d0c:	e59f402c 	ldr	r4, [pc, #44]	; 5d40 <_isatty_r+0x38>
    5d10:	e3a03000 	mov	r3, #0
    5d14:	e1a05000 	mov	r5, r0
    5d18:	e1a00001 	mov	r0, r1
    5d1c:	e5843000 	str	r3, [r4]
    5d20:	eb000078 	bl	5f08 <_isatty>
    5d24:	e3700001 	cmn	r0, #1
    5d28:	1a000002 	bne	5d38 <_isatty_r+0x30>
    5d2c:	e5943000 	ldr	r3, [r4]
    5d30:	e3530000 	cmp	r3, #0
    5d34:	15853000 	strne	r3, [r5]
    5d38:	e8bd4038 	pop	{r3, r4, r5, lr}
    5d3c:	e12fff1e 	bx	lr
    5d40:	00006fdc 	.word	0x00006fdc

00005d44 <_lseek_r>:
    5d44:	e92d4038 	push	{r3, r4, r5, lr}
    5d48:	e59f4034 	ldr	r4, [pc, #52]	; 5d84 <_lseek_r+0x40>
    5d4c:	e1a05000 	mov	r5, r0
    5d50:	e1a00001 	mov	r0, r1
    5d54:	e1a01002 	mov	r1, r2
    5d58:	e1a02003 	mov	r2, r3
    5d5c:	e3a03000 	mov	r3, #0
    5d60:	e5843000 	str	r3, [r4]
    5d64:	eb000071 	bl	5f30 <_lseek>
    5d68:	e3700001 	cmn	r0, #1
    5d6c:	1a000002 	bne	5d7c <_lseek_r+0x38>
    5d70:	e5943000 	ldr	r3, [r4]
    5d74:	e3530000 	cmp	r3, #0
    5d78:	15853000 	strne	r3, [r5]
    5d7c:	e8bd4038 	pop	{r3, r4, r5, lr}
    5d80:	e12fff1e 	bx	lr
    5d84:	00006fdc 	.word	0x00006fdc

00005d88 <_read_r>:
    5d88:	e92d4038 	push	{r3, r4, r5, lr}
    5d8c:	e59f4034 	ldr	r4, [pc, #52]	; 5dc8 <_read_r+0x40>
    5d90:	e1a05000 	mov	r5, r0
    5d94:	e1a00001 	mov	r0, r1
    5d98:	e1a01002 	mov	r1, r2
    5d9c:	e1a02003 	mov	r2, r3
    5da0:	e3a03000 	mov	r3, #0
    5da4:	e5843000 	str	r3, [r4]
    5da8:	eb00008c 	bl	5fe0 <_read>
    5dac:	e3700001 	cmn	r0, #1
    5db0:	1a000002 	bne	5dc0 <_read_r+0x38>
    5db4:	e5943000 	ldr	r3, [r4]
    5db8:	e3530000 	cmp	r3, #0
    5dbc:	15853000 	strne	r3, [r5]
    5dc0:	e8bd4038 	pop	{r3, r4, r5, lr}
    5dc4:	e12fff1e 	bx	lr
    5dc8:	00006fdc 	.word	0x00006fdc

00005dcc <__cs3_premain>:
    5dcc:	e92d4008 	push	{r3, lr}
    5dd0:	eb00019f 	bl	6454 <__libc_init_array>
    5dd4:	e59f3030 	ldr	r3, [pc, #48]	; 5e0c <__cs3_premain+0x40>
    5dd8:	e3530000 	cmp	r3, #0
    5ddc:	15930000 	ldrne	r0, [r3]
    5de0:	01a00003 	moveq	r0, r3
    5de4:	e59f3024 	ldr	r3, [pc, #36]	; 5e10 <__cs3_premain+0x44>
    5de8:	e3530000 	cmp	r3, #0
    5dec:	15931000 	ldrne	r1, [r3]
    5df0:	01a01003 	moveq	r1, r3
    5df4:	e3a02000 	mov	r2, #0
    5df8:	ebfff476 	bl	2fd8 <main>
    5dfc:	e59f3010 	ldr	r3, [pc, #16]	; 5e14 <__cs3_premain+0x48>
    5e00:	e3530000 	cmp	r3, #0
    5e04:	1bfff49c 	blne	307c <exit>
    5e08:	eafffffe 	b	5e08 <__cs3_premain+0x3c>
    5e0c:	00007084 	.word	0x00007084
    5e10:	00007088 	.word	0x00007088
    5e14:	0000307c 	.word	0x0000307c

00005e18 <_close>:
    5e18:	e92d4038 	push	{r3, r4, r5, lr}
    5e1c:	e1a05000 	mov	r5, r0
    5e20:	eb0000e8 	bl	61c8 <__cs3_openslot>
    5e24:	e2504000 	subs	r4, r0, #0
    5e28:	0a000016 	beq	5e88 <_close+0x70>
    5e2c:	e2453001 	sub	r3, r5, #1
    5e30:	e3530001 	cmp	r3, #1
    5e34:	9a000008 	bls	5e5c <_close+0x44>
    5e38:	e3a00002 	mov	r0, #2
    5e3c:	e1a01004 	mov	r1, r4
    5e40:	ef123456 	svc	0x00123456
    5e44:	e3500000 	cmp	r0, #0
    5e48:	03e03000 	mvneq	r3, #0
    5e4c:	05843000 	streq	r3, [r4]
    5e50:	eb00010a 	bl	6280 <__cs3_checkerror>
    5e54:	e8bd4038 	pop	{r3, r4, r5, lr}
    5e58:	e12fff1e 	bx	lr
    5e5c:	e3550001 	cmp	r5, #1
    5e60:	13e03007 	mvnne	r3, #7
    5e64:	03a03008 	moveq	r3, #8
    5e68:	e7943003 	ldr	r3, [r4, r3]
    5e6c:	e5942000 	ldr	r2, [r4]
    5e70:	e1520003 	cmp	r2, r3
    5e74:	03e03000 	mvneq	r3, #0
    5e78:	05843000 	streq	r3, [r4]
    5e7c:	03a00000 	moveq	r0, #0
    5e80:	1affffec 	bne	5e38 <_close+0x20>
    5e84:	eafffff2 	b	5e54 <_close+0x3c>
    5e88:	e3e00000 	mvn	r0, #0
    5e8c:	eafffff0 	b	5e54 <_close+0x3c>

00005e90 <_exit>:
    5e90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    5e94:	e3a00018 	mov	r0, #24
    5e98:	e59f1004 	ldr	r1, [pc, #4]	; 5ea4 <_exit+0x14>
    5e9c:	ef123456 	svc	0x00123456
    5ea0:	eafffffe 	b	5ea0 <_exit+0x10>
    5ea4:	00020026 	.word	0x00020026

00005ea8 <_fstat>:
    5ea8:	e92d4038 	push	{r3, r4, r5, lr}
    5eac:	e1a04001 	mov	r4, r1
    5eb0:	eb0000c4 	bl	61c8 <__cs3_openslot>
    5eb4:	e2505000 	subs	r5, r0, #0
    5eb8:	0a000010 	beq	5f00 <_fstat+0x58>
    5ebc:	e1a00004 	mov	r0, r4
    5ec0:	e3a01000 	mov	r1, #0
    5ec4:	e3a0203c 	mov	r2, #60	; 0x3c
    5ec8:	ebfffe97 	bl	592c <memset>
    5ecc:	e3a03a02 	mov	r3, #8192	; 0x2000
    5ed0:	e5843004 	str	r3, [r4, #4]
    5ed4:	e3a03b01 	mov	r3, #1024	; 0x400
    5ed8:	e584302c 	str	r3, [r4, #44]	; 0x2c
    5edc:	e3a0000c 	mov	r0, #12
    5ee0:	e1a01005 	mov	r1, r5
    5ee4:	ef123456 	svc	0x00123456
    5ee8:	e3700001 	cmn	r0, #1
    5eec:	15840010 	strne	r0, [r4, #16]
    5ef0:	13a00000 	movne	r0, #0
    5ef4:	eb0000e1 	bl	6280 <__cs3_checkerror>
    5ef8:	e8bd4038 	pop	{r3, r4, r5, lr}
    5efc:	e12fff1e 	bx	lr
    5f00:	e3e00000 	mvn	r0, #0
    5f04:	eafffffb 	b	5ef8 <_fstat+0x50>

00005f08 <_isatty>:
    5f08:	e92d4008 	push	{r3, lr}
    5f0c:	eb0000ad 	bl	61c8 <__cs3_openslot>
    5f10:	e2501000 	subs	r1, r0, #0
    5f14:	01a00001 	moveq	r0, r1
    5f18:	0a000002 	beq	5f28 <_isatty+0x20>
    5f1c:	e3a00009 	mov	r0, #9
    5f20:	ef123456 	svc	0x00123456
    5f24:	eb0000d5 	bl	6280 <__cs3_checkerror>
    5f28:	e8bd4008 	pop	{r3, lr}
    5f2c:	e12fff1e 	bx	lr

00005f30 <_lseek>:
    5f30:	e92d4070 	push	{r4, r5, r6, lr}
    5f34:	e24dd008 	sub	sp, sp, #8
    5f38:	e1a04001 	mov	r4, r1
    5f3c:	e1a05002 	mov	r5, r2
    5f40:	eb0000a0 	bl	61c8 <__cs3_openslot>
    5f44:	e2506000 	subs	r6, r0, #0
    5f48:	0a000022 	beq	5fd8 <_lseek+0xa8>
    5f4c:	e3550001 	cmp	r5, #1
    5f50:	0a00001d 	beq	5fcc <_lseek+0x9c>
    5f54:	e3550002 	cmp	r5, #2
    5f58:	0a000014 	beq	5fb0 <_lseek+0x80>
    5f5c:	e3550000 	cmp	r5, #0
    5f60:	1a00000d 	bne	5f9c <_lseek+0x6c>
    5f64:	e5963000 	ldr	r3, [r6]
    5f68:	e3540000 	cmp	r4, #0
    5f6c:	e88d0018 	stm	sp, {r3, r4}
    5f70:	ba000009 	blt	5f9c <_lseek+0x6c>
    5f74:	e3a0000a 	mov	r0, #10
    5f78:	e1a0100d 	mov	r1, sp
    5f7c:	ef123456 	svc	0x00123456
    5f80:	e3700001 	cmn	r0, #1
    5f84:	15864004 	strne	r4, [r6, #4]
    5f88:	11a00004 	movne	r0, r4
    5f8c:	eb0000bb 	bl	6280 <__cs3_checkerror>
    5f90:	e28dd008 	add	sp, sp, #8
    5f94:	e8bd4070 	pop	{r4, r5, r6, lr}
    5f98:	e12fff1e 	bx	lr
    5f9c:	eb000128 	bl	6444 <__errno>
    5fa0:	e3a03016 	mov	r3, #22
    5fa4:	e5803000 	str	r3, [r0]
    5fa8:	e3e00000 	mvn	r0, #0
    5fac:	eafffff7 	b	5f90 <_lseek+0x60>
    5fb0:	e3a0000c 	mov	r0, #12
    5fb4:	e1a01006 	mov	r1, r6
    5fb8:	ef123456 	svc	0x00123456
    5fbc:	e3700001 	cmn	r0, #1
    5fc0:	10844000 	addne	r4, r4, r0
    5fc4:	1affffe6 	bne	5f64 <_lseek+0x34>
    5fc8:	eaffffef 	b	5f8c <_lseek+0x5c>
    5fcc:	e5963004 	ldr	r3, [r6, #4]
    5fd0:	e0844003 	add	r4, r4, r3
    5fd4:	eaffffe2 	b	5f64 <_lseek+0x34>
    5fd8:	e3e00000 	mvn	r0, #0
    5fdc:	eaffffeb 	b	5f90 <_lseek+0x60>

00005fe0 <_read>:
    5fe0:	e92d4070 	push	{r4, r5, r6, lr}
    5fe4:	e24dd010 	sub	sp, sp, #16
    5fe8:	e1a06001 	mov	r6, r1
    5fec:	e1a05002 	mov	r5, r2
    5ff0:	eb000074 	bl	61c8 <__cs3_openslot>
    5ff4:	e2504000 	subs	r4, r0, #0
    5ff8:	0a00000e 	beq	6038 <_read+0x58>
    5ffc:	e5943000 	ldr	r3, [r4]
    6000:	e98d0048 	stmib	sp, {r3, r6}
    6004:	e58d500c 	str	r5, [sp, #12]
    6008:	e3a00006 	mov	r0, #6
    600c:	e28d1004 	add	r1, sp, #4
    6010:	ef123456 	svc	0x00123456
    6014:	e3700001 	cmn	r0, #1
    6018:	15943004 	ldrne	r3, [r4, #4]
    601c:	10600005 	rsbne	r0, r0, r5
    6020:	10833000 	addne	r3, r3, r0
    6024:	15843004 	strne	r3, [r4, #4]
    6028:	eb000094 	bl	6280 <__cs3_checkerror>
    602c:	e28dd010 	add	sp, sp, #16
    6030:	e8bd4070 	pop	{r4, r5, r6, lr}
    6034:	e12fff1e 	bx	lr
    6038:	e3e00000 	mvn	r0, #0
    603c:	eafffffa 	b	602c <_read+0x4c>

00006040 <_write>:
    6040:	e92d4070 	push	{r4, r5, r6, lr}
    6044:	e24dd010 	sub	sp, sp, #16
    6048:	e1a06001 	mov	r6, r1
    604c:	e1a05002 	mov	r5, r2
    6050:	eb00005c 	bl	61c8 <__cs3_openslot>
    6054:	e2504000 	subs	r4, r0, #0
    6058:	0a00000e 	beq	6098 <_write+0x58>
    605c:	e5943000 	ldr	r3, [r4]
    6060:	e98d0048 	stmib	sp, {r3, r6}
    6064:	e58d500c 	str	r5, [sp, #12]
    6068:	e3a00005 	mov	r0, #5
    606c:	e28d1004 	add	r1, sp, #4
    6070:	ef123456 	svc	0x00123456
    6074:	e3700001 	cmn	r0, #1
    6078:	15943004 	ldrne	r3, [r4, #4]
    607c:	10600005 	rsbne	r0, r0, r5
    6080:	10833000 	addne	r3, r3, r0
    6084:	15843004 	strne	r3, [r4, #4]
    6088:	eb00007c 	bl	6280 <__cs3_checkerror>
    608c:	e28dd010 	add	sp, sp, #16
    6090:	e8bd4070 	pop	{r4, r5, r6, lr}
    6094:	e12fff1e 	bx	lr
    6098:	e3e00000 	mvn	r0, #0
    609c:	eafffffa 	b	608c <_write+0x4c>

000060a0 <_sbrk>:
    60a0:	e92d4008 	push	{r3, lr}
    60a4:	e59f305c 	ldr	r3, [pc, #92]	; 6108 <_sbrk+0x68>
    60a8:	e59f105c 	ldr	r1, [pc, #92]	; 610c <_sbrk+0x6c>
    60ac:	e5932000 	ldr	r2, [r3]
    60b0:	e5913000 	ldr	r3, [r1]
    60b4:	e3520000 	cmp	r2, #0
    60b8:	e0830000 	add	r0, r3, r0
    60bc:	0a000002 	beq	60cc <_sbrk+0x2c>
    60c0:	e0602002 	rsb	r2, r0, r2
    60c4:	e3520000 	cmp	r2, #0
    60c8:	ba000009 	blt	60f4 <_sbrk+0x54>
    60cc:	e04d2003 	sub	r2, sp, r3
    60d0:	e3520000 	cmp	r2, #0
    60d4:	ba000002 	blt	60e4 <_sbrk+0x44>
    60d8:	e04d2000 	sub	r2, sp, r0
    60dc:	e35200ff 	cmp	r2, #255	; 0xff
    60e0:	da000003 	ble	60f4 <_sbrk+0x54>
    60e4:	e5810000 	str	r0, [r1]
    60e8:	e1a00003 	mov	r0, r3
    60ec:	e8bd4008 	pop	{r3, lr}
    60f0:	e12fff1e 	bx	lr
    60f4:	eb0000d2 	bl	6444 <__errno>
    60f8:	e3a0300c 	mov	r3, #12
    60fc:	e5803000 	str	r3, [r0]
    6100:	e3e03000 	mvn	r3, #0
    6104:	eafffff7 	b	60e8 <_sbrk+0x48>
    6108:	00006e40 	.word	0x00006e40
    610c:	00006e44 	.word	0x00006e44

00006110 <initialize_monitor_handles.part.0>:
    6110:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    6114:	e59f50a4 	ldr	r5, [pc, #164]	; 61c0 <initialize_monitor_handles.part.0+0xb0>
    6118:	e24dd014 	sub	sp, sp, #20
    611c:	e3a03000 	mov	r3, #0
    6120:	e3e02000 	mvn	r2, #0
    6124:	e7852003 	str	r2, [r5, r3]
    6128:	e2833008 	add	r3, r3, #8
    612c:	e35300a0 	cmp	r3, #160	; 0xa0
    6130:	e59f4088 	ldr	r4, [pc, #136]	; 61c0 <initialize_monitor_handles.part.0+0xb0>
    6134:	1afffffa 	bne	6124 <initialize_monitor_handles.part.0+0x14>
    6138:	e59f7084 	ldr	r7, [pc, #132]	; 61c4 <initialize_monitor_handles.part.0+0xb4>
    613c:	e3a06003 	mov	r6, #3
    6140:	e3a03000 	mov	r3, #0
    6144:	e58d7004 	str	r7, [sp, #4]
    6148:	e58d600c 	str	r6, [sp, #12]
    614c:	e58d3008 	str	r3, [sp, #8]
    6150:	e3a00001 	mov	r0, #1
    6154:	e28d1004 	add	r1, sp, #4
    6158:	ef123456 	svc	0x00123456
    615c:	e3a03004 	mov	r3, #4
    6160:	e5840000 	str	r0, [r4]
    6164:	e58d7004 	str	r7, [sp, #4]
    6168:	e58d600c 	str	r6, [sp, #12]
    616c:	e58d3008 	str	r3, [sp, #8]
    6170:	e3a00001 	mov	r0, #1
    6174:	e08d1003 	add	r1, sp, r3
    6178:	ef123456 	svc	0x00123456
    617c:	e3a03008 	mov	r3, #8
    6180:	e5840008 	str	r0, [r4, #8]
    6184:	e58d7004 	str	r7, [sp, #4]
    6188:	e58d600c 	str	r6, [sp, #12]
    618c:	e58d3008 	str	r3, [sp, #8]
    6190:	e3a00001 	mov	r0, #1
    6194:	e28d1004 	add	r1, sp, #4
    6198:	ef123456 	svc	0x00123456
    619c:	e3700001 	cmn	r0, #1
    61a0:	05943008 	ldreq	r3, [r4, #8]
    61a4:	e5840010 	str	r0, [r4, #16]
    61a8:	05843010 	streq	r3, [r4, #16]
    61ac:	e3a03001 	mov	r3, #1
    61b0:	e58530a0 	str	r3, [r5, #160]	; 0xa0
    61b4:	e28dd014 	add	sp, sp, #20
    61b8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    61bc:	e12fff1e 	bx	lr
    61c0:	00006fe0 	.word	0x00006fe0
    61c4:	000065a0 	.word	0x000065a0

000061c8 <__cs3_openslot>:
    61c8:	e92d4038 	push	{r3, r4, r5, lr}
    61cc:	e59f5044 	ldr	r5, [pc, #68]	; 6218 <__cs3_openslot+0x50>
    61d0:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
    61d4:	e3530000 	cmp	r3, #0
    61d8:	e1a04000 	mov	r4, r0
    61dc:	0bffffcb 	bleq	6110 <initialize_monitor_handles.part.0>
    61e0:	e3540013 	cmp	r4, #19
    61e4:	8a000006 	bhi	6204 <__cs3_openslot+0x3c>
    61e8:	e7953184 	ldr	r3, [r5, r4, lsl #3]
    61ec:	e3730001 	cmn	r3, #1
    61f0:	159f0020 	ldrne	r0, [pc, #32]	; 6218 <__cs3_openslot+0x50>
    61f4:	10800184 	addne	r0, r0, r4, lsl #3
    61f8:	0a000001 	beq	6204 <__cs3_openslot+0x3c>
    61fc:	e8bd4038 	pop	{r3, r4, r5, lr}
    6200:	e12fff1e 	bx	lr
    6204:	eb00008e 	bl	6444 <__errno>
    6208:	e3a03009 	mov	r3, #9
    620c:	e5803000 	str	r3, [r0]
    6210:	e3a00000 	mov	r0, #0
    6214:	eafffff8 	b	61fc <__cs3_openslot+0x34>
    6218:	00006fe0 	.word	0x00006fe0

0000621c <__cs3_newslot>:
    621c:	e92d4038 	push	{r3, r4, r5, lr}
    6220:	e59f4054 	ldr	r4, [pc, #84]	; 627c <__cs3_newslot+0x60>
    6224:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
    6228:	e3530000 	cmp	r3, #0
    622c:	e1a05000 	mov	r5, r0
    6230:	0bffffb6 	bleq	6110 <initialize_monitor_handles.part.0>
    6234:	e3a03000 	mov	r3, #0
    6238:	e7942183 	ldr	r2, [r4, r3, lsl #3]
    623c:	e3720001 	cmn	r2, #1
    6240:	e1a02183 	lsl	r2, r3, #3
    6244:	0a000008 	beq	626c <__cs3_newslot+0x50>
    6248:	e2833001 	add	r3, r3, #1
    624c:	e3530014 	cmp	r3, #20
    6250:	1afffff8 	bne	6238 <__cs3_newslot+0x1c>
    6254:	eb00007a 	bl	6444 <__errno>
    6258:	e3a03018 	mov	r3, #24
    625c:	e5803000 	str	r3, [r0]
    6260:	e3a00000 	mov	r0, #0
    6264:	e8bd4038 	pop	{r3, r4, r5, lr}
    6268:	e12fff1e 	bx	lr
    626c:	e59f0008 	ldr	r0, [pc, #8]	; 627c <__cs3_newslot+0x60>
    6270:	e5853000 	str	r3, [r5]
    6274:	e0800002 	add	r0, r0, r2
    6278:	eafffff9 	b	6264 <__cs3_newslot+0x48>
    627c:	00006fe0 	.word	0x00006fe0

00006280 <__cs3_checkerror>:
    6280:	e3700001 	cmn	r0, #1
    6284:	e92d4038 	push	{r3, r4, r5, lr}
    6288:	e1a04000 	mov	r4, r0
    628c:	0a000002 	beq	629c <__cs3_checkerror+0x1c>
    6290:	e1a00004 	mov	r0, r4
    6294:	e8bd4038 	pop	{r3, r4, r5, lr}
    6298:	e12fff1e 	bx	lr
    629c:	eb000068 	bl	6444 <__errno>
    62a0:	e3a01000 	mov	r1, #0
    62a4:	e1a05000 	mov	r5, r0
    62a8:	e3a00013 	mov	r0, #19
    62ac:	ef123456 	svc	0x00123456
    62b0:	e5850000 	str	r0, [r5]
    62b4:	eafffff5 	b	6290 <__cs3_checkerror+0x10>

000062b8 <initialize_argv>:
    62b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    62bc:	e3a00c01 	mov	r0, #256	; 0x100
    62c0:	e24dd008 	sub	sp, sp, #8
    62c4:	ebffff75 	bl	60a0 <_sbrk>
    62c8:	e3700001 	cmn	r0, #1
    62cc:	e1a07000 	mov	r7, r0
    62d0:	0a000039 	beq	63bc <initialize_argv+0x104>
    62d4:	e3a05000 	mov	r5, #0
    62d8:	e3a03c01 	mov	r3, #256	; 0x100
    62dc:	e5c05000 	strb	r5, [r0]
    62e0:	e1a0100d 	mov	r1, sp
    62e4:	e3a00015 	mov	r0, #21
    62e8:	e58d7000 	str	r7, [sp]
    62ec:	e58d3004 	str	r3, [sp, #4]
    62f0:	ef123456 	svc	0x00123456
    62f4:	e59f8140 	ldr	r8, [pc, #320]	; 643c <initialize_argv+0x184>
    62f8:	e1a00005 	mov	r0, r5
    62fc:	e3a09001 	mov	r9, #1
    6300:	e1a0a005 	mov	r10, r5
    6304:	e588a0a4 	str	r10, [r8, #164]	; 0xa4
    6308:	e1a0c007 	mov	r12, r7
    630c:	e1a04007 	mov	r4, r7
    6310:	e3a06000 	mov	r6, #0
    6314:	e5d41000 	ldrb	r1, [r4]
    6318:	e3510000 	cmp	r1, #0
    631c:	0a00001d 	beq	6398 <initialize_argv+0xe0>
    6320:	e3560000 	cmp	r6, #0
    6324:	e2842001 	add	r2, r4, #1
    6328:	1a000006 	bne	6348 <initialize_argv+0x90>
    632c:	e3500000 	cmp	r0, #0
    6330:	159830a4 	ldrne	r3, [r8, #164]	; 0xa4
    6334:	1780c103 	strne	r12, [r0, r3, lsl #2]
    6338:	e59830a4 	ldr	r3, [r8, #164]	; 0xa4
    633c:	e2833001 	add	r3, r3, #1
    6340:	e58830a4 	str	r3, [r8, #164]	; 0xa4
    6344:	e3a06001 	mov	r6, #1
    6348:	e3510020 	cmp	r1, #32
    634c:	0a000022 	beq	63dc <initialize_argv+0x124>
    6350:	e3510022 	cmp	r1, #34	; 0x22
    6354:	13510027 	cmpne	r1, #39	; 0x27
    6358:	1a00001a 	bne	63c8 <initialize_argv+0x110>
    635c:	e5d43001 	ldrb	r3, [r4, #1]
    6360:	e3530000 	cmp	r3, #0
    6364:	0a000032 	beq	6434 <initialize_argv+0x17c>
    6368:	e1510003 	cmp	r1, r3
    636c:	0a00001f 	beq	63f0 <initialize_argv+0x138>
    6370:	e2842002 	add	r2, r4, #2
    6374:	ea000001 	b	6380 <initialize_argv+0xc8>
    6378:	e1510003 	cmp	r1, r3
    637c:	0a00001c 	beq	63f4 <initialize_argv+0x13c>
    6380:	e3500000 	cmp	r0, #0
    6384:	14cc3001 	strbne	r3, [r12], #1
    6388:	e1a04002 	mov	r4, r2
    638c:	e4d23001 	ldrb	r3, [r2], #1
    6390:	e3530000 	cmp	r3, #0
    6394:	1afffff7 	bne	6378 <initialize_argv+0xc0>
    6398:	e3590001 	cmp	r9, #1
    639c:	0a000016 	beq	63fc <initialize_argv+0x144>
    63a0:	e3590002 	cmp	r9, #2
    63a4:	1a000020 	bne	642c <initialize_argv+0x174>
    63a8:	e3a03000 	mov	r3, #0
    63ac:	e5cc3000 	strb	r3, [r12]
    63b0:	e59820a4 	ldr	r2, [r8, #164]	; 0xa4
    63b4:	e7803102 	str	r3, [r0, r2, lsl #2]
    63b8:	e58800a8 	str	r0, [r8, #168]	; 0xa8
    63bc:	e28dd008 	add	sp, sp, #8
    63c0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    63c4:	e12fff1e 	bx	lr
    63c8:	e3500000 	cmp	r0, #0
    63cc:	01a04002 	moveq	r4, r2
    63d0:	14cc1001 	strbne	r1, [r12], #1
    63d4:	11a04002 	movne	r4, r2
    63d8:	eaffffcd 	b	6314 <initialize_argv+0x5c>
    63dc:	e3500000 	cmp	r0, #0
    63e0:	14cca001 	strbne	r10, [r12], #1
    63e4:	e1a04002 	mov	r4, r2
    63e8:	e3a06000 	mov	r6, #0
    63ec:	eaffffc8 	b	6314 <initialize_argv+0x5c>
    63f0:	e1a04002 	mov	r4, r2
    63f4:	e2844001 	add	r4, r4, #1
    63f8:	eaffffc5 	b	6314 <initialize_argv+0x5c>
    63fc:	e0670004 	rsb	r0, r7, r4
    6400:	e2800010 	add	r0, r0, #16
    6404:	e3c0000f 	bic	r0, r0, #15
    6408:	e2400c01 	sub	r0, r0, #256	; 0x100
    640c:	ebffff23 	bl	60a0 <_sbrk>
    6410:	e59800a4 	ldr	r0, [r8, #164]	; 0xa4
    6414:	e2800004 	add	r0, r0, #4
    6418:	e3c00003 	bic	r0, r0, #3
    641c:	e1a00100 	lsl	r0, r0, #2
    6420:	ebffff1e 	bl	60a0 <_sbrk>
    6424:	e3700001 	cmn	r0, #1
    6428:	0affffe3 	beq	63bc <initialize_argv+0x104>
    642c:	e2899001 	add	r9, r9, #1
    6430:	eaffffb3 	b	6304 <initialize_argv+0x4c>
    6434:	e1a04002 	mov	r4, r2
    6438:	eaffffd6 	b	6398 <initialize_argv+0xe0>
    643c:	00006fe0 	.word	0x00006fe0

00006440 <__cs3_isr_interrupt>:
    6440:	eafffffe 	b	6440 <__cs3_isr_interrupt>

00006444 <__errno>:
    6444:	e59f3004 	ldr	r3, [pc, #4]	; 6450 <__errno+0xc>
    6448:	e5930000 	ldr	r0, [r3]
    644c:	e12fff1e 	bx	lr
    6450:	00006600 	.word	0x00006600

00006454 <__libc_init_array>:
    6454:	e92d4070 	push	{r4, r5, r6, lr}
    6458:	e59f506c 	ldr	r5, [pc, #108]	; 64cc <__libc_init_array+0x78>
    645c:	e59f606c 	ldr	r6, [pc, #108]	; 64d0 <__libc_init_array+0x7c>
    6460:	e0656006 	rsb	r6, r5, r6
    6464:	e1b06146 	asrs	r6, r6, #2
    6468:	12455004 	subne	r5, r5, #4
    646c:	13a04000 	movne	r4, #0
    6470:	0a000005 	beq	648c <__libc_init_array+0x38>
    6474:	e5b53004 	ldr	r3, [r5, #4]!
    6478:	e2844001 	add	r4, r4, #1
    647c:	e1a0e00f 	mov	lr, pc
    6480:	e12fff13 	bx	r3
    6484:	e1560004 	cmp	r6, r4
    6488:	1afffff9 	bne	6474 <__libc_init_array+0x20>
    648c:	e59f5040 	ldr	r5, [pc, #64]	; 64d4 <__libc_init_array+0x80>
    6490:	e59f6040 	ldr	r6, [pc, #64]	; 64d8 <__libc_init_array+0x84>
    6494:	e0656006 	rsb	r6, r5, r6
    6498:	eb000041 	bl	65a4 <_init>
    649c:	e1b06146 	asrs	r6, r6, #2
    64a0:	12455004 	subne	r5, r5, #4
    64a4:	13a04000 	movne	r4, #0
    64a8:	0a000005 	beq	64c4 <__libc_init_array+0x70>
    64ac:	e5b53004 	ldr	r3, [r5, #4]!
    64b0:	e2844001 	add	r4, r4, #1
    64b4:	e1a0e00f 	mov	lr, pc
    64b8:	e12fff13 	bx	r3
    64bc:	e1560004 	cmp	r6, r4
    64c0:	1afffff9 	bne	64ac <__libc_init_array+0x58>
    64c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    64c8:	e12fff1e 	bx	lr
    64cc:	000065bc 	.word	0x000065bc
    64d0:	000065bc 	.word	0x000065bc
    64d4:	000065bc 	.word	0x000065bc
    64d8:	000065c8 	.word	0x000065c8

Disassembly of section .rodata:

000064e0 <_global_impure_ptr-0xb4>:
    64e0:	63617053 	.word	0x63617053
    64e4:	6f742065 	.word	0x6f742065
    64e8:	7263206f 	.word	0x7263206f
    64ec:	6564776f 	.word	0x6564776f
    64f0:	6f742064 	.word	0x6f742064
    64f4:	64646120 	.word	0x64646120
    64f8:	77656e20 	.word	0x77656e20
    64fc:	61686320 	.word	0x61686320
    6500:	74636172 	.word	0x74636172
    6504:	202e7265 	.word	0x202e7265
    6508:	00000000 	.word	0x00000000
    650c:	63617053 	.word	0x63617053
    6510:	6f742065 	.word	0x6f742065
    6514:	7263206f 	.word	0x7263206f
    6518:	6564776f 	.word	0x6564776f
    651c:	6f742064 	.word	0x6f742064
    6520:	64646120 	.word	0x64646120
    6524:	77656e20 	.word	0x77656e20
    6528:	626f6d20 	.word	0x626f6d20
    652c:	0000202e 	.word	0x0000202e
    6530:	63617053 	.word	0x63617053
    6534:	6f742065 	.word	0x6f742065
    6538:	7263206f 	.word	0x7263206f
    653c:	6564776f 	.word	0x6564776f
    6540:	6f742064 	.word	0x6f742064
    6544:	64646120 	.word	0x64646120
    6548:	77656e20 	.word	0x77656e20
    654c:	72657420 	.word	0x72657420
    6550:	6e696172 	.word	0x6e696172
    6554:	0000202e 	.word	0x0000202e
    6558:	44626f6d 	.word	0x44626f6d
    655c:	2e646569 	.word	0x2e646569
    6560:	00000020 	.word	0x00000020
    6564:	73206f4e 	.word	0x73206f4e
    6568:	65636170 	.word	0x65636170
    656c:	726f6620 	.word	0x726f6620
    6570:	6e206120 	.word	0x6e206120
    6574:	6d207765 	.word	0x6d207765
    6578:	002e626f 	.word	0x002e626f
    657c:	73206f4e 	.word	0x73206f4e
    6580:	65636170 	.word	0x65636170
    6584:	726f6620 	.word	0x726f6620
    6588:	6e206120 	.word	0x6e206120
    658c:	74207765 	.word	0x74207765
    6590:	002e7265 	.word	0x002e7265

00006594 <_global_impure_ptr>:
    6594:	00006608 00000043 0000000a 0074743a     .f..C.......:tt.

000065a4 <_init>:
    65a4:	e1a0c00d 	mov	r12, sp
    65a8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    65ac:	e24cb004 	sub	r11, r12, #4
    65b0:	e24bd028 	sub	sp, r11, #40	; 0x28
    65b4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    65b8:	e12fff1e 	bx	lr

000065bc <__init_array_start>:
    65bc:	00003c54 	.word	0x00003c54

000065c0 <__frame_dummy_init_array_entry>:
    65c0:	00000208 000062b8                       .....b..

000065c8 <__libc_fini>:
    65c8:	e1a0c00d 	mov	r12, sp
    65cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    65d0:	e24cb004 	sub	r11, r12, #4
    65d4:	e24bd028 	sub	sp, r11, #40	; 0x28
    65d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    65dc:	e12fff1e 	bx	lr

000065e0 <__fini_array_start>:
    65e0:	000001c4 	.word	0x000001c4

000065e4 <__cs3_regions>:
    65e4:	00000000 	.word	0x00000000
    65e8:	00000040 	.word	0x00000040
    65ec:	00000040 	.word	0x00000040
    65f0:	00006e08 	.word	0x00006e08
    65f4:	00000248 	.word	0x00000248
